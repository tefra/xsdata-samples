from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.access import Access
from ipxact.models.access_policies import AccessPolicies
from ipxact.models.access_type import AccessType
from ipxact.models.address_block import AddressBlock
from ipxact.models.address_block_type import AddressBlockType
from ipxact.models.base_address import BaseAddress
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.clock_driver import ClockDriver
from ipxact.models.clock_driver_type import ClockDriverType
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.default_value import DefaultValue
from ipxact.models.dependency import Dependency
from ipxact.models.description import Description
from ipxact.models.driver import Driver
from ipxact.models.drivers import Drivers
from ipxact.models.extended_vectors_type import ExtendedVectorsType
from ipxact.models.field_type import FieldType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.left import Left
from ipxact.models.memory_map_ref import MemoryMapRef
from ipxact.models.memory_map_type import MemoryMapType
from ipxact.models.memory_maps import MemoryMaps
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.modified_write_value import ModifiedWriteValue
from ipxact.models.modified_write_value_type import ModifiedWriteValueType
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.port import Port
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.reset import Reset
from ipxact.models.right import Right
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.unsigned_bit_expression import UnsignedBitExpression
from ipxact.models.unsigned_bit_vector_expression import UnsignedBitVectorExpression
from ipxact.models.unsigned_int_expression import UnsignedIntExpression
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_int_expression import UnsignedPositiveIntExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.value import Value


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2RTL',
    name='i2c',
    version='1.0',
    description=Description(
        value='I2C master controller - with enhanced register descriptions'
    ),
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='IPClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='ip_clk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='IPReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rst_an'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='ambaAPB',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(
                    memory_map_ref=MemoryMapRef(
                        memory_map_ref='ambaAPB'
                    )
                ),
                connection_required=True
            ),
            BusInterface(
                name='i2c_internal',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.nxp',
                    name='i2c_internal',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.nxp',
                                name='i2c_internal_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='SCL_IN'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='sclIn'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='SCL_OEN'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='sclOut'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='SDA_IN'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='sdaIn'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='SDA_OEN'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='sdaOut'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                ),
                connection_required=True
            ),
            BusInterface(
                name='interrupt',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='intr'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
        ]
    ),
    memory_maps=MemoryMaps(
        memory_map=[
            MemoryMapType(
                name='ambaAPB',
                address_block=[
                    AddressBlock(
                        name='registers',
                        base_address=BaseAddress(
                            value='0'
                        ),
                        range=UnsignedPositiveLongintExpression(
                            value='4 * (2 ** 10)'
                        ),
                        width=UnsignedPositiveIntExpression(
                            value='32'
                        ),
                        register=[
                            AddressBlockType.Register(
                                name='rxfifo',
                                description=Description(
                                    value='Recieve FIFO'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h0"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_ONLY
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved for future use'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='8'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='24'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h00000000) >> 8) & {24{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Data_byte',
                                        description=Description(
                                            value='Bit 7 is the MSB'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h00000000) >> 0) & {8{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='txfifo',
                                description=Description(
                                    value='Transmit FIFO'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h0"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.WRITE_ONLY
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved for future use'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='10'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='22'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h00000000) >> 10) & {22{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.WRITE_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='STOP_bit',
                                        description=Description(
                                            value='Issue a STOP condition after transmitting this data byte'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='9'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h00000000) >> 9) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.WRITE_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='START_bit',
                                        description=Description(
                                            value='Issue a START condition before transmitting this data byte'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='8'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h00000000) >> 8) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.WRITE_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Data_byte',
                                        description=Description(
                                            value='Bit 7 is the MSB'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h00000000) >> 0) & {8{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.WRITE_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='status',
                                description=Description(
                                    value='Status register'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h4"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='transmitDone',
                                        description=Description(
                                            value='Indicates that the current transmission is complete. Write a 1 to clear this bit.'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 0) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    modified_write_value=ModifiedWriteValue(
                                                        value=ModifiedWriteValueType.ONE_TO_CLEAR
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='arbitrationFailure',
                                        description=Description(
                                            value='Indicates an arbitration failure. Wite a 1 to clear this bit.'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 1) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    modified_write_value=ModifiedWriteValue(
                                                        value=ModifiedWriteValueType.ONE_TO_CLEAR
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='noAcknowledge',
                                        description=Description(
                                            value='Indicates that no acknowledge was recieved on the current transmission. This bit is reset when a new transmission starts.'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='2'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 2) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='active',
                                        description=Description(
                                            value='Indicates that I2C bus is active'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='3'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 3) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='scl',
                                        description=Description(
                                            value='Indicates the current state of the scl line'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='4'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 4) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='sda',
                                        description=Description(
                                            value='Indicates the current state of the sda line'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='5'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 5) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='receiveFifoFull',
                                        description=Description(
                                            value='Indicates that the receive FIFO is full'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='6'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 6) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='receiveFifoEmpty',
                                        description=Description(
                                            value='Indicates that the receive FIFO is empty'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='7'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 7) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='trasmitFifoFull',
                                        description=Description(
                                            value='Indicates that the trasmit FIFO is full'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='8'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 8) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='trasmitFifoEmpty',
                                        description=Description(
                                            value='Indicates that the trasmit FIFO is empty'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='9'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 9) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='10'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='22'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h180) >> 10) & {22{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='control',
                                description=Description(
                                    value='Control register'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h8"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='transactionDoneIntEnable',
                                        description=Description(
                                            value='Transaction done interrupt enable'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 0) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='arbFailIntEnable',
                                        description=Description(
                                            value='Abatration failure interrupt enable'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 1) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='noAckIntEnable',
                                        description=Description(
                                            value='No ackowledge interrupt enable'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='2'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 2) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='softReset',
                                        description=Description(
                                            value='Soft reset of the IP'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='3'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 3) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='5'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='27'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 5) & {27{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='clkDivHi',
                                description=Description(
                                    value='Clock high time divide register'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'hc"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='6'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='clkDivHi',
                                        description=Description(
                                            value='Clock high time divide field'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='6'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h30) >> 0) & {6{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='7'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='25'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h30) >> 7) & {25{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='clkDivLo',
                                description=Description(
                                    value='Clock low time divide register'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h10"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='6'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='clkDivLo',
                                        description=Description(
                                            value='Clock low time divide field'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='6'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h30) >> 0) & {6{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='7'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='25'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h30) >> 7) & {25{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='Module_ID',
                                description=Description(
                                    value='Contains the ID number of the IP'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'hFFC"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_ONLY
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='ID',
                                        description=Description(
                                            value='Unique identification number'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='16'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h00000D02) >> 0) & {16{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='16'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h00000D02) >> 16) & {16{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                        ]
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='verilogsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='verilogsource'
                ),
                ModelType.Views.View(
                    name='vhdlwrapper',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                    ],
                    component_instantiation_ref='vhdlwrapper'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='verilogsource',
                    language=LanguageType(
                        value='verilog'
                    ),
                    module_name='i2c',
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-verilogSource'
                        ),
                    ]
                ),
                ComponentInstantiationType(
                    name='vhdlwrapper',
                    language=LanguageType(
                        value='vhdl'
                    ),
                    module_name='i2c',
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-verilogSource'
                        ),
                        FileSetRef(
                            local_name='fs-vhdlWrapper'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='pclk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    clock_driver=ClockDriver(
                                        clock_period=ClockDriverType.ClockPeriod(
                                            value='ClockPeriod'
                                        ),
                                        clock_pulse_offset=ClockDriverType.ClockPulseOffset(
                                            value='ClockPulseOffset'
                                        ),
                                        clock_pulse_value=UnsignedBitExpression(
                                            value='ClockPulseValue'
                                        ),
                                        clock_pulse_duration=ClockDriverType.ClockPulseDuration(
                                            value='ClockPulseDuration'
                                        ),
                                        clock_name='clk'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='presetn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='psel',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='penable',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='paddr',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='11'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='pwdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='sclIn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='1'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='sclOut',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='sdaIn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='1'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='sdaOut',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='ip_clk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    clock_driver=ClockDriver(
                                        clock_period=ClockDriverType.ClockPeriod(
                                            value='ipClockPeriod'
                                        ),
                                        clock_pulse_offset=ClockDriverType.ClockPulseOffset(
                                            value='ipClockPulseOffset'
                                        ),
                                        clock_pulse_value=UnsignedBitExpression(
                                            value='ipClockPulseValue'
                                        ),
                                        clock_pulse_duration=ClockDriverType.ClockPulseDuration(
                                            value='ipClockPulseDuration'
                                        ),
                                        clock_name='ipclk'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='rst_an',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='intr',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
            ]
        )
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='fs-verilogSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_apb_read_mux.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_apb_write_decode.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_clkcnt.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_control.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_intr.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_master.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_risefall.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_rx.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_rxfifo.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_shift.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_status.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_transitions.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_tx.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c_txfifo.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                ],
                dependency=[
                    Dependency(
                        value='data/i2c/RTL'
                    ),
                ]
            ),
            FileSet(
                name='fs-vhdlWrapper',
                file=[
                    File(
                        name=IpxactUri(
                            value='data/i2c/RTL/i2c.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='i2c_lib'
                        )
                    ),
                ]
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='ClockPulseValue',
                value=Value(
                    value='1'
                ),
                parameter_id='ClockPulseValue',
                prompt='Clock Pulse Value:',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ipClockPulseValue',
                value=Value(
                    value='1'
                ),
                parameter_id='ipClockPulseValue',
                prompt='IP Clock Pulse Value:',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPeriod',
                value=Value(
                    value='8'
                ),
                parameter_id='ClockPeriod',
                prompt='Clock Pulse Period:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ipClockPeriod',
                value=Value(
                    value='1000'
                ),
                parameter_id='ipClockPeriod',
                prompt='IP Clock Pulse Period:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPulseDuration',
                value=Value(
                    value='4'
                ),
                parameter_id='ClockPulseDuration',
                prompt='Clock Pulse Duration:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ipClockPulseDuration',
                value=Value(
                    value='500'
                ),
                parameter_id='ipClockPulseDuration',
                prompt='IP Clock Pulse Duration:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPulseOffset',
                value=Value(
                    value='4'
                ),
                parameter_id='ClockPulseOffset',
                prompt='Clock Pulse Offset:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ipClockPulseOffset',
                value=Value(
                    value='500'
                ),
                parameter_id='ipClockPulseOffset',
                prompt='IP Clock Pulse Offset:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
        ]
    )
)
