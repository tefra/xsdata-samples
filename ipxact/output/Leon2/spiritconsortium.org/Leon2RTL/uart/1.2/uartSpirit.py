from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.access import Access
from ipxact.models.access_policies import AccessPolicies
from ipxact.models.access_type import AccessType
from ipxact.models.address_block import AddressBlock
from ipxact.models.address_block_type import AddressBlockType
from ipxact.models.base_address import BaseAddress
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.choices import Choices
from ipxact.models.clock_driver import ClockDriver
from ipxact.models.clock_driver_type import ClockDriverType
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.constraint_set import ConstraintSet
from ipxact.models.constraint_set_ref import ConstraintSetRef
from ipxact.models.constraint_sets import ConstraintSets
from ipxact.models.default_value import DefaultValue
from ipxact.models.description import Description
from ipxact.models.driver import Driver
from ipxact.models.drivers import Drivers
from ipxact.models.edge_value_type import EdgeValueType
from ipxact.models.enumerated_value_type import EnumeratedValueType
from ipxact.models.enumerated_values import EnumeratedValues
from ipxact.models.extended_vectors_type import ExtendedVectorsType
from ipxact.models.field_type import FieldType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.left import Left
from ipxact.models.memory_map_ref import MemoryMapRef
from ipxact.models.memory_map_type import MemoryMapType
from ipxact.models.memory_maps import MemoryMaps
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.module_parameter_type import ModuleParameterType
from ipxact.models.module_parameter_type_usage_type import ModuleParameterTypeUsageType
from ipxact.models.other_clock_driver import OtherClockDriver
from ipxact.models.other_clocks import OtherClocks
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.port import Port
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.reset import Reset
from ipxact.models.right import Right
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.timing_constraint import TimingConstraint
from ipxact.models.unsigned_bit_expression import UnsignedBitExpression
from ipxact.models.unsigned_bit_vector_expression import UnsignedBitVectorExpression
from ipxact.models.unsigned_int_expression import UnsignedIntExpression
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_int_expression import UnsignedPositiveIntExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.value import Value
from ipxact.models.volatile import Volatile


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2RTL',
    name='uartSpirit',
    version='1.2',
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='APBClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='clk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rst'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='ambaAPB',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.amba',
                                name='APB_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='Select'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='Enable'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='Address'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='Write'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='WriteData'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='ReadData'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='Clock'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='clk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='Resetn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rst'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(
                    memory_map_ref=MemoryMapRef(
                        memory_map_ref='ambaAPB'
                    )
                ),
                connection_required=True
            ),
            BusInterface(
                name='Interrupt',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='serial',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.generic',
                    name='serial',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.generic',
                                name='serial_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RxD'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rxd'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='TxD'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='txd'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CTSn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='ctsn'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RTSn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rtsn'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='DTRn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rxen'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
        ]
    ),
    memory_maps=MemoryMaps(
        memory_map=[
            MemoryMapType(
                name='ambaAPB',
                address_block=[
                    AddressBlock(
                        name='defaultid4489950',
                        base_address=BaseAddress(
                            value='0'
                        ),
                        range=UnsignedPositiveLongintExpression(
                            value='16'
                        ),
                        width=UnsignedPositiveIntExpression(
                            value='width'
                        ),
                        parameters=Parameters(
                            parameter=[
                                Parameter(
                                    name='width',
                                    value=Value(
                                        value='32'
                                    ),
                                    parameter_id='width',
                                    type_value=FormatType.LONGINT
                                ),
                            ]
                        ),
                        register=[
                            AddressBlockType.Register(
                                name='data',
                                description=Description(
                                    value='Data read/write register'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h0"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                volatile=Volatile(
                                    value=True
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='data',
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='32'
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='status',
                                description=Description(
                                    value='Status register'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h4"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='dataReady',
                                        description=Description(
                                            value='Indicates that new data is available in the receiver holding register'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h6) >> 0) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h007F) >> 0) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='transmitShiftRegisterEmpty',
                                        description=Description(
                                            value='Indicates that the transmitter shift register is empty'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h6) >> 1) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h007F) >> 1) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='transmitHoldRegisterEmpty',
                                        description=Description(
                                            value='Indicates that the transmitter hold register is empty'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='2'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h6) >> 2) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h007F) >> 2) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='breakReceived',
                                        description=Description(
                                            value='Indicates that the a BREAK has been received'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='3'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h6) >> 3) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h007F) >> 3) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='overrun',
                                        description=Description(
                                            value='Indicates that one or more characters was lost due to an overrun'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='4'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h6) >> 4) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h007F) >> 4) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='parityError',
                                        description=Description(
                                            value='Indicates that a parity error was detected'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='5'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h6) >> 5) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h007F) >> 5) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='framingError',
                                        description=Description(
                                            value='Indicates thata framing error was detected'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='6'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h6) >> 6) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h007F) >> 6) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='7'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='25'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h6) >> 7) & {25{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h007F) >> 7) & {25{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='control',
                                description=Description(
                                    value='Control register'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h8"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='receiverEnable',
                                        description=Description(
                                            value='If set, enables receiver'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 0) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 0) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='transmitterEnable',
                                        description=Description(
                                            value='If set, enables transmitter'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 1) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 1) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='receiverInterruptEnable',
                                        description=Description(
                                            value='If set, enables generation of receive interrupt'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='2'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 2) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 2) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='transmitterInterruptEnable',
                                        description=Description(
                                            value='If set, enables generation of transmit interrupt'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='3'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 3) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 3) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='paritySelect',
                                        description=Description(
                                            value='Selects parity polarity (0=odd parity, 1=even parity)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='4'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 4) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 4) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        ),
                                        enumerated_values=EnumeratedValues(
                                            enumerated_value=[
                                                EnumeratedValueType(
                                                    name='oddParity',
                                                    description=Description(
                                                        value='oddParity'
                                                    ),
                                                    value=UnsignedBitVectorExpression(
                                                        value='0'
                                                    )
                                                ),
                                                EnumeratedValueType(
                                                    name='evenParity',
                                                    description=Description(
                                                        value='evenParity'
                                                    ),
                                                    value=UnsignedBitVectorExpression(
                                                        value='1'
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='parityEnable',
                                        description=Description(
                                            value='If set, enables parity generation and checking'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='5'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 5) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 5) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='flowControl',
                                        description=Description(
                                            value='If set, enables flow control using CTS/RTS'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='6'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 6) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 6) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='loopBack',
                                        description=Description(
                                            value='If set, loopback mode will be enabled'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='7'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 7) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 7) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='externalClock',
                                        description=Description(
                                            value='If set, the UART scaler will be clocked from EXTCLK'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='8'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 8) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 8) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='9'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='23'
                                        ),
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 9) & {23{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('h0143) >> 9) & {23{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='scalarReload',
                                description=Description(
                                    value='Scalar Reload register'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'hc"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='scalarReloadValue',
                                        description=Description(
                                            value='Scalar reload value'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='12'
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='reserved',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='12'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='20'
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_ONLY
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                        ]
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='vhdlsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='vhdlsource'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='vhdlsource',
                    language=LanguageType(
                        value='vhdl'
                    ),
                    module_name='leon2Uart(struct)',
                    module_parameters=ComponentInstantiationType.ModuleParameters(
                        module_parameter=[
                            ModuleParameterType(
                                name='EXTBAUD',
                                value=Value(
                                    value='EXTBAUD'
                                ),
                                data_type='boolean',
                                usage_type=ModuleParameterTypeUsageType.NONTYPED
                            ),
                        ]
                    ),
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-vhdlSource'
                        ),
                    ],
                    constraint_set_ref=[
                        ConstraintSetRef(
                            local_name='normal'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='clk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    clock_driver=ClockDriver(
                                        clock_period=ClockDriverType.ClockPeriod(
                                            value='ClockPeriod'
                                        ),
                                        clock_pulse_offset=ClockDriverType.ClockPulseOffset(
                                            value='ClockPulseOffset'
                                        ),
                                        clock_pulse_value=UnsignedBitExpression(
                                            value='ClockPulseValue'
                                        ),
                                        clock_pulse_duration=ClockDriverType.ClockPulseDuration(
                                            value='ClockPulseDuration'
                                        ),
                                        clock_name='clk'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='rst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=50.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=50.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='penable',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=50.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='paddr',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=50.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=50.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=50.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=90.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irq',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=80.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='scaler',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='7'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='sigdefVal_scaler'
                                    )
                                ),
                            ]
                        ),
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=75.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='rxd',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='sigdefVal_rxd'
                                    )
                                ),
                            ]
                        ),
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=75.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='rxen',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=60.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='txd',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=60.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='txen',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=60.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='flow',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=60.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='rtsn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=60.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='ctsn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='sigdefVal_ctsn'
                                    )
                                ),
                            ]
                        ),
                        constraint_sets=ConstraintSets(
                            constraint_set=[
                                ConstraintSet(
                                    timing_constraint=[
                                        TimingConstraint(
                                            value=75.0,
                                            clock_edge=EdgeValueType.RISE,
                                            clock_name='virtual_clk'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    choices=Choices(
        choice=[
            Choices.Choice(
                name='EXTBAUDChoice',
                enumeration=[
                    Choices.Choice.Enumeration(
                        value='false',
                        text='false'
                    ),
                    Choices.Choice.Enumeration(
                        value='true',
                        text='true'
                    ),
                ]
            ),
        ]
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='fs-vhdlSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='../../common/target.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/device.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/config.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/sparcv8.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/iface.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/amba.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/ambacomp.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/macro.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_generic.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_atc25.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_atc35.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_fs90.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_umc18.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_virtex.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_tsmc25.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_proasic.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_axcel.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/multlib.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_map.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/uart.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/leon2Uart.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2uart_lib'
                        )
                    ),
                ]
            ),
        ]
    ),
    other_clock_drivers=OtherClocks(
        other_clock_driver=[
            OtherClockDriver(
                clock_period=ClockDriverType.ClockPeriod(
                    value='VirtualClockPeriod'
                ),
                clock_pulse_offset=ClockDriverType.ClockPulseOffset(
                    value='VirtualClockPulseOffset'
                ),
                clock_pulse_value=UnsignedBitExpression(
                    value='VirtualClockPulseValue'
                ),
                clock_pulse_duration=ClockDriverType.ClockPulseDuration(
                    value='VirtualClockPulseDuration'
                ),
                clock_name='virtual_clock'
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='EXTBAUD',
                value=Value(
                    value='false'
                ),
                parameter_id='EXTBAUD',
                prompt='Set baud rate externally:',
                choice_ref='EXTBAUDChoice',
                config_groups=[
                    'requiredConfig',
                ],
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='sigdefVal_scaler',
                value=Value(
                    value="'h0"
                ),
                parameter_id='sigdefVal_scaler',
                type_value=FormatType.LONGINT
            ),
            Parameter(
                name='sigdefVal_rxd',
                value=Value(
                    value='0'
                ),
                parameter_id='sigdefVal_rxd',
                type_value=FormatType.LONGINT
            ),
            Parameter(
                name='sigdefVal_ctsn',
                value=Value(
                    value='0'
                ),
                parameter_id='sigdefVal_ctsn',
                type_value=FormatType.LONGINT
            ),
            Parameter(
                name='ClockPulseValue',
                value=Value(
                    value='1'
                ),
                parameter_id='ClockPulseValue',
                prompt='Clock Pulse Value:',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPeriod',
                value=Value(
                    value='8'
                ),
                parameter_id='ClockPeriod',
                prompt='Clock Pulse Period:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPulseDuration',
                value=Value(
                    value='4'
                ),
                parameter_id='ClockPulseDuration',
                prompt='Clock Pulse Duration:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPulseOffset',
                value=Value(
                    value='4'
                ),
                parameter_id='ClockPulseOffset',
                prompt='Clock Pulse Offset:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='VirtualClockPeriod',
                value=Value(
                    value='8'
                ),
                parameter_id='VirtualClockPeriod',
                prompt='Virtual Clock Period:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='VirtualClockPulseDuration',
                value=Value(
                    value='4'
                ),
                parameter_id='VirtualClockPulseDuration',
                prompt='Virtual Clock Pulse Duration:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='VirtualClockPulseValue',
                value=Value(
                    value='1'
                ),
                parameter_id='VirtualClockPulseValue',
                prompt='Virtual Clock Pulse Value:',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='VirtualClockPulseOffset',
                value=Value(
                    value='4'
                ),
                parameter_id='VirtualClockPulseOffset',
                prompt='Virtual Clock Pulse Offset:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
        ]
    )
)
