from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.access import Access
from ipxact.models.access_policies import AccessPolicies
from ipxact.models.access_type import AccessType
from ipxact.models.address_bank_type import AddressBankType
from ipxact.models.address_block import AddressBlock
from ipxact.models.address_spaces import AddressSpaces
from ipxact.models.bank import Bank
from ipxact.models.bank_alignment_type import BankAlignmentType
from ipxact.models.banked_block_type import BankedBlockType
from ipxact.models.base_address import BaseAddress
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.choices import Choices
from ipxact.models.clearbox_element_ref_type import ClearboxElementRefType
from ipxact.models.clearbox_element_type import ClearboxElementType
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.component_type import ComponentType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.default_value import DefaultValue
from ipxact.models.description import Description
from ipxact.models.driver import Driver
from ipxact.models.drivers import Drivers
from ipxact.models.extended_vectors_type import ExtendedVectorsType
from ipxact.models.field_type import FieldType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.left import Left
from ipxact.models.local_memory_map_type import LocalMemoryMapType
from ipxact.models.memory_map_ref import MemoryMapRef
from ipxact.models.memory_map_type import MemoryMapType
from ipxact.models.memory_maps import MemoryMaps
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.module_parameter_type import ModuleParameterType
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.path_segment_type import PathSegmentType
from ipxact.models.port import Port
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.range import Range
from ipxact.models.right import Right
from ipxact.models.signed_longint_expression import SignedLongintExpression
from ipxact.models.simple_clearbox_type import SimpleClearboxType
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.slice_type import SliceType
from ipxact.models.slices_type import SlicesType
from ipxact.models.subspace_map import SubspaceMap
from ipxact.models.unsigned_int_expression import UnsignedIntExpression
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_int_expression import UnsignedPositiveIntExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.usage_type import UsageType
from ipxact.models.value import Value


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2RTL',
    name='processor',
    version='1.2',
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='AHBClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hclk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='AHBReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hresetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='AHBmaster',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='AHB',
                    version='r2p0_6'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='AHB_rtl',
                                version='r2p0_6'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hrdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HGRANTx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hgrant'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='haddr'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HTRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='htrans'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hwrite'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HSIZE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hsize'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HBURST'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hburst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HPROT'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hprot'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hwdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HBUSREQx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hbusreq'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HREADY'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hready'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HRESP'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hresp'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hclk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='HRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='hresetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(
                    address_space_ref=BusInterfaceType.Initiator.AddressSpaceRef(
                        address_space_ref='main'
                    )
                ),
                connection_required=True
            ),
            BusInterface(
                name='APBClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBslave',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(
                    memory_map_ref=MemoryMapRef(
                        memory_map_ref='ambaAPB'
                    )
                )
            ),
            BusInterface(
                name='SlaveIntController',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.leon2',
                    name='IntProc',
                    version='v1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.leon2',
                                name='IntProc_rtl',
                                version='v1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRL'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irl'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQVEC'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irqvec'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='INTack'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='intack'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='JTAG',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.jtag',
                    name='jtag',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.jtag',
                                name='jtag_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='TCK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='tck'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='NTRST'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='ntrst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='TMS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='tms'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='TDI'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='tdi'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='TDO'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='tdo'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
        ]
    ),
    address_spaces=AddressSpaces(
        address_space=[
            AddressSpaces.AddressSpace(
                name='main',
                range=UnsignedPositiveLongintExpression(
                    value='4 * (2 ** 30)'
                ),
                width=UnsignedPositiveIntExpression(
                    value='32'
                ),
                local_memory_map=LocalMemoryMapType(
                    name='defaultid4490216',
                    address_block=[
                        AddressBlock(
                            name='defaultid4490218',
                            base_address=BaseAddress(
                                value='start_addr_local'
                            ),
                            range=UnsignedPositiveLongintExpression(
                                value='range_local'
                            ),
                            width=UnsignedPositiveIntExpression(
                                value='width'
                            ),
                            usage=UsageType.MEMORY,
                            parameters=Parameters(
                                parameter=[
                                    Parameter(
                                        name='start_addr_local',
                                        value=Value(
                                            value="'h10000000"
                                        ),
                                        parameter_id='start_addr_local',
                                        prompt='Local Memory Map Starting Address:',
                                        choice_ref='BaseAddressChoices',
                                        config_groups=[
                                            'requiredConfig',
                                        ],
                                        type_value=FormatType.LONGINT,
                                        resolve=ParameterTypeResolve.USER
                                    ),
                                    Parameter(
                                        name='range_local',
                                        value=Value(
                                            value='4096'
                                        ),
                                        parameter_id='range_local',
                                        prompt='Local Memory Map Range (bytes):',
                                        choice_ref='RangeChoice',
                                        config_groups=[
                                            'requiredConfig',
                                        ],
                                        type_value=FormatType.LONGINT,
                                        resolve=ParameterTypeResolve.USER
                                    ),
                                    Parameter(
                                        name='width',
                                        value=Value(
                                            value='32'
                                        ),
                                        parameter_id='width',
                                        type_value=FormatType.LONGINT
                                    ),
                                ]
                            )
                        ),
                    ]
                )
            ),
        ]
    ),
    memory_maps=MemoryMaps(
        memory_map=[
            MemoryMapType(
                name='ambaAPB',
                bank=[
                    Bank(
                        name='defaultid4490282',
                        base_address=BaseAddress(
                            value='0'
                        ),
                        address_block=[
                            BankedBlockType(
                                name='registers',
                                range=UnsignedPositiveLongintExpression(
                                    value='4'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.REGISTER,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_ONLY
                                        ),
                                    ]
                                ),
                                register=[
                                    BankedBlockType.Register(
                                        name='Failures',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h0"
                                        ),
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='NumFailures',
                                                description=Description(
                                                    value='Number of failures from the AHB BFM'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='32'
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                ]
                            ),
                            BankedBlockType(
                                name='lowest1k',
                                range=UnsignedPositiveLongintExpression(
                                    value='1020'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.MEMORY,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                )
                            ),
                            BankedBlockType(
                                name='midlow1k',
                                range=UnsignedPositiveLongintExpression(
                                    value='1 * (2 ** 10)'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.MEMORY,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                )
                            ),
                            BankedBlockType(
                                name='midhigh1k',
                                range=UnsignedPositiveLongintExpression(
                                    value='1 * (2 ** 10)'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.MEMORY,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                )
                            ),
                        ],
                        bank=[
                            AddressBankType.Bank(
                                name='defaultid4490406',
                                address_block=[
                                    BankedBlockType(
                                        name='highest1kx7_0',
                                        range=UnsignedPositiveLongintExpression(
                                            value='1 * (2 ** 10)'
                                        ),
                                        width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        usage=UsageType.MEMORY,
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        )
                                    ),
                                    BankedBlockType(
                                        name='highest1kx15_8',
                                        range=UnsignedPositiveLongintExpression(
                                            value='1 * (2 ** 10)'
                                        ),
                                        width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        usage=UsageType.MEMORY,
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        )
                                    ),
                                    BankedBlockType(
                                        name='highest1kx23_16',
                                        range=UnsignedPositiveLongintExpression(
                                            value='1 * (2 ** 10)'
                                        ),
                                        width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        usage=UsageType.MEMORY,
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        )
                                    ),
                                    BankedBlockType(
                                        name='highest1kx31_24',
                                        range=UnsignedPositiveLongintExpression(
                                            value='1 * (2 ** 10)'
                                        ),
                                        width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        usage=UsageType.MEMORY,
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        )
                                    ),
                                ],
                                usage=UsageType.MEMORY,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                bank_alignment=BankAlignmentType.PARALLEL
                            ),
                        ],
                        usage=UsageType.MEMORY,
                        access_policies=AccessPolicies(
                            access_policy=[
                                AccessPolicies.AccessPolicy(
                                    access=AccessType.READ_WRITE
                                ),
                            ]
                        ),
                        bank_alignment=BankAlignmentType.SERIAL
                    ),
                ]
            ),
            MemoryMapType(
                name='processor_MemoryMap',
                subspace_map=[
                    SubspaceMap(
                        name='main_SubspaceMap',
                        base_address=SignedLongintExpression(
                            value='0'
                        ),
                        initiator_ref='AHBmaster'
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='vhdlsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='vhdlsource'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='vhdlsource',
                    language=LanguageType(
                        value='vhdl',
                        strict=True
                    ),
                    module_name='processor(bfm)',
                    module_parameters=ComponentInstantiationType.ModuleParameters(
                        module_parameter=[
                            ModuleParameterType(
                                name='local_memory_start_addr',
                                value=Value(
                                    value='local_memory_start_addr'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='local_memory_addr_bits',
                                value=Value(
                                    value='local_memory_addr_bits'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='code_file',
                                value=Value(
                                    value='code_file'
                                ),
                                data_type='string'
                            ),
                        ]
                    ),
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-vhdlSource'
                        ),
                    ],
                    clearbox_element_refs=ComponentInstantiationType.ClearboxElementRefs(
                        clearbox_element_ref=[
                            ClearboxElementRefType(
                                location=[
                                    SlicesType(
                                        slice=[
                                            SliceType(
                                                path_segments=SliceType.PathSegments(
                                                    path_segment=[
                                                        PathSegmentType(
                                                            value='SimDone'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                ],
                                name='simDonePin'
                            ),
                            ClearboxElementRefType(
                                location=[
                                    SlicesType(
                                        slice=[
                                            SliceType(
                                                path_segments=SliceType.PathSegments(
                                                    path_segment=[
                                                        PathSegmentType(
                                                            value='ahbMaster'
                                                        ),
                                                        PathSegmentType(
                                                            value='failures'
                                                        ),
                                                    ]
                                                ),
                                                range=Range(
                                                    left=Left(
                                                        value='31'
                                                    ),
                                                    right=Right(
                                                        value='0'
                                                    )
                                                )
                                            ),
                                        ]
                                    ),
                                ],
                                name='failSignal'
                            ),
                        ]
                    )
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='rst_an',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='clk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='clkn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='pclk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='presetn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='psel',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='penable',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='paddr',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='11'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='pwdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='hclk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='hresetn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='hgrant',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='hready',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='hresp',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='1'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='hrdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='hbusreq',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='htrans',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='1'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='haddr',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='hwrite',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='hsize',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='2'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='hburst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='2'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='hprot',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='3'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='hwdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irl',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='3'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value="'h0"
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='intack',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='irqvec',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='3'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='tck',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value="'h0"
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='ntrst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value="'h0"
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='tms',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value="'h0"
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='tdi',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value="'h0"
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='tdo',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='SimDone',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
            ]
        )
    ),
    choices=Choices(
        choice=[
            Choices.Choice(
                name='BaseAddressChoices',
                enumeration=[
                    Choices.Choice.Enumeration(
                        value='0x00000000',
                        text='0x00000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x10000000',
                        text='0x10000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x20000000',
                        text='0x20000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x30000000',
                        text='0x30000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x40000000',
                        text='0x40000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x50000000',
                        text='0x50000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x60000000',
                        text='0x60000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x70000000',
                        text='0x70000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x80000000',
                        text='0x80000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x90000000',
                        text='0x90000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xa0000000',
                        text='0xa0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xb0000000',
                        text='0xb0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xc0000000',
                        text='0xc0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xd0000000',
                        text='0xd0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xe0000000',
                        text='0xe0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xf0000000',
                        text='0xf0000000'
                    ),
                ]
            ),
            Choices.Choice(
                name='RangeChoice',
                enumeration=[
                    Choices.Choice.Enumeration(
                        value='0',
                        text='0'
                    ),
                    Choices.Choice.Enumeration(
                        value='128',
                        text='128'
                    ),
                    Choices.Choice.Enumeration(
                        value='256',
                        text='256'
                    ),
                    Choices.Choice.Enumeration(
                        value='1024',
                        text='1k'
                    ),
                    Choices.Choice.Enumeration(
                        value='2048',
                        text='2k'
                    ),
                    Choices.Choice.Enumeration(
                        value='4096',
                        text='4k'
                    ),
                    Choices.Choice.Enumeration(
                        value='8192',
                        text='8k'
                    ),
                    Choices.Choice.Enumeration(
                        value='16384',
                        text='16k'
                    ),
                ]
            ),
        ]
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='fs-vhdlSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='hdlsrc/processorPackage.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='processor_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/processorApbSlave.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='processor_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/processorAhbMaster.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='processor_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/processor.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='processor_lib'
                        )
                    ),
                ]
            ),
        ]
    ),
    clearbox_elements=ComponentType.ClearboxElements(
        clearbox_element=[
            ClearboxElementType(
                name='simDonePin',
                description=Description(
                    value='Pin that indicates that the AHB BFM model is done processing commands'
                ),
                clearbox_type=SimpleClearboxType.PIN
            ),
            ClearboxElementType(
                name='failSignal',
                description=Description(
                    value='A signal internat to the model that indicates the number of failures in the AHB BFM model'
                ),
                clearbox_type=SimpleClearboxType.SIGNAL
            ),
        ]
    ),
    cpus=ComponentType.Cpus(
        cpu=[
            ComponentType.Cpus.Cpu(
                name='processor',
                range=UnsignedPositiveLongintExpression(
                    value='4 * (2 ** 30)'
                ),
                width=UnsignedPositiveIntExpression(
                    value='32'
                ),
                memory_map_ref='processor_MemoryMap'
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='local_memory_start_addr',
                value=Value(
                    value='(start_addr_local ) / 65536'
                ),
                parameter_id='local_memory_start_addr',
                prompt='Upper 16 bits of the address'
            ),
            Parameter(
                name='local_memory_addr_bits',
                value=Value(
                    value='$floor($ln(range_local + 1)/$ln(2) )'
                ),
                parameter_id='local_memory_addr_bits',
                prompt='Number of address bit for the local memoryMap'
            ),
            Parameter(
                name='code_file',
                value=Value(
                    value='master.tbl'
                ),
                parameter_id='code_file',
                prompt='File to read commands from:',
                config_groups=[
                    'requiredConfig',
                ],
                resolve=ParameterTypeResolve.USER
            ),
        ]
    )
)
