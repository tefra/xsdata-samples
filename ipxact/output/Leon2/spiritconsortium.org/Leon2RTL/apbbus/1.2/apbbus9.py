from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.channels import Channels
from ipxact.models.choices import Choices
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.description import Description
from ipxact.models.extended_vectors_type import ExtendedVectorsType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.left import Left
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.module_parameter_type import ModuleParameterType
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.port import Port
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.right import Right
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.value import Value


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2RTL',
    name='apbbus9',
    version='1.2',
    description=Description(
        value='1 master, 9 slave APB channel'
    ),
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='MirroredMaster',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_mst'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_initiator='',
                connection_required=True
            ),
            BusInterface(
                name='MirroredSlave0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv0'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv0'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv0'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv0',
                            value=Value(
                                value='0'
                            ),
                            parameter_id='remapAddressSlv0',
                            prompt='Slave 0 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv0',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv0',
                            prompt='Slave 0 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='MirroredSlave1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv1'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv1'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv1'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv1'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv1'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv1'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv1'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv1'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv1',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='remapAddressSlv1',
                            prompt='Slave 1 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv1',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv1',
                            prompt='Slave 1 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='MirroredSlave2',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv2'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv2'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv2'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv2'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv2'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv2'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv2'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv2'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv2',
                            value=Value(
                                value='8192'
                            ),
                            parameter_id='remapAddressSlv2',
                            prompt='Slave 2 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv2',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv2',
                            prompt='Slave 2 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='MirroredSlave3',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv3'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv3'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv3'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv3'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv3'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv3'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv3'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv3'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv3',
                            value=Value(
                                value='12288'
                            ),
                            parameter_id='remapAddressSlv3',
                            prompt='Slave 3 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv3',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv3',
                            prompt='Slave 3 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='MirroredSlave4',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv4'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv4'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv4'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv4'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv4'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv4'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv4'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv4'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv4',
                            value=Value(
                                value='16384'
                            ),
                            parameter_id='remapAddressSlv4',
                            prompt='Slave 4 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv4',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv4',
                            prompt='Slave 4 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='MirroredSlave5',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv5'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv5'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv5'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv5'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv5'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv5'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv5'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv5'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv5',
                            value=Value(
                                value='20480'
                            ),
                            parameter_id='remapAddressSlv5',
                            prompt='Slave 5 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv5',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv5',
                            prompt='Slave 5 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='MirroredSlave6',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv6'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv6'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv6'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv6'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv6'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv6'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv6'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv6'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv6',
                            value=Value(
                                value='24576'
                            ),
                            parameter_id='remapAddressSlv6',
                            prompt='Slave 6 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv6',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv6',
                            prompt='Slave 6 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='MirroredSlave7',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv7'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv7'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv7'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv7'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv7'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv7'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv7'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv7'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv7',
                            value=Value(
                                value='28672'
                            ),
                            parameter_id='remapAddressSlv7',
                            prompt='Slave 7 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv7',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv7',
                            prompt='Slave 7 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='MirroredSlave8',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv8'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv8'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv8'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv8'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv8'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv8'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv8'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv8'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv8',
                            value=Value(
                                value='32768'
                            ),
                            parameter_id='remapAddressSlv8',
                            prompt='Slave 8 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv8',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv8',
                            prompt='Slave 8 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
        ]
    ),
    channels=Channels(
        channel=[
            Channels.Channel(
                name='APBChannel',
                bus_interface_ref=[
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredMaster'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave0'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave1'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave2'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave3'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave4'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave5'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave6'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave7'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave8'
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='vhdlsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='vhdlsource'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='vhdlsource',
                    language=LanguageType(
                        value='vhdl'
                    ),
                    module_name='leon2Apbbus9(struct)',
                    module_parameters=ComponentInstantiationType.ModuleParameters(
                        module_parameter=[
                            ModuleParameterType(
                                name='start_addr_slv0',
                                value=Value(
                                    value='start_addr_slv0'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv0',
                                value=Value(
                                    value='size_addr_slv0'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='start_addr_slv1',
                                value=Value(
                                    value='start_addr_slv1'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv1',
                                value=Value(
                                    value='size_addr_slv1'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='start_addr_slv2',
                                value=Value(
                                    value='start_addr_slv2'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv2',
                                value=Value(
                                    value='size_addr_slv2'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='start_addr_slv3',
                                value=Value(
                                    value='start_addr_slv3'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv3',
                                value=Value(
                                    value='size_addr_slv3'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='start_addr_slv4',
                                value=Value(
                                    value='start_addr_slv4'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv4',
                                value=Value(
                                    value='size_addr_slv4'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='start_addr_slv5',
                                value=Value(
                                    value='start_addr_slv5'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv5',
                                value=Value(
                                    value='size_addr_slv5'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='start_addr_slv6',
                                value=Value(
                                    value='start_addr_slv6'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv6',
                                value=Value(
                                    value='size_addr_slv6'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='start_addr_slv7',
                                value=Value(
                                    value='start_addr_slv7'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv7',
                                value=Value(
                                    value='size_addr_slv7'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='start_addr_slv8',
                                value=Value(
                                    value='start_addr_slv8'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv8',
                                value=Value(
                                    value='size_addr_slv8'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='number_ports',
                                value=Value(
                                    value='number_ports'
                                ),
                                data_type='integer'
                            ),
                        ]
                    ),
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-vhdlSource'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='psel_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='penable_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='paddr_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='pwdata_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv1',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv1',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv1',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv1',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv1',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv1',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv2',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv2',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv2',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv2',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv2',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv2',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv3',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv3',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv3',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv3',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv3',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv3',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv4',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv4',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv4',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv4',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv4',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv4',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv5',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv5',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv5',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv5',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv5',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv5',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv6',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv6',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv6',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv6',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv6',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv6',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv7',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv7',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv7',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv7',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv7',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv7',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv8',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv8',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv8',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv8',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv8',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv8',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    choices=Choices(
        choice=[
            Choices.Choice(
                name='BooleanChoices',
                enumeration=[
                    Choices.Choice.Enumeration(
                        value='false',
                        text='false'
                    ),
                    Choices.Choice.Enumeration(
                        value='true',
                        text='true'
                    ),
                ]
            ),
        ]
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='fs-vhdlSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='../../common/target.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/device.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/config.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/sparcv8.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/iface.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/amba.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/ambacomp.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/macro.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_generic.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_atc25.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_atc35.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_fs90.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_umc18.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_virtex.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_tsmc25.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_proasic.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_axcel.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/multlib.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_map.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/apbbus.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/leon2Apbbus9.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                ]
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='start_addr_slv0',
                value=Value(
                    value='remapAddressSlv0'
                ),
                parameter_id='start_addr_slv0'
            ),
            Parameter(
                name='range_slv0',
                value=Value(
                    value='rangeSlv0'
                ),
                parameter_id='size_addr_slv0'
            ),
            Parameter(
                name='start_addr_slv1',
                value=Value(
                    value='remapAddressSlv1'
                ),
                parameter_id='start_addr_slv1'
            ),
            Parameter(
                name='range_slv1',
                value=Value(
                    value='rangeSlv1'
                ),
                parameter_id='size_addr_slv1'
            ),
            Parameter(
                name='start_addr_slv2',
                value=Value(
                    value='remapAddressSlv2'
                ),
                parameter_id='start_addr_slv2'
            ),
            Parameter(
                name='range_slv2',
                value=Value(
                    value='rangeSlv2'
                ),
                parameter_id='size_addr_slv2'
            ),
            Parameter(
                name='start_addr_slv3',
                value=Value(
                    value='remapAddressSlv3'
                ),
                parameter_id='start_addr_slv3'
            ),
            Parameter(
                name='range_slv3',
                value=Value(
                    value='rangeSlv3'
                ),
                parameter_id='size_addr_slv3'
            ),
            Parameter(
                name='start_addr_slv4',
                value=Value(
                    value='remapAddressSlv4'
                ),
                parameter_id='start_addr_slv4'
            ),
            Parameter(
                name='range_slv4',
                value=Value(
                    value='rangeSlv4'
                ),
                parameter_id='size_addr_slv4'
            ),
            Parameter(
                name='start_addr_slv5',
                value=Value(
                    value='remapAddressSlv5'
                ),
                parameter_id='start_addr_slv5'
            ),
            Parameter(
                name='range_slv5',
                value=Value(
                    value='rangeSlv5'
                ),
                parameter_id='size_addr_slv5'
            ),
            Parameter(
                name='start_addr_slv6',
                value=Value(
                    value='remapAddressSlv6'
                ),
                parameter_id='start_addr_slv6'
            ),
            Parameter(
                name='range_slv6',
                value=Value(
                    value='rangeSlv6'
                ),
                parameter_id='size_addr_slv6'
            ),
            Parameter(
                name='start_addr_slv7',
                value=Value(
                    value='remapAddressSlv7'
                ),
                parameter_id='start_addr_slv7'
            ),
            Parameter(
                name='range_slv7',
                value=Value(
                    value='rangeSlv7'
                ),
                parameter_id='size_addr_slv7'
            ),
            Parameter(
                name='start_addr_slv8',
                value=Value(
                    value='remapAddressSlv8'
                ),
                parameter_id='start_addr_slv8'
            ),
            Parameter(
                name='range_slv8',
                value=Value(
                    value='rangeSlv8'
                ),
                parameter_id='size_addr_slv8'
            ),
            Parameter(
                name='number_ports',
                value=Value(
                    value='9'
                ),
                parameter_id='number_ports'
            ),
        ]
    )
)
