from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.api_type import ApiType
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.channels import Channels
from ipxact.models.choices import Choices
from ipxact.models.component import Component
from ipxact.models.component_generator import ComponentGenerator
from ipxact.models.component_generators import ComponentGenerators
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.description import Description
from ipxact.models.extended_vectors_type import ExtendedVectorsType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.generator_type import GeneratorType
from ipxact.models.group import Group
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.left import Left
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.module_parameter_type import ModuleParameterType
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.port import Port
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.right import Right
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.value import Value


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2RTL',
    name='apbbus1',
    version='1.3',
    description=Description(
        value='1 master, 1 slave APB channel, with phantom clock and reset ports'
    ),
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='APBClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='AMBAPCLK',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_system=BusInterfaceType.MirroredSystem(
                    group=Group(
                        value='apb_clk'
                    )
                )
            ),
            BusInterface(
                name='APBReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='AMBAPRESET',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_system=BusInterfaceType.MirroredSystem(
                    group=Group(
                        value='apb_reset'
                    )
                )
            ),
            BusInterface(
                name='MirroredMaster',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_mst'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_initiator='',
                connection_required=True
            ),
            BusInterface(
                name='MirroredSlave0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata_slv0'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv0'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv0'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv0',
                            value=Value(
                                value="'h0000"
                            ),
                            parameter_id='remapAddressSlv0',
                            prompt='Slave 0 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv0',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv0',
                            prompt='Slave 0 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
        ]
    ),
    channels=Channels(
        channel=[
            Channels.Channel(
                name='APBChannel',
                bus_interface_ref=[
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredMaster'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='MirroredSlave0'
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='vhdlsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='vhdlsource'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='vhdlsource',
                    language=LanguageType(
                        value='vhdl'
                    ),
                    module_name='leon2Apbbus1(struct)',
                    module_parameters=ComponentInstantiationType.ModuleParameters(
                        module_parameter=[
                            ModuleParameterType(
                                name='start_addr_slv0',
                                value=Value(
                                    value='start_addr_slv0'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='range_slv0',
                                value=Value(
                                    value='size_addr_slv0'
                                ),
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='number_ports',
                                value=Value(
                                    value='number_ports'
                                ),
                                data_type='integer'
                            ),
                        ]
                    ),
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-vhdlSource'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='pclk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.PHANTOM
                    )
                ),
                Port(
                    name='presetn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.PHANTOM
                    )
                ),
                Port(
                    name='psel_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='penable_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='paddr_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='pwdata_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_mst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='penable_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='paddr_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT
                    )
                ),
                Port(
                    name='pwdata_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata_slv0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    component_generators=ComponentGenerators(
        component_generator=[
            ComponentGenerator(
                name='configNumPorts',
                description=Description(
                    value='Generator that replaces the current component with another from teh same family with a different number of ports'
                ),
                api_type=GeneratorType.ApiType(
                    value=ApiType.TGI_2009
                ),
                generator_exe=IpxactUri(
                    value='componentGenerator/configNumPorts.tcl'
                )
            ),
        ]
    ),
    choices=Choices(
        choice=[
            Choices.Choice(
                name='BooleanChoices',
                enumeration=[
                    Choices.Choice.Enumeration(
                        value='false',
                        text='false'
                    ),
                    Choices.Choice.Enumeration(
                        value='true',
                        text='true'
                    ),
                ]
            ),
        ]
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='fs-vhdlSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='../../common/target.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/device.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/config.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/sparcv8.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/iface.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/amba.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/ambacomp.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/macro.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_generic.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_atc25.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_atc35.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_fs90.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_umc18.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_virtex.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_tsmc25.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_proasic.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_axcel.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/multlib.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_map.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../1.2/hdlsrc/apbbus.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../1.2/hdlsrc/leon2Apbbus1.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2apbbus_lib'
                        )
                    ),
                ]
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='start_addr_slv0',
                value=Value(
                    value='remapAddressSlv0'
                ),
                parameter_id='start_addr_slv0'
            ),
            Parameter(
                name='range_slv0',
                value=Value(
                    value='rangeSlv0'
                ),
                parameter_id='size_addr_slv0'
            ),
            Parameter(
                name='number_ports',
                value=Value(
                    value='1'
                ),
                parameter_id='number_ports'
            ),
        ]
    )
)
