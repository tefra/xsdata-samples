from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.access import Access
from ipxact.models.access_policies import AccessPolicies
from ipxact.models.access_type import AccessType
from ipxact.models.array import Array
from ipxact.models.bank import Bank
from ipxact.models.bank_alignment_type import BankAlignmentType
from ipxact.models.banked_block_type import BankedBlockType
from ipxact.models.base_address import BaseAddress
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.clock_driver import ClockDriver
from ipxact.models.clock_driver_type import ClockDriverType
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.description import Description
from ipxact.models.dim import Dim
from ipxact.models.driver import Driver
from ipxact.models.drivers import Drivers
from ipxact.models.extended_vectors_type import ExtendedVectorsType
from ipxact.models.field_type import FieldType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.left import Left
from ipxact.models.memory_map_ref import MemoryMapRef
from ipxact.models.memory_map_type import MemoryMapType
from ipxact.models.memory_maps import MemoryMaps
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.module_parameter_type import ModuleParameterType
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.part_select import PartSelect
from ipxact.models.port import Port
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.range import Range
from ipxact.models.reset import Reset
from ipxact.models.right import Right
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.single_shot_driver import SingleShotDriver
from ipxact.models.unsigned_bit_expression import UnsignedBitExpression
from ipxact.models.unsigned_bit_vector_expression import UnsignedBitVectorExpression
from ipxact.models.unsigned_int_expression import UnsignedIntExpression
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_int_expression import UnsignedPositiveIntExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.usage_type import UsageType
from ipxact.models.value import Value
from ipxact.models.volatile import Volatile


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2RTL',
    name='rgu',
    version='1.3',
    description=Description(
        value='Reset generation unit with enhanced register description'
    ),
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='IPClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='ipclk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='MainReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstin_an'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='ambaAPB',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(
                    memory_map_ref=MemoryMapRef(
                        memory_map_ref='ambaAPB'
                    )
                ),
                connection_required=True
            ),
            BusInterface(
                name='reset0_0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='0'
                                                        ),
                                                        right=Right(
                                                            value='0'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset0_1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='0'
                                                        ),
                                                        right=Right(
                                                            value='0'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset0_2',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='0'
                                                        ),
                                                        right=Right(
                                                            value='0'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset0_3',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='0'
                                                        ),
                                                        right=Right(
                                                            value='0'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset1_0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='1'
                                                        ),
                                                        right=Right(
                                                            value='1'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset1_1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='1'
                                                        ),
                                                        right=Right(
                                                            value='1'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset2_0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='2'
                                                        ),
                                                        right=Right(
                                                            value='2'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset2_1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='2'
                                                        ),
                                                        right=Right(
                                                            value='2'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset3_0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='3'
                                                        ),
                                                        right=Right(
                                                            value='3'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset3_1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='3'
                                                        ),
                                                        right=Right(
                                                            value='3'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset4_0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='4'
                                                        ),
                                                        right=Right(
                                                            value='4'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset4_1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='4'
                                                        ),
                                                        right=Right(
                                                            value='4'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset5_0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='5'
                                                        ),
                                                        right=Right(
                                                            value='5'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset5_1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='5'
                                                        ),
                                                        right=Right(
                                                            value='5'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset6_0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='6'
                                                        ),
                                                        right=Right(
                                                            value='6'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset6_1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='6'
                                                        ),
                                                        right=Right(
                                                            value='6'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset7_0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='7'
                                                        ),
                                                        right=Right(
                                                            value='7'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='reset7_1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rstout_an',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='7'
                                                        ),
                                                        right=Right(
                                                            value='7'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
        ]
    ),
    memory_maps=MemoryMaps(
        memory_map=[
            MemoryMapType(
                name='ambaAPB',
                bank=[
                    Bank(
                        name='defaultid4490635',
                        base_address=BaseAddress(
                            value='0'
                        ),
                        address_block=[
                            BankedBlockType(
                                name='resetDelays',
                                range=UnsignedPositiveLongintExpression(
                                    value='32'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.REGISTER,
                                volatile=Volatile(
                                    value=False
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_ONLY
                                        ),
                                    ]
                                ),
                                register=[
                                    BankedBlockType.Register(
                                        name='reset0Delay',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h0"
                                        ),
                                        type_identifier='rstDly',
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='Reserved',
                                                description=Description(
                                                    value='Reserved'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='8'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='24'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h0) >> 8) & {24{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                            FieldType(
                                                name='delay',
                                                description=Description(
                                                    value='Delay value for reset, 0=no delay, 1=delay by 1 ipclk, 2=delay by 2 ipclk, ...'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='8'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h0) >> 0) & {8{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                    BankedBlockType.Register(
                                        name='reset1Delay',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h4"
                                        ),
                                        type_identifier='rstDly',
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='Reserved',
                                                description=Description(
                                                    value='Reserved'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='8'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='24'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h1) >> 8) & {24{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                            FieldType(
                                                name='delay',
                                                description=Description(
                                                    value='Delay value for reset, 0=no delay, 1=delay by 1 ipclk, 2=delay by 2 ipclk, ...'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='8'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h1) >> 0) & {8{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                    BankedBlockType.Register(
                                        name='reset2Delay',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h8"
                                        ),
                                        type_identifier='rstDly',
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='Reserved',
                                                description=Description(
                                                    value='Reserved'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='8'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='24'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h2) >> 8) & {24{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                            FieldType(
                                                name='delay',
                                                description=Description(
                                                    value='Delay value for reset, 0=no delay, 1=delay by 1 ipclk, 2=delay by 2 ipclk, ...'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='8'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h2) >> 0) & {8{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                    BankedBlockType.Register(
                                        name='reset3Delay',
                                        address_offset=UnsignedLongintExpression(
                                            value="'hC"
                                        ),
                                        type_identifier='rstDly',
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='Reserved',
                                                description=Description(
                                                    value='Reserved'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='8'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='24'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h4) >> 8) & {24{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                            FieldType(
                                                name='delay',
                                                description=Description(
                                                    value='Delay value for reset, 0=no delay, 1=delay by 1 ipclk, 2=delay by 2 ipclk, ...'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='8'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h4) >> 0) & {8{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                    BankedBlockType.Register(
                                        name='reset4Delay',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h10"
                                        ),
                                        type_identifier='rstDly',
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='Reserved',
                                                description=Description(
                                                    value='Reserved'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='8'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='24'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h8) >> 8) & {24{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                            FieldType(
                                                name='delay',
                                                description=Description(
                                                    value='Delay value for reset, 0=no delay, 1=delay by 1 ipclk, 2=delay by 2 ipclk, ...'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='8'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h8) >> 0) & {8{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                    BankedBlockType.Register(
                                        name='reset5Delay',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h14"
                                        ),
                                        type_identifier='rstDly',
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='Reserved',
                                                description=Description(
                                                    value='Reserved'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='8'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='24'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h10) >> 8) & {24{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                            FieldType(
                                                name='delay',
                                                description=Description(
                                                    value='Delay value for reset, 0=no delay, 1=delay by 1 ipclk, 2=delay by 2 ipclk, ...'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='8'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h10) >> 0) & {8{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                    BankedBlockType.Register(
                                        name='reset6Delay',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h18"
                                        ),
                                        type_identifier='rstDly',
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='Reserved',
                                                description=Description(
                                                    value='Reserved'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='8'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='24'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h20) >> 8) & {24{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                            FieldType(
                                                name='delay',
                                                description=Description(
                                                    value='Delay value for reset, 0=no delay, 1=delay by 1 ipclk, 2=delay by 2 ipclk, ...'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='8'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h20) >> 0) & {8{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                    BankedBlockType.Register(
                                        name='reset7Delay',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h1C"
                                        ),
                                        type_identifier='rstDly',
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='Reserved',
                                                description=Description(
                                                    value='Reserved'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='8'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='24'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h40) >> 8) & {24{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                            FieldType(
                                                name='delay',
                                                description=Description(
                                                    value='Delay value for reset, 0=no delay, 1=delay by 1 ipclk, 2=delay by 2 ipclk, ...'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='8'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h40) >> 0) & {8{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                ]
                            ),
                            BankedBlockType(
                                name='EEPROM',
                                range=UnsignedPositiveLongintExpression(
                                    value='32'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.REGISTER,
                                volatile=Volatile(
                                    value=False
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                register=[
                                    BankedBlockType.Register(
                                        name='eeprom',
                                        array=Array(
                                            dim=[
                                                Dim(
                                                    value='8'
                                                ),
                                            ]
                                        ),
                                        address_offset=UnsignedLongintExpression(
                                            value="'h0"
                                        ),
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        volatile=Volatile(
                                            value=False
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='data',
                                                description=Description(
                                                    value='Scratch memory, EEPROM'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='32'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h0) >> 0) & {32{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_WRITE
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                ]
                            ),
                            BankedBlockType(
                                name='Reserved',
                                range=UnsignedPositiveLongintExpression(
                                    value='4028'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.RESERVED,
                                volatile=Volatile(
                                    value=False
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_ONLY
                                        ),
                                    ]
                                )
                            ),
                            BankedBlockType(
                                name='idAddressBlock',
                                range=UnsignedPositiveLongintExpression(
                                    value='4'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.REGISTER,
                                volatile=Volatile(
                                    value=False
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_ONLY
                                        ),
                                    ]
                                ),
                                register=[
                                    BankedBlockType.Register(
                                        name='IDReg',
                                        description=Description(
                                            value='ID register'
                                        ),
                                        address_offset=UnsignedLongintExpression(
                                            value="'h0"
                                        ),
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='ID',
                                                description=Description(
                                                    value='ID Field'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='32'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h00000D01) >> 0) & {32{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                ]
                            ),
                        ],
                        bank_alignment=BankAlignmentType.SERIAL
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='vhdlsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='vhdlsource'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='vhdlsource',
                    language=LanguageType(
                        value='vhdl'
                    ),
                    module_name='rgu(rtl)',
                    module_parameters=ComponentInstantiationType.ModuleParameters(
                        module_parameter=[
                            ModuleParameterType(
                                name='delay0',
                                value=Value(
                                    value='delay0'
                                ),
                                minimum='0',
                                maximum='255',
                                type_value=FormatType.LONGINT,
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='delay1',
                                value=Value(
                                    value='delay1'
                                ),
                                minimum='0',
                                maximum='255',
                                type_value=FormatType.LONGINT,
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='delay2',
                                value=Value(
                                    value='delay2'
                                ),
                                minimum='0',
                                maximum='255',
                                type_value=FormatType.LONGINT,
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='delay3',
                                value=Value(
                                    value='delay3'
                                ),
                                minimum='0',
                                maximum='255',
                                type_value=FormatType.LONGINT,
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='delay4',
                                value=Value(
                                    value='delay4'
                                ),
                                minimum='0',
                                maximum='255',
                                type_value=FormatType.LONGINT,
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='delay5',
                                value=Value(
                                    value='delay5'
                                ),
                                minimum='0',
                                maximum='255',
                                type_value=FormatType.LONGINT,
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='delay6',
                                value=Value(
                                    value='delay6'
                                ),
                                minimum='0',
                                maximum='255',
                                type_value=FormatType.LONGINT,
                                data_type='integer'
                            ),
                            ModuleParameterType(
                                name='delay7',
                                value=Value(
                                    value='delay7'
                                ),
                                minimum='0',
                                maximum='255',
                                type_value=FormatType.LONGINT,
                                data_type='integer'
                            ),
                        ]
                    ),
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-vhdlSource'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='pclk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='presetn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='psel',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='penable',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='paddr',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='11'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='pwdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='ipclk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    clock_driver=ClockDriver(
                                        clock_period=ClockDriverType.ClockPeriod(
                                            value='ClockPeriod'
                                        ),
                                        clock_pulse_offset=ClockDriverType.ClockPulseOffset(
                                            value='ClockPulseOffset'
                                        ),
                                        clock_pulse_value=UnsignedBitExpression(
                                            value='ClockPulseValue'
                                        ),
                                        clock_pulse_duration=ClockDriverType.ClockPulseDuration(
                                            value='ClockPulseDuration'
                                        ),
                                        clock_name='ipclk'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='rstin_an',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    single_shot_driver=SingleShotDriver(
                                        single_shot_offset=SingleShotDriver.SingleShotOffset(
                                            value='500'
                                        ),
                                        single_shot_value=UnsignedBitVectorExpression(
                                            value='1'
                                        ),
                                        single_shot_duration=SingleShotDriver.SingleShotDuration(
                                            value='1000'
                                        )
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='rstout_an',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='7'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='fs-vhdlSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='hdlsrc/rgu.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='rgu_lib'
                        )
                    ),
                ]
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='delay0',
                value=Value(
                    value='0'
                ),
                parameter_id='delay0',
                prompt='Delay for reset output 0 (reset value in XML will be incorrrect if any of these are changed)',
                config_groups=[
                    'requiredConfig',
                ],
                minimum='0',
                maximum='255',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='delay1',
                value=Value(
                    value='1'
                ),
                parameter_id='delay1',
                prompt='Delay for reset output 1',
                config_groups=[
                    'requiredConfig',
                ],
                minimum='0',
                maximum='255',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='delay2',
                value=Value(
                    value='2'
                ),
                parameter_id='delay2',
                prompt='Delay for reset output 2',
                config_groups=[
                    'requiredConfig',
                ],
                minimum='0',
                maximum='255',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='delay3',
                value=Value(
                    value='4'
                ),
                parameter_id='delay3',
                prompt='Delay for reset output 3',
                config_groups=[
                    'requiredConfig',
                ],
                minimum='0',
                maximum='255',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='delay4',
                value=Value(
                    value='8'
                ),
                parameter_id='delay4',
                prompt='Delay for reset output 4',
                config_groups=[
                    'requiredConfig',
                ],
                minimum='0',
                maximum='255',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='delay5',
                value=Value(
                    value="'h10"
                ),
                parameter_id='delay5',
                prompt='Delay for reset output 5',
                config_groups=[
                    'requiredConfig',
                ],
                minimum='0',
                maximum='255',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='delay6',
                value=Value(
                    value="'h20"
                ),
                parameter_id='delay6',
                prompt='Delay for reset output 6',
                config_groups=[
                    'requiredConfig',
                ],
                minimum='0',
                maximum='255',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='delay7',
                value=Value(
                    value="'h40"
                ),
                parameter_id='delay7',
                prompt='Delay for reset output 7',
                config_groups=[
                    'requiredConfig',
                ],
                minimum='0',
                maximum='255',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPulseValue',
                value=Value(
                    value='1'
                ),
                parameter_id='ClockPulseValue',
                prompt='Clock Pulse Value:',
                type_value=FormatType.LONGINT,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPeriod',
                value=Value(
                    value='100'
                ),
                parameter_id='ClockPeriod',
                prompt='Clock Pulse Period:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPulseDuration',
                value=Value(
                    value='50'
                ),
                parameter_id='ClockPulseDuration',
                prompt='Clock Pulse Duration:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
            Parameter(
                name='ClockPulseOffset',
                value=Value(
                    value='50'
                ),
                parameter_id='ClockPulseOffset',
                prompt='Clock Pulse Offset:',
                type_value=FormatType.REAL,
                resolve=ParameterTypeResolve.USER
            ),
        ]
    )
)
