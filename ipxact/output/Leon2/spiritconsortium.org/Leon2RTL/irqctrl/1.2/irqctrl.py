from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.access import Access
from ipxact.models.access_policies import AccessPolicies
from ipxact.models.access_type import AccessType
from ipxact.models.address_block import AddressBlock
from ipxact.models.address_block_type import AddressBlockType
from ipxact.models.base_address import BaseAddress
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.default_value import DefaultValue
from ipxact.models.description import Description
from ipxact.models.display_name import DisplayName
from ipxact.models.driver import Driver
from ipxact.models.drivers import Drivers
from ipxact.models.extended_vectors_type import ExtendedVectorsType
from ipxact.models.field_type import FieldType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.left import Left
from ipxact.models.memory_map_ref import MemoryMapRef
from ipxact.models.memory_map_type import MemoryMapType
from ipxact.models.memory_maps import MemoryMaps
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.parameter import Parameter
from ipxact.models.parameters import Parameters
from ipxact.models.part_select import PartSelect
from ipxact.models.port import Port
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.range import Range
from ipxact.models.reset import Reset
from ipxact.models.right import Right
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.unsigned_bit_vector_expression import UnsignedBitVectorExpression
from ipxact.models.unsigned_int_expression import UnsignedIntExpression
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_int_expression import UnsignedPositiveIntExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.value import Value
from ipxact.models.volatile import Volatile


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2RTL',
    name='irqctrl',
    version='1.2',
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='APBClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='clk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rst'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='ambaAPB',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='clk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='rst'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(
                    memory_map_ref=MemoryMapRef(
                        memory_map_ref='ambaAPB'
                    )
                ),
                connection_required=True
            ),
            BusInterface(
                name='MasterInt',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.leon2',
                    name='IntProc',
                    version='v1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.leon2',
                                name='IntProc_rtl',
                                version='v1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRL'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irlout'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQVEC'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irlin'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='INTack'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='intack'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='SlaveInt14',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='14'
                                                        ),
                                                        right=Right(
                                                            value='14'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt13',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='13'
                                                        ),
                                                        right=Right(
                                                            value='13'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt12',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='12'
                                                        ),
                                                        right=Right(
                                                            value='12'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt11',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='11'
                                                        ),
                                                        right=Right(
                                                            value='11'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt10',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='10'
                                                        ),
                                                        right=Right(
                                                            value='10'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt9',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='9'
                                                        ),
                                                        right=Right(
                                                            value='9'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt8',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='8'
                                                        ),
                                                        right=Right(
                                                            value='8'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt7',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='7'
                                                        ),
                                                        right=Right(
                                                            value='7'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt6',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='6'
                                                        ),
                                                        right=Right(
                                                            value='6'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt5',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='5'
                                                        ),
                                                        right=Right(
                                                            value='5'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt4',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='4'
                                                        ),
                                                        right=Right(
                                                            value='4'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt3',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='3'
                                                        ),
                                                        right=Right(
                                                            value='3'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt2',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='2'
                                                        ),
                                                        right=Right(
                                                            value='2'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='1'
                                                        ),
                                                        right=Right(
                                                            value='1'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='SlaveInt0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irq',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='0'
                                                        ),
                                                        right=Right(
                                                            value='0'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
        ]
    ),
    memory_maps=MemoryMaps(
        memory_map=[
            MemoryMapType(
                name='ambaAPB',
                address_block=[
                    AddressBlock(
                        name='defaultid4490496',
                        base_address=BaseAddress(
                            value='0'
                        ),
                        range=UnsignedPositiveLongintExpression(
                            value='64'
                        ),
                        width=UnsignedPositiveIntExpression(
                            value='width'
                        ),
                        parameters=Parameters(
                            parameter=[
                                Parameter(
                                    name='width',
                                    value=Value(
                                        value='32'
                                    ),
                                    parameter_id='width',
                                    type_value=FormatType.LONGINT
                                ),
                            ]
                        ),
                        register=[
                            AddressBlockType.Register(
                                name='interrupMaskandPriorityLevel',
                                display_name=DisplayName(
                                    value='interrupMaskandPriorityLevel'
                                ),
                                description=Description(
                                    value='Interrupt Mask and Priority'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h0"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='Reserved1',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 0) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('hFFFE) >> 0) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='imask',
                                        description=Description(
                                            value='Indicates if an interrupt is masked (bit=0) or enabled (bit=1)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 1) & {15{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('hFFFE) >> 1) & {15{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Reserved2',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 16) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('hFFFE) >> 16) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='ilevel',
                                        description=Description(
                                            value='Indicates if an interrupt belongs to priority level 1 (bit=1) or 0 (bit=0)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='17'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 17) & {15{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('hFFFE) >> 17) & {15{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='interruptPendingRegister',
                                display_name=DisplayName(
                                    value='interruptPendingRegister'
                                ),
                                description=Description(
                                    value='Indicates if an interrupt is pending'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h4"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='Reserved1',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='ipend',
                                        description=Description(
                                            value='Indicates if an interrupt is pending (bit=1)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Reserved2',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='16'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='interruptForceRegister',
                                display_name=DisplayName(
                                    value='interruptForceRegister'
                                ),
                                description=Description(
                                    value='Indicates if an interrupt is being forced'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h8"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='Reserved1',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='iforce',
                                        description=Description(
                                            value='Indicates if an interrupt is being forced (bit=1)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Reserved2',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='16'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='interruptClearRegister',
                                display_name=DisplayName(
                                    value='interruptClearRegister'
                                ),
                                description=Description(
                                    value="If written with a '1', will clear corresponding bit(s) in interrupt pending register. A read returns 0."
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'hc"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='Reserved1',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='iforce',
                                        description=Description(
                                            value="If written with a '1', will clear corresponding bit(s) in interrupt pending register. A read returns 0."
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Reserved2',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='16'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='interruptReadClearPendingRegister',
                                display_name=DisplayName(
                                    value='interruptReadClearPendingRegister'
                                ),
                                description=Description(
                                    value='interruptReadClearPendingRegister'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h10"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                volatile=Volatile(
                                    value=True
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='interruptReadClearPendingRegister',
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='32'
                                        )
                                    ),
                                ]
                            ),
                        ]
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='vhdlsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='vhdlsource'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='vhdlsource',
                    language=LanguageType(
                        value='vhdl'
                    ),
                    module_name='leon2Irqctrl(struct)',
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-vhdlSource'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='clk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='rst',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='psel',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='penable',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='paddr',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN
                    )
                ),
                Port(
                    name='pwdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irq',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='14'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='sigdefVal_irq'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='intack',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='sigdefVal_intack'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irlin',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='3'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='sigdefVal_irlin'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irlout',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='3'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='fs-vhdlSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='../../common/target.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/device.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/config.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/sparcv8.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/iface.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/amba.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/ambacomp.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/macro.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_generic.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_atc25.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_atc35.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_fs90.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_umc18.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_virtex.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_tsmc25.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_proasic.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_axcel.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/multlib.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../common/tech_map.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/irqctrl_rdack.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/leon2Irqctrl.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='leon2irqctrl_lib'
                        )
                    ),
                ]
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='sigdefVal_irq',
                value=Value(
                    value='0'
                ),
                parameter_id='sigdefVal_irq',
                type_value=FormatType.LONGINT
            ),
            Parameter(
                name='sigdefVal_intack',
                value=Value(
                    value='0'
                ),
                parameter_id='sigdefVal_intack',
                type_value=FormatType.LONGINT
            ),
            Parameter(
                name='sigdefVal_irlin',
                value=Value(
                    value='0'
                ),
                parameter_id='sigdefVal_irlin',
                type_value=FormatType.LONGINT
            ),
        ]
    )
)
