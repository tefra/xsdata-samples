from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.channels import Channels
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.dependency import Dependency
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.initiative import Initiative
from ipxact.models.initiative_type import InitiativeType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.module_parameter_type import ModuleParameterType
from ipxact.models.module_parameter_type_usage_type import ModuleParameterTypeUsageType
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.port import Port
from ipxact.models.port_access_handle import PortAccessHandle
from ipxact.models.port_access_type_1 import PortAccessType1
from ipxact.models.port_path_segment_type import PortPathSegmentType
from ipxact.models.port_slice_type import PortSliceType
from ipxact.models.port_slices_type import PortSlicesType
from ipxact.models.port_transactional_type import PortTransactionalType
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.trans_type_def import TransTypeDef
from ipxact.models.trans_type_defs import TransTypeDefs
from ipxact.models.type_parameter import TypeParameter
from ipxact.models.type_parameters import ServiceTypeDef
from ipxact.models.type_parameters import TypeParameters
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.value import Value


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2TLM',
    name='apbbus8',
    version='1.4',
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='APB_MirroredMaster',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='target_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_initiator='',
                connection_required=True
            ),
            BusInterface(
                name='APB_MirroredSlave0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port0'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv0'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv0'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv0',
                            value=Value(
                                value='0'
                            ),
                            parameter_id='remapAddressSlv0',
                            prompt='Slave 0 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv0',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv0',
                            prompt='Slave 0 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='APB_MirroredSlave1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port1'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv1'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv1'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv1',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='remapAddressSlv1',
                            prompt='Slave 1 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv1',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv1',
                            prompt='Slave 1 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='APB_MirroredSlave2',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port2'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv2'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv2'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv2',
                            value=Value(
                                value='8192'
                            ),
                            parameter_id='remapAddressSlv2',
                            prompt='Slave 2 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv2',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv2',
                            prompt='Slave 2 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='APB_MirroredSlave3',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port3'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv3'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv3'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv3',
                            value=Value(
                                value='12288'
                            ),
                            parameter_id='remapAddressSlv3',
                            prompt='Slave 3 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv3',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv3',
                            prompt='Slave 3 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='APB_MirroredSlave4',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port4'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv4'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv4'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv4',
                            value=Value(
                                value='16384'
                            ),
                            parameter_id='remapAddressSlv4',
                            prompt='Slave 4 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv4',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv4',
                            prompt='Slave 4 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='APB_MirroredSlave5',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port5'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv5'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv5'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv5',
                            value=Value(
                                value='20480'
                            ),
                            parameter_id='remapAddressSlv5',
                            prompt='Slave 5 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv5',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv5',
                            prompt='Slave 5 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='APB_MirroredSlave6',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port6'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv6'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv6'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv6',
                            value=Value(
                                value='24576'
                            ),
                            parameter_id='remapAddressSlv6',
                            prompt='Slave 6 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv6',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv6',
                            prompt='Slave 6 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='APB_MirroredSlave7',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port7'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='remapAddressSlv7'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='rangeSlv7'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='remapAddressSlv7',
                            value=Value(
                                value='28672'
                            ),
                            parameter_id='remapAddressSlv7',
                            prompt='Slave 7 Starting Address (18 bits):',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='rangeSlv7',
                            value=Value(
                                value='4096'
                            ),
                            parameter_id='rangeSlv7',
                            prompt='Slave 7 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            minimum='0',
                            maximum='262144',
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
        ]
    ),
    channels=Channels(
        channel=[
            Channels.Channel(
                name='APBChannel',
                bus_interface_ref=[
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredMaster'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredSlave0'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredSlave1'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredSlave2'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredSlave3'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredSlave4'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredSlave5'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredSlave6'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='APB_MirroredSlave7'
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='TLM_PV',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':*Simulation:'
                        ),
                    ],
                    component_instantiation_ref='TLM_PV'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='TLM_PV',
                    language=LanguageType(
                        value='systemc'
                    ),
                    module_name='apbbus',
                    module_parameters=ComponentInstantiationType.ModuleParameters(
                        module_parameter=[
                            ModuleParameterType(
                                name='mapfile',
                                value=Value(
                                    value='mapfile'
                                ),
                                data_type='const char*',
                                usage_type=ModuleParameterTypeUsageType.NONTYPED
                            ),
                        ]
                    ),
                    file_set_ref=[
                        FileSetRef(
                            local_name='sourceCode'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='target_port',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.PROVIDES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_target_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_target_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port0',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    ),
                    access=PortAccessType1(
                        access_handles=PortAccessType1.AccessHandles(
                            access_handle=[
                                PortAccessHandle(
                                    slices=PortSlicesType(
                                        slice=[
                                            PortSliceType(
                                                path_segments=PortSliceType.PathSegments(
                                                    path_segment=[
                                                        PortPathSegmentType(
                                                            value='initiator_port'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port1',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    ),
                    access=PortAccessType1(
                        access_handles=PortAccessType1.AccessHandles(
                            access_handle=[
                                PortAccessHandle(
                                    slices=PortSlicesType(
                                        slice=[
                                            PortSliceType(
                                                path_segments=PortSliceType.PathSegments(
                                                    path_segment=[
                                                        PortPathSegmentType(
                                                            value='initiator_port'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port2',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    ),
                    access=PortAccessType1(
                        access_handles=PortAccessType1.AccessHandles(
                            access_handle=[
                                PortAccessHandle(
                                    slices=PortSlicesType(
                                        slice=[
                                            PortSliceType(
                                                path_segments=PortSliceType.PathSegments(
                                                    path_segment=[
                                                        PortPathSegmentType(
                                                            value='initiator_port'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port3',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    ),
                    access=PortAccessType1(
                        access_handles=PortAccessType1.AccessHandles(
                            access_handle=[
                                PortAccessHandle(
                                    slices=PortSlicesType(
                                        slice=[
                                            PortSliceType(
                                                path_segments=PortSliceType.PathSegments(
                                                    path_segment=[
                                                        PortPathSegmentType(
                                                            value='initiator_port'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port4',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    ),
                    access=PortAccessType1(
                        access_handles=PortAccessType1.AccessHandles(
                            access_handle=[
                                PortAccessHandle(
                                    slices=PortSlicesType(
                                        slice=[
                                            PortSliceType(
                                                path_segments=PortSliceType.PathSegments(
                                                    path_segment=[
                                                        PortPathSegmentType(
                                                            value='initiator_port'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port5',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    ),
                    access=PortAccessType1(
                        access_handles=PortAccessType1.AccessHandles(
                            access_handle=[
                                PortAccessHandle(
                                    slices=PortSlicesType(
                                        slice=[
                                            PortSliceType(
                                                path_segments=PortSliceType.PathSegments(
                                                    path_segment=[
                                                        PortPathSegmentType(
                                                            value='initiator_port'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port6',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    ),
                    access=PortAccessType1(
                        access_handles=PortAccessType1.AccessHandles(
                            access_handle=[
                                PortAccessHandle(
                                    slices=PortSlicesType(
                                        slice=[
                                            PortSliceType(
                                                path_segments=PortSliceType.PathSegments(
                                                    path_segment=[
                                                        PortPathSegmentType(
                                                            value='initiator_port'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port7',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    ),
                    access=PortAccessType1(
                        access_handles=PortAccessType1.AccessHandles(
                            access_handle=[
                                PortAccessHandle(
                                    slices=PortSlicesType(
                                        slice=[
                                            PortSliceType(
                                                path_segments=PortSliceType.PathSegments(
                                                    path_segment=[
                                                        PortPathSegmentType(
                                                            value='initiator_port'
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='sourceCode',
                file=[
                    File(
                        name=IpxactUri(
                            value='tlmsrc/apbbus.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.SYSTEM_CSOURCE
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True,
                            external_declarations=True
                        ),
                        logical_name=File.LogicalName(
                            value='apbbus'
                        ),
                        dependency=[
                            Dependency(
                                value='../../PV'
                            ),
                        ]
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/pv_router.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/user_types.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                ]
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='mapfile',
                value=Value(
                    value='apbmstMapFile.map'
                ),
                parameter_id='mapfile',
                resolve=ParameterTypeResolve.USER
            ),
        ]
    )
)
