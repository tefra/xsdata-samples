from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.access import Access
from ipxact.models.access_policies import AccessPolicies
from ipxact.models.access_type import AccessType
from ipxact.models.bank import Bank
from ipxact.models.bank_alignment_type import BankAlignmentType
from ipxact.models.banked_block_type import BankedBlockType
from ipxact.models.base_address import BaseAddress
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.dependency import Dependency
from ipxact.models.description import Description
from ipxact.models.extended_vectors_type import ExtendedVectorsType
from ipxact.models.field_type import FieldType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.left import Left
from ipxact.models.memory_map_ref import MemoryMapRef
from ipxact.models.memory_map_type import MemoryMapType
from ipxact.models.memory_maps import MemoryMaps
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.part_select import PartSelect
from ipxact.models.port import Port
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.range import Range
from ipxact.models.reset import Reset
from ipxact.models.right import Right
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.unsigned_bit_vector_expression import UnsignedBitVectorExpression
from ipxact.models.unsigned_int_expression import UnsignedIntExpression
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_int_expression import UnsignedPositiveIntExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.usage_type import UsageType
from ipxact.models.volatile import Volatile
from ipxact.models.wire_type_def import WireTypeDef
from ipxact.models.wire_type_defs import WireTypeDefs


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2TLM',
    name='apbram',
    version='1.0',
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='APBClk',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.clock',
                    name='clock',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.clock',
                                name='clock_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='CLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='APBReset',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.reset',
                    name='reset',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.reset',
                                name='reset_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='RESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='ambaAPB',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='amba.com',
                                library='AMBA2',
                                name='APB_rtl',
                                version='r2p0_4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PSELx'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='psel'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PENABLE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='penable'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PADDR',
                                            range=Range(
                                                left=Left(
                                                    value='11'
                                                ),
                                                right=Right(
                                                    value='0'
                                                )
                                            )
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='paddr',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='11'
                                                        ),
                                                        right=Right(
                                                            value='0'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWRITE'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwrite'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PWDATA',
                                            range=Range(
                                                left=Left(
                                                    value='31'
                                                ),
                                                right=Right(
                                                    value='0'
                                                )
                                            )
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pwdata',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='31'
                                                        ),
                                                        right=Right(
                                                            value='0'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRDATA',
                                            range=Range(
                                                left=Left(
                                                    value='31'
                                                ),
                                                right=Right(
                                                    value='0'
                                                )
                                            )
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='prdata',
                                            part_select=PartSelect(
                                                range=[
                                                    Range(
                                                        left=Left(
                                                            value='31'
                                                        ),
                                                        right=Right(
                                                            value='0'
                                                        )
                                                    ),
                                                ]
                                            )
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PCLK'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='pclk'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PRESETn'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='presetn'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(
                    memory_map_ref=MemoryMapRef(
                        memory_map_ref='ambaAPB'
                    )
                ),
                connection_required=True
            ),
        ]
    ),
    memory_maps=MemoryMaps(
        memory_map=[
            MemoryMapType(
                name='ambaAPB',
                bank=[
                    Bank(
                        name='defaultid4490635',
                        base_address=BaseAddress(
                            value='0'
                        ),
                        address_block=[
                            BankedBlockType(
                                name='RAM',
                                range=UnsignedPositiveLongintExpression(
                                    value="'hFFC"
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.MEMORY,
                                volatile=Volatile(
                                    value=False
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                )
                            ),
                            BankedBlockType(
                                name='idAddressBlock',
                                range=UnsignedPositiveLongintExpression(
                                    value='4'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.REGISTER,
                                volatile=Volatile(
                                    value=False
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_ONLY
                                        ),
                                    ]
                                ),
                                register=[
                                    BankedBlockType.Register(
                                        name='IDReg',
                                        description=Description(
                                            value='ID register'
                                        ),
                                        address_offset=UnsignedLongintExpression(
                                            value="'h0"
                                        ),
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='ID',
                                                description=Description(
                                                    value='ID Field'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='32'
                                                ),
                                                resets=FieldType.Resets(
                                                    reset=[
                                                        Reset(
                                                            value=UnsignedBitVectorExpression(
                                                                value="(('h00000D08) >> 0) & {32{1'b1}}"
                                                            )
                                                        ),
                                                    ]
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                ]
                            ),
                        ],
                        bank_alignment=BankAlignmentType.SERIAL
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='verilogsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='verilogsource'
                ),
                ModelType.Views.View(
                    name='vhdlsource',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':modelsim.mentor.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':ncsim.cadence.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':vcs.synopsys.com:'
                        ),
                        ModelType.Views.View.EnvIdentifier(
                            value=':designcompiler.synopsys.com:'
                        ),
                    ],
                    component_instantiation_ref='vhdlsource'
                ),
                ModelType.Views.View(
                    name='TLM_PV',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':*Simulation:'
                        ),
                    ],
                    component_instantiation_ref='TLM_PV'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='verilogsource',
                    language=LanguageType(
                        value='verilog'
                    ),
                    module_name='apbram',
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-verilogSource'
                        ),
                    ]
                ),
                ComponentInstantiationType(
                    name='vhdlsource',
                    language=LanguageType(
                        value='vhdl'
                    ),
                    module_name='apbram(rtl)',
                    file_set_ref=[
                        FileSetRef(
                            local_name='fs-vhdlSource'
                        ),
                    ]
                ),
                ComponentInstantiationType(
                    name='TLM_PV',
                    language=LanguageType(
                        value='systemc'
                    ),
                    module_name='apbram',
                    file_set_ref=[
                        FileSetRef(
                            local_name='sourceCode'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='pclk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_logic'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='presetn',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_logic'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='psel',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_logic'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='penable',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_logic'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='paddr',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='11'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_lv'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwrite',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_logic'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='pwdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_lv'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='prdata',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        vectors=ExtendedVectorsType(
                            vector=[
                                ExtendedVectorsType.Vector(
                                    left=Left(
                                        value='31'
                                    ),
                                    right=Right(
                                        value='0'
                                    )
                                ),
                            ]
                        ),
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_lv'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='fs-vhdlSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='hdlsrc/apbram.vhd'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VHDL_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='apbram_lib'
                        )
                    ),
                ]
            ),
            FileSet(
                name='fs-verilogSource',
                file=[
                    File(
                        name=IpxactUri(
                            value='hdlsrc/apbram.v'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.VERILOG_SOURCE
                            ),
                        ],
                        logical_name=File.LogicalName(
                            value='apbram_lib'
                        )
                    ),
                ]
            ),
            FileSet(
                name='sourceCode',
                file=[
                    File(
                        name=IpxactUri(
                            value='hdlsrc/apbram.cc'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.SYSTEM_CSOURCE
                            ),
                        ],
                        dependency=[
                            Dependency(
                                value='hdlsrc'
                            ),
                        ]
                    ),
                    File(
                        name=IpxactUri(
                            value='hdlsrc/apbram.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.SYSTEM_CSOURCE
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True,
                            external_declarations=True
                        ),
                        logical_name=File.LogicalName(
                            value='apbram'
                        )
                    ),
                ]
            ),
        ]
    )
)
