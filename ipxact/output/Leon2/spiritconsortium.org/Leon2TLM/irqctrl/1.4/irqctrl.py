from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.access import Access
from ipxact.models.access_policies import AccessPolicies
from ipxact.models.access_type import AccessType
from ipxact.models.address_block import AddressBlock
from ipxact.models.address_block_type import AddressBlockType
from ipxact.models.base_address import BaseAddress
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.default_value import DefaultValue
from ipxact.models.dependency import Dependency
from ipxact.models.description import Description
from ipxact.models.driver import Driver
from ipxact.models.drivers import Drivers
from ipxact.models.field_type import FieldType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.initiative import Initiative
from ipxact.models.initiative_type import InitiativeType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.memory_map_ref import MemoryMapRef
from ipxact.models.memory_map_type import MemoryMapType
from ipxact.models.memory_maps import MemoryMaps
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.parameter import Parameter
from ipxact.models.parameters import Parameters
from ipxact.models.port import Port
from ipxact.models.port_transactional_type import PortTransactionalType
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.reset import Reset
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.trans_type_def import TransTypeDef
from ipxact.models.trans_type_defs import TransTypeDefs
from ipxact.models.type_parameter import TypeParameter
from ipxact.models.type_parameters import ServiceTypeDef
from ipxact.models.type_parameters import TypeParameters
from ipxact.models.unsigned_bit_vector_expression import UnsignedBitVectorExpression
from ipxact.models.unsigned_int_expression import UnsignedIntExpression
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_int_expression import UnsignedPositiveIntExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.value import Value
from ipxact.models.volatile import Volatile
from ipxact.models.wire_type_def import WireTypeDef
from ipxact.models.wire_type_defs import WireTypeDefs


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2TLM',
    name='irqctrl',
    version='1.4',
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='APB_Slave',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='apb_slave_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(
                    memory_map_ref=MemoryMapRef(
                        memory_map_ref='APB_MM'
                    )
                ),
                connection_required=True
            ),
            BusInterface(
                name='INT_Master',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.leon2',
                    name='IntProc',
                    version='v1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='IntProc_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRL'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irlout'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQVEC'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irlin'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='INTack'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='intack'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(

                )
            ),
            BusInterface(
                name='INT_Slave4',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='int4'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='INT_Slave3',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='int3'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='INT_Slave2',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='int2'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='INT_Slave1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='int1'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
            BusInterface(
                name='INT_Slave0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.interrupt',
                    name='interrupt',
                    version='1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='busdef.interrupt',
                                name='interrupt_rtl',
                                version='1.0'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQ'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='int0'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
        ]
    ),
    memory_maps=MemoryMaps(
        memory_map=[
            MemoryMapType(
                name='APB_MM',
                address_block=[
                    AddressBlock(
                        name='apbMemoryMap',
                        base_address=BaseAddress(
                            value='0'
                        ),
                        range=UnsignedPositiveLongintExpression(
                            value='64'
                        ),
                        width=UnsignedPositiveIntExpression(
                            value='width'
                        ),
                        parameters=Parameters(
                            parameter=[
                                Parameter(
                                    name='width',
                                    value=Value(
                                        value='32'
                                    ),
                                    parameter_id='width',
                                    type_value=FormatType.LONGINT
                                ),
                            ]
                        ),
                        register=[
                            AddressBlockType.Register(
                                name='interrupMaskandPriorityLevel',
                                description=Description(
                                    value='Interrupt Mask and Priority'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h0"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='Reserved1',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 0) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('hFFFE) >> 0) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='imask',
                                        description=Description(
                                            value='Indicates if an interrupt is masked (bit=0) or enabled (bit=1)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 1) & {15{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('hFFFE) >> 1) & {15{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Reserved2',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 16) & {1{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('hFFFE) >> 16) & {1{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='ilevel',
                                        description=Description(
                                            value='Indicates if an interrupt belongs to priority level 1 (bit=1) or 0 (bit=0)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='17'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        resets=FieldType.Resets(
                                            reset=[
                                                Reset(
                                                    value=UnsignedBitVectorExpression(
                                                        value="(('h0) >> 17) & {15{1'b1}}"
                                                    ),
                                                    mask=UnsignedBitVectorExpression(
                                                        value="(('hFFFE) >> 17) & {15{1'b1}}"
                                                    )
                                                ),
                                            ]
                                        ),
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='interruptPendingRegister',
                                description=Description(
                                    value='Indicates if an interrupt is pending'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h4"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='Reserved1',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='ipend',
                                        description=Description(
                                            value='Indicates if an interrupt is pending (bit=1)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Reserved2',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='16'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='interruptForceRegister',
                                description=Description(
                                    value='Indicates if an interrupt is being forced'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h8"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='Reserved1',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='iforce',
                                        description=Description(
                                            value='Indicates if an interrupt is being forced (bit=1)'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Reserved2',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='16'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='interruptClearRegister',
                                description=Description(
                                    value="If written with a '1', will clear corresponding bit(s) in interrupt pending register. A read returns 0."
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'hc"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='Reserved1',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='1'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='iforce',
                                        description=Description(
                                            value="If written with a '1', will clear corresponding bit(s) in interrupt pending register. A read returns 0."
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='1'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='15'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                    FieldType(
                                        name='Reserved2',
                                        description=Description(
                                            value='Reserved'
                                        ),
                                        bit_offset=UnsignedIntExpression(
                                            value='16'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='16'
                                        ),
                                        volatile=True,
                                        field_access_policies=FieldType.FieldAccessPolicies(
                                            field_access_policy=[
                                                FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                    access=Access(
                                                        value=AccessType.READ_WRITE
                                                    ),
                                                    testable=FieldType.FieldAccessPolicies.FieldAccessPolicy.Testable(
                                                        value=False
                                                    )
                                                ),
                                            ]
                                        )
                                    ),
                                ]
                            ),
                            AddressBlockType.Register(
                                name='interruptReadClearPendingRegister',
                                description=Description(
                                    value='interruptReadClearPendingRegister'
                                ),
                                address_offset=UnsignedLongintExpression(
                                    value="'h10"
                                ),
                                size=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                volatile=Volatile(
                                    value=True
                                ),
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                field_value=[
                                    FieldType(
                                        name='interruptReadClearPendingRegister',
                                        bit_offset=UnsignedIntExpression(
                                            value='0'
                                        ),
                                        bit_width=UnsignedPositiveIntExpression(
                                            value='32'
                                        )
                                    ),
                                ]
                            ),
                        ]
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='TLM_PV',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':*Simulation:'
                        ),
                    ],
                    component_instantiation_ref='TLM_PV'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='TLM_PV',
                    language=LanguageType(
                        value='systemc'
                    ),
                    module_name='irqctrl',
                    file_set_ref=[
                        FileSetRef(
                            local_name='sourceCode'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='apb_slave_port',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.PROVIDES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_target_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_target_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='int0',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='int1',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='int2',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='int3',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='int4',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irlout',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irlin',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='intack',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='bool'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value='0'
                                    )
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='sourceCode',
                file=[
                    File(
                        name=IpxactUri(
                            value='tlmsrc/irqctrl.cc'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.SYSTEM_CSOURCE
                            ),
                        ],
                        dependency=[
                            Dependency(
                                value='tlmsrc'
                            ),
                        ]
                    ),
                    File(
                        name=IpxactUri(
                            value='tlmsrc/irqctrl.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.SYSTEM_CSOURCE
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True,
                            external_declarations=True
                        ),
                        logical_name=File.LogicalName(
                            value='timers'
                        ),
                        dependency=[
                            Dependency(
                                value='../../PV'
                            ),
                        ]
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/pv_slave_base.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/pv_target_port.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/user_types.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                ]
            ),
        ]
    )
)
