from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.channels import Channels
from ipxact.models.choices import Choices
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.dependency import Dependency
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.initiative import Initiative
from ipxact.models.initiative_type import InitiativeType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.module_parameter_type import ModuleParameterType
from ipxact.models.module_parameter_type_usage_type import ModuleParameterTypeUsageType
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.port import Port
from ipxact.models.port_transactional_type import PortTransactionalType
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.trans_type_def import TransTypeDef
from ipxact.models.trans_type_defs import TransTypeDefs
from ipxact.models.type_parameter import TypeParameter
from ipxact.models.type_parameters import ServiceTypeDef
from ipxact.models.type_parameters import TypeParameters
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.value import Value


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2TLM',
    name='ahbbus22',
    version='1.4',
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='AHB_MirroredMaster0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='AHB',
                    version='r2p0_6'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='ahb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='target_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_initiator=''
            ),
            BusInterface(
                name='AHB_MirroredMaster1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='AHB',
                    version='r2p0_6'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='ahb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='target_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_initiator=''
            ),
            BusInterface(
                name='AHB_MirroredSlave0',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='AHB',
                    version='r2p0_6'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='ahb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='start_addr_slv0_mirror'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='range_slv0_mirror'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='start_addr_slv0_mirror',
                            value=Value(
                                value="'h00000000"
                            ),
                            parameter_id='start_addr_slv0_mirror',
                            prompt='Slave 0 Starting Address:',
                            choice_ref='BaseAddressChoices',
                            config_groups=[
                                'requiredConfig',
                            ],
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='range_slv0_mirror',
                            value=Value(
                                value="'h00010000"
                            ),
                            parameter_id='range_slv0_mirror',
                            prompt='Slave 0 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
            BusInterface(
                name='AHB_MirroredSlave1',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='AHB',
                    version='r2p0_6'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='ahb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='initiator_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                mirrored_target=BusInterfaceType.MirroredTarget(
                    base_addresses=BusInterfaceType.MirroredTarget.BaseAddresses(
                        remap_addresses=[
                            BusInterfaceType.MirroredTarget.BaseAddresses.RemapAddresses(
                                remap_address=UnsignedLongintExpression(
                                    value='start_addr_slv1_mirror'
                                )
                            ),
                        ],
                        range=UnsignedPositiveLongintExpression(
                            value='range_slv1_mirror'
                        )
                    )
                ),
                parameters=Parameters(
                    parameter=[
                        Parameter(
                            name='start_addr_slv1_mirror',
                            value=Value(
                                value="'h10000000"
                            ),
                            parameter_id='start_addr_slv1_mirror',
                            prompt='Slave 1 Starting Address:',
                            choice_ref='BaseAddressChoices',
                            config_groups=[
                                'requiredConfig',
                            ],
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                        Parameter(
                            name='range_slv1_mirror',
                            value=Value(
                                value="'h00010000"
                            ),
                            parameter_id='range_slv1_mirror',
                            prompt='Slave 1 Range:',
                            config_groups=[
                                'requiredConfig',
                            ],
                            type_value=FormatType.LONGINT,
                            resolve=ParameterTypeResolve.USER
                        ),
                    ]
                )
            ),
        ]
    ),
    channels=Channels(
        channel=[
            Channels.Channel(
                name='AHBChannel',
                bus_interface_ref=[
                    Channels.Channel.BusInterfaceRef(
                        local_name='AHB_MirroredMaster0'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='AHB_MirroredMaster1'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='AHB_MirroredSlave0'
                    ),
                    Channels.Channel.BusInterfaceRef(
                        local_name='AHB_MirroredSlave1'
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='TLM_PV',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':*Simulation:'
                        ),
                    ],
                    component_instantiation_ref='TLM_PV'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='TLM_PV',
                    language=LanguageType(
                        value='systemc'
                    ),
                    module_name='ahbbus',
                    module_parameters=ComponentInstantiationType.ModuleParameters(
                        module_parameter=[
                            ModuleParameterType(
                                name='mapfile',
                                value=Value(
                                    value='mapfile'
                                ),
                                data_type='const char*',
                                usage_type=ModuleParameterTypeUsageType.NONTYPED
                            ),
                        ]
                    ),
                    file_set_ref=[
                        FileSetRef(
                            local_name='sourceCode'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='target_port',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.PROVIDES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_target_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_target_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='initiator_port',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    choices=Choices(
        choice=[
            Choices.Choice(
                name='BaseAddressChoices',
                enumeration=[
                    Choices.Choice.Enumeration(
                        value='0x00000000',
                        text='0x00000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x10000000',
                        text='0x10000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x20000000',
                        text='0x20000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x30000000',
                        text='0x30000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x40000000',
                        text='0x40000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x50000000',
                        text='0x50000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x60000000',
                        text='0x60000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x70000000',
                        text='0x70000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x80000000',
                        text='0x80000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x90000000',
                        text='0x90000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xa0000000',
                        text='0xa0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xb0000000',
                        text='0xb0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xc0000000',
                        text='0xc0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xd0000000',
                        text='0xd0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xe0000000',
                        text='0xe0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xf0000000',
                        text='0xf0000000'
                    ),
                ]
            ),
        ]
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='sourceCode',
                file=[
                    File(
                        name=IpxactUri(
                            value='tlmsrc/ahbbus.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.SYSTEM_CSOURCE
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True,
                            external_declarations=True
                        ),
                        logical_name=File.LogicalName(
                            value='ahbbus'
                        ),
                        dependency=[
                            Dependency(
                                value='../../PV'
                            ),
                        ]
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/pv_router.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/user_types.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                ]
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='mapfile',
                value=Value(
                    value='ahbbus22MapFile.map'
                ),
                parameter_id='mapfile',
                resolve=ParameterTypeResolve.USER
            ),
        ]
    )
)
