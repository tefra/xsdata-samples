from ipxact.models.abstraction_types import AbstractionTypes
from ipxact.models.access import Access
from ipxact.models.access_policies import AccessPolicies
from ipxact.models.access_type import AccessType
from ipxact.models.address_bank_type import AddressBankType
from ipxact.models.address_block import AddressBlock
from ipxact.models.address_spaces import AddressSpaces
from ipxact.models.bank import Bank
from ipxact.models.bank_alignment_type import BankAlignmentType
from ipxact.models.banked_block_type import BankedBlockType
from ipxact.models.base_address import BaseAddress
from ipxact.models.bus_interface import BusInterface
from ipxact.models.bus_interface_type import BusInterfaceType
from ipxact.models.bus_interfaces import BusInterfaces
from ipxact.models.choices import Choices
from ipxact.models.component import Component
from ipxact.models.component_instantiation_type import ComponentInstantiationType
from ipxact.models.component_port_direction_type import ComponentPortDirectionType
from ipxact.models.component_type import ComponentType
from ipxact.models.configurable_library_ref_type import ConfigurableLibraryRefType
from ipxact.models.default_value import DefaultValue
from ipxact.models.dependency import Dependency
from ipxact.models.description import Description
from ipxact.models.driver import Driver
from ipxact.models.drivers import Drivers
from ipxact.models.field_type import FieldType
from ipxact.models.file import File
from ipxact.models.file_set import FileSet
from ipxact.models.file_set_ref import FileSetRef
from ipxact.models.file_sets import FileSets
from ipxact.models.file_type import FileType
from ipxact.models.format_type import FormatType
from ipxact.models.initiative import Initiative
from ipxact.models.initiative_type import InitiativeType
from ipxact.models.ipxact_uri import IpxactUri
from ipxact.models.language_type import LanguageType
from ipxact.models.local_memory_map_type import LocalMemoryMapType
from ipxact.models.memory_map_ref import MemoryMapRef
from ipxact.models.memory_map_type import MemoryMapType
from ipxact.models.memory_maps import MemoryMaps
from ipxact.models.model import Model
from ipxact.models.model_type import ModelType
from ipxact.models.module_parameter_type import ModuleParameterType
from ipxact.models.module_parameter_type_usage_type import ModuleParameterTypeUsageType
from ipxact.models.parameter import Parameter
from ipxact.models.parameter_type_resolve import ParameterTypeResolve
from ipxact.models.parameters import Parameters
from ipxact.models.port import Port
from ipxact.models.port_transactional_type import PortTransactionalType
from ipxact.models.port_wire_type import PortWireType
from ipxact.models.signed_longint_expression import SignedLongintExpression
from ipxact.models.simple_file_type import SimpleFileType
from ipxact.models.subspace_map import SubspaceMap
from ipxact.models.trans_type_def import TransTypeDef
from ipxact.models.trans_type_defs import TransTypeDefs
from ipxact.models.type_parameter import TypeParameter
from ipxact.models.type_parameters import ServiceTypeDef
from ipxact.models.type_parameters import TypeParameters
from ipxact.models.unsigned_int_expression import UnsignedIntExpression
from ipxact.models.unsigned_longint_expression import UnsignedLongintExpression
from ipxact.models.unsigned_positive_int_expression import UnsignedPositiveIntExpression
from ipxact.models.unsigned_positive_longint_expression import UnsignedPositiveLongintExpression
from ipxact.models.usage_type import UsageType
from ipxact.models.value import Value
from ipxact.models.wire_type_def import WireTypeDef
from ipxact.models.wire_type_defs import WireTypeDefs


obj = Component(
    vendor='spiritconsortium.org',
    library='Leon2TLM',
    name='processor',
    version='1.4',
    bus_interfaces=BusInterfaces(
        bus_interface=[
            BusInterface(
                name='AHB_Master',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='AHB',
                    version='r2p0_6'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='ahb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='ahb_master_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                initiator=BusInterfaceType.Initiator(
                    address_space_ref=BusInterfaceType.Initiator.AddressSpaceRef(
                        address_space_ref='main_AS'
                    )
                ),
                connection_required=True
            ),
            BusInterface(
                name='APB_Slave',
                bus_type=ConfigurableLibraryRefType(
                    vendor='amba.com',
                    library='AMBA2',
                    name='APB',
                    version='r2p0_4'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='apb_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='PV_TRANS'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='apb_slave_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(
                    memory_map_ref=MemoryMapRef(
                        memory_map_ref='APB_MM'
                    )
                )
            ),
            BusInterface(
                name='INT_Slave',
                bus_type=ConfigurableLibraryRefType(
                    vendor='spiritconsortium.org',
                    library='busdef.leon2',
                    name='IntProc',
                    version='v1.0'
                ),
                abstraction_types=AbstractionTypes(
                    abstraction_type=[
                        AbstractionTypes.AbstractionType(
                            abstraction_ref=ConfigurableLibraryRefType(
                                vendor='spiritconsortium.org',
                                library='abstractiondef.tlm',
                                name='IntProc_pv',
                                version='1.4'
                            ),
                            port_maps=AbstractionTypes.AbstractionType.PortMaps(
                                port_map=[
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRL'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irl_port'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='IRQVEC'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='irqvec_port'
                                        )
                                    ),
                                    AbstractionTypes.AbstractionType.PortMaps.PortMap(
                                        logical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.LogicalPort(
                                            name='INTack'
                                        ),
                                        physical_port=AbstractionTypes.AbstractionType.PortMaps.PortMap.PhysicalPort(
                                            name='intack_port'
                                        )
                                    ),
                                ]
                            )
                        ),
                    ]
                ),
                target=BusInterfaceType.Target(

                )
            ),
        ]
    ),
    address_spaces=AddressSpaces(
        address_space=[
            AddressSpaces.AddressSpace(
                name='main_AS',
                range=UnsignedPositiveLongintExpression(
                    value='4 * (2 ** 30)'
                ),
                width=UnsignedPositiveIntExpression(
                    value='32'
                ),
                local_memory_map=LocalMemoryMapType(
                    name='ahbLocalMemoryMap',
                    address_block=[
                        AddressBlock(
                            name='defaultid4490218',
                            base_address=BaseAddress(
                                value='start_addr_local'
                            ),
                            range=UnsignedPositiveLongintExpression(
                                value='range_local'
                            ),
                            width=UnsignedPositiveIntExpression(
                                value='width'
                            ),
                            usage=UsageType.MEMORY,
                            parameters=Parameters(
                                parameter=[
                                    Parameter(
                                        name='start_addr_local',
                                        value=Value(
                                            value="'h10000000"
                                        ),
                                        parameter_id='start_addr_local',
                                        prompt='Local Memory Map Starting Address:',
                                        choice_ref='BaseAddressChoices',
                                        config_groups=[
                                            'requiredConfig',
                                        ],
                                        type_value=FormatType.LONGINT
                                    ),
                                    Parameter(
                                        name='range_local',
                                        value=Value(
                                            value='4096'
                                        ),
                                        parameter_id='range_local',
                                        prompt='Local Memory Map Range (bytes):',
                                        choice_ref='RangeChoice',
                                        config_groups=[
                                            'requiredConfig',
                                        ],
                                        type_value=FormatType.LONGINT
                                    ),
                                    Parameter(
                                        name='width',
                                        value=Value(
                                            value='32'
                                        ),
                                        parameter_id='width',
                                        type_value=FormatType.LONGINT
                                    ),
                                ]
                            )
                        ),
                    ]
                )
            ),
        ]
    ),
    memory_maps=MemoryMaps(
        memory_map=[
            MemoryMapType(
                name='APB_MM',
                bank=[
                    Bank(
                        name='defaultid4490282',
                        base_address=BaseAddress(
                            value='0'
                        ),
                        address_block=[
                            BankedBlockType(
                                name='registers',
                                range=UnsignedPositiveLongintExpression(
                                    value='4'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.REGISTER,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_ONLY
                                        ),
                                    ]
                                ),
                                register=[
                                    BankedBlockType.Register(
                                        name='Failures',
                                        address_offset=UnsignedLongintExpression(
                                            value="'h0"
                                        ),
                                        size=UnsignedPositiveIntExpression(
                                            value='32'
                                        ),
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_ONLY
                                                ),
                                            ]
                                        ),
                                        field_value=[
                                            FieldType(
                                                name='NumFailures',
                                                description=Description(
                                                    value='Number of failures from the AHB BFM'
                                                ),
                                                bit_offset=UnsignedIntExpression(
                                                    value='0'
                                                ),
                                                bit_width=UnsignedPositiveIntExpression(
                                                    value='32'
                                                ),
                                                field_access_policies=FieldType.FieldAccessPolicies(
                                                    field_access_policy=[
                                                        FieldType.FieldAccessPolicies.FieldAccessPolicy(
                                                            access=Access(
                                                                value=AccessType.READ_ONLY
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    ),
                                ]
                            ),
                            BankedBlockType(
                                name='lowest1k',
                                range=UnsignedPositiveLongintExpression(
                                    value='1020'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.MEMORY,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                )
                            ),
                            BankedBlockType(
                                name='midlow1k',
                                range=UnsignedPositiveLongintExpression(
                                    value='1 * (2 ** 10)'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.MEMORY,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                )
                            ),
                            BankedBlockType(
                                name='midhigh1k',
                                range=UnsignedPositiveLongintExpression(
                                    value='1 * (2 ** 10)'
                                ),
                                width=UnsignedPositiveIntExpression(
                                    value='32'
                                ),
                                usage=UsageType.MEMORY,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                )
                            ),
                        ],
                        bank=[
                            AddressBankType.Bank(
                                name='defaultid4490406',
                                address_block=[
                                    BankedBlockType(
                                        name='highest1kx7_0',
                                        range=UnsignedPositiveLongintExpression(
                                            value='1 * (2 ** 10)'
                                        ),
                                        width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        usage=UsageType.MEMORY,
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        )
                                    ),
                                    BankedBlockType(
                                        name='highest1kx15_8',
                                        range=UnsignedPositiveLongintExpression(
                                            value='1 * (2 ** 10)'
                                        ),
                                        width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        usage=UsageType.MEMORY,
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        )
                                    ),
                                    BankedBlockType(
                                        name='highest1kx23_16',
                                        range=UnsignedPositiveLongintExpression(
                                            value='1 * (2 ** 10)'
                                        ),
                                        width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        usage=UsageType.MEMORY,
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        )
                                    ),
                                    BankedBlockType(
                                        name='highest1kx31_24',
                                        range=UnsignedPositiveLongintExpression(
                                            value='1 * (2 ** 10)'
                                        ),
                                        width=UnsignedPositiveIntExpression(
                                            value='8'
                                        ),
                                        usage=UsageType.MEMORY,
                                        access_policies=AccessPolicies(
                                            access_policy=[
                                                AccessPolicies.AccessPolicy(
                                                    access=AccessType.READ_WRITE
                                                ),
                                            ]
                                        )
                                    ),
                                ],
                                usage=UsageType.MEMORY,
                                access_policies=AccessPolicies(
                                    access_policy=[
                                        AccessPolicies.AccessPolicy(
                                            access=AccessType.READ_WRITE
                                        ),
                                    ]
                                ),
                                bank_alignment=BankAlignmentType.PARALLEL
                            ),
                        ],
                        usage=UsageType.MEMORY,
                        access_policies=AccessPolicies(
                            access_policy=[
                                AccessPolicies.AccessPolicy(
                                    access=AccessType.READ_WRITE
                                ),
                            ]
                        ),
                        bank_alignment=BankAlignmentType.SERIAL
                    ),
                ]
            ),
            MemoryMapType(
                name='processor_MemoryMap',
                subspace_map=[
                    SubspaceMap(
                        name='main_AS_SubspaceMap',
                        base_address=SignedLongintExpression(
                            value='0'
                        ),
                        initiator_ref='AHB_Master'
                    ),
                ]
            ),
        ]
    ),
    model=Model(
        views=ModelType.Views(
            view=[
                ModelType.Views.View(
                    name='TLM_PV',
                    env_identifier=[
                        ModelType.Views.View.EnvIdentifier(
                            value=':*Simulation:'
                        ),
                    ],
                    component_instantiation_ref='TLM_PV'
                ),
            ]
        ),
        instantiations=ModelType.Instantiations(
            component_instantiation=[
                ComponentInstantiationType(
                    name='TLM_PV',
                    language=LanguageType(
                        value='systemc'
                    ),
                    module_name='processor',
                    module_parameters=ComponentInstantiationType.ModuleParameters(
                        module_parameter=[
                            ModuleParameterType(
                                name='code_file',
                                value=Value(
                                    value='code_file'
                                ),
                                data_type='string',
                                usage_type=ModuleParameterTypeUsageType.NONTYPED
                            ),
                        ]
                    ),
                    file_set_ref=[
                        FileSetRef(
                            local_name='sourceCode'
                        ),
                    ]
                ),
            ]
        ),
        ports=ModelType.Ports(
            port=[
                Port(
                    name='ahb_master_port',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.REQUIRES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_target_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_target_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='apb_slave_port',
                    transactional=PortTransactionalType(
                        initiative=Initiative(
                            value=InitiativeType.PROVIDES
                        ),
                        trans_type_defs=TransTypeDefs(
                            trans_type_def=[
                                TransTypeDef(
                                    type_name=TransTypeDef.TypeName(
                                        value='pv_initiator_port'
                                    ),
                                    type_definition=[
                                        TransTypeDef.TypeDefinition(
                                            value='pv_initiator_port.h'
                                        ),
                                    ],
                                    type_parameters=TypeParameters(
                                        service_type_def=[
                                            ServiceTypeDef(
                                                type_name=ServiceTypeDef.TypeName(
                                                    value='OSCI_TLM_PV',
                                                    implicit=True
                                                ),
                                                type_parameters=TypeParameters(
                                                    type_parameter=[
                                                        TypeParameter(
                                                            name='typedef1',
                                                            value=Value(
                                                                value='ADDRESS_TYPE'
                                                            )
                                                        ),
                                                        TypeParameter(
                                                            name='typedef2',
                                                            value=Value(
                                                                value='DATA_TYPE'
                                                            )
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ]
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irl_port',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        ),
                        drivers=Drivers(
                            driver=[
                                Driver(
                                    default_value=DefaultValue(
                                        value="'h0"
                                    )
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='irqvec_port',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='int'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='intack_port',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.OUT,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='bool'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='clk',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='sc_logic'
                                    ),
                                    type_definition=[
                                        WireTypeDef.TypeDefinition(
                                            value='systemc.h'
                                        ),
                                    ],
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
                Port(
                    name='rst_an',
                    wire=PortWireType(
                        direction=ComponentPortDirectionType.IN,
                        wire_type_defs=WireTypeDefs(
                            wire_type_def=[
                                WireTypeDef(
                                    type_name=WireTypeDef.TypeName(
                                        value='bool'
                                    ),
                                    view_ref=[
                                        WireTypeDef.ViewRef(
                                            value='TLM_PV'
                                        ),
                                    ]
                                ),
                            ]
                        )
                    )
                ),
            ]
        )
    ),
    choices=Choices(
        choice=[
            Choices.Choice(
                name='BaseAddressChoices',
                enumeration=[
                    Choices.Choice.Enumeration(
                        value='0x00000000',
                        text='0x00000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x10000000',
                        text='0x10000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x20000000',
                        text='0x20000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x30000000',
                        text='0x30000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x40000000',
                        text='0x40000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x50000000',
                        text='0x50000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x60000000',
                        text='0x60000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x70000000',
                        text='0x70000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x80000000',
                        text='0x80000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0x90000000',
                        text='0x90000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xa0000000',
                        text='0xa0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xb0000000',
                        text='0xb0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xc0000000',
                        text='0xc0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xd0000000',
                        text='0xd0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xe0000000',
                        text='0xe0000000'
                    ),
                    Choices.Choice.Enumeration(
                        value='0xf0000000',
                        text='0xf0000000'
                    ),
                ]
            ),
            Choices.Choice(
                name='RangeChoice',
                enumeration=[
                    Choices.Choice.Enumeration(
                        value='0',
                        text='0'
                    ),
                    Choices.Choice.Enumeration(
                        value='128',
                        text='128'
                    ),
                    Choices.Choice.Enumeration(
                        value='256',
                        text='256'
                    ),
                    Choices.Choice.Enumeration(
                        value='1024',
                        text='1k'
                    ),
                    Choices.Choice.Enumeration(
                        value='2048',
                        text='2k'
                    ),
                    Choices.Choice.Enumeration(
                        value='4096',
                        text='4k'
                    ),
                    Choices.Choice.Enumeration(
                        value='8192',
                        text='8k'
                    ),
                    Choices.Choice.Enumeration(
                        value='16384',
                        text='16k'
                    ),
                ]
            ),
        ]
    ),
    file_sets=FileSets(
        file_set=[
            FileSet(
                name='sourceCode',
                file=[
                    File(
                        name=IpxactUri(
                            value='tlmsrc/processor.cc'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.SYSTEM_CSOURCE
                            ),
                        ],
                        dependency=[
                            Dependency(
                                value='tlmsrc'
                            ),
                        ]
                    ),
                    File(
                        name=IpxactUri(
                            value='tlmsrc/processor.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.SYSTEM_CSOURCE
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True,
                            external_declarations=True
                        ),
                        logical_name=File.LogicalName(
                            value='processor'
                        ),
                        dependency=[
                            Dependency(
                                value='../../PV'
                            ),
                        ]
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/pv_slave_base.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/pv_target_port.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/pv_initiator_port.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                    File(
                        name=IpxactUri(
                            value='../../PV/user_types.h'
                        ),
                        file_type=[
                            FileType(
                                value=SimpleFileType.UNKNOWN
                            ),
                        ],
                        is_include_file=File.IsIncludeFile(
                            value=True
                        )
                    ),
                ]
            ),
        ]
    ),
    cpus=ComponentType.Cpus(
        cpu=[
            ComponentType.Cpus.Cpu(
                name='processor',
                range=UnsignedPositiveLongintExpression(
                    value='4 * (2 ** 30)'
                ),
                width=UnsignedPositiveIntExpression(
                    value='32'
                ),
                memory_map_ref='processor_MemoryMap'
            ),
        ]
    ),
    parameters=Parameters(
        parameter=[
            Parameter(
                name='code_file',
                value=Value(
                    value='master.tbl'
                ),
                parameter_id='code_file',
                prompt='File to read commands from:',
                config_groups=[
                    'requiredConfig',
                ],
                resolve=ParameterTypeResolve.USER
            ),
        ]
    )
)
