@startuml

class AdvResTicketingType {
    +AdvReservation : AdvReservation
    +AdvTicketing : AdvTicketing
    +AdvResInd : boolean
    +AdvTicketingInd : boolean
}
AdvResTicketingType +-- AdvReservation
class AdvReservation {
    +LatestTimeOfDay : string, time
    +LatestPeriod : string
    +LatestUnit : StayUnitType
}
AdvResTicketingType +-- AdvTicketing
class AdvTicketing {
    +FromResTimeOfDay : string, time
    +FromResPeriod : string
    +FromResUnit : StayUnitType
    +FromDepartTimeOfDay : string, time
    +FromDepartPeriod : string
    +FromDepartUnit : StayUnitType
}
enum AirTripType {
    OneWay = OneWay
    Return = Return
    Circle = Circle
    OpenJaw = OpenJaw
    Other = Other
}
class CompanyNameType {
    +value : string
    +CompanyShortName : string
    +TravelSector : string
    +Code : string
    +CodeContext : string
}
enum DepartureOrArrival {
    Departure = Departure
    Arrival = Arrival
}
class EquipmentType {
    +value : string
    +AirEquipType : string
    +ChangeofGauge : boolean
}
enum FareDirectionality {
    TO = TO
    FROM = FROM
}
enum OutboundOrInbound {
    Outbound = Outbound
    Inbound = Inbound
}
class PassengerTypeQuantityType {
    +TPA_Extensions : TPA_Extensions
    +Changeable : boolean
    +Index : int
}
PassengerTypeQuantityType *- TravelerCountType
PassengerTypeQuantityType +-- TPA_Extensions
class TPA_Extensions {
    +BirthDate : BirthDate
    +Age : Age
    +State : State
    +TotalNumber : TotalNumber
    +VoluntaryChanges : VoluntaryChanges
}
TPA_Extensions +-- BirthDate
class BirthDate {
    +Date : date
}
TPA_Extensions +-- Age
class Age {
    +Years : short
}
TPA_Extensions +-- State
class State {
    +Code : string
}
TPA_Extensions +-- TotalNumber
class TotalNumber {
    +Value : short
}
TPA_Extensions +-- VoluntaryChanges
class VoluntaryChanges {
    +Penalty : Penalty[]
    +Match : Match
}
VoluntaryChanges +-- Penalty
class Penalty {
    +Type : Type
    +Exclude : boolean
    +Application : Application
    +Amount : decimal
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
}
Penalty +-- Type
class Type {
    +Refund : string
    +Exchange : string
}
Type *- string
Penalty +-- Application
class Application {
    +After : string
    +Before : string
}
Application *- string
VoluntaryChanges +-- Match
class Match {
    +All : string
    +Any : string
    +Info : string
}
Match *- string
class StayRestrictionsType {
    +MinimumStay : MinimumStay
    +MaximumStay : MaximumStay
    +StayRestrictionsInd : boolean
}
StayRestrictionsType +-- MinimumStay
class MinimumStay {
    +ReturnTimeOfDay : string, time
    +MinStay : integer
    +StayUnit : StayUnitType
    +MinStayDate : string, time
}
StayRestrictionsType +-- MaximumStay
class MaximumStay {
    +ReturnType : ReturnType
    +ReturnTimeOfDay : string, time
    +MaxStay : integer
    +StayUnit : StayUnitType
    +MaxStayDate : string, time
}
MaximumStay +-- ReturnType
class ReturnType {
    +C : string
    +S : string
}
ReturnType *- string
enum StayUnitType {
    Minutes = Minutes
    Hours = Hours
    Days = Days
    Months = Months
    MON = MON
    TUES = TUES
    WED = WED
    THU = THU
    FRI = FRI
    SAT = SAT
    SUN = SUN
}
class TravelerCountType {
    +Age : integer
    +Code : string, string
    +CodeContext : string
    +URI : anyURI
    +Quantity : integer
}
class VoluntaryChangesType {
    +Penalty : Penalty
    +VolChangeInd : boolean
}
VoluntaryChangesType +-- Penalty
class Penalty {
    +PenaltyType : string
    +DepartureStatus : string
    +Amount : decimal
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
    +Percent : decimal
}

@enduml
