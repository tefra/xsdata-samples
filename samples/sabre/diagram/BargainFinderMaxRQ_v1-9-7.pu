@startuml

class AddressType {
    +StreetNmbr : StreetNmbrType
    +BldgRoom : string
    +AddressLine : string[]
    +CityName : string
    +PostalCode : string
    +County : string
    +StateProv : StateProvType
    +CountryName : CountryNameType
    +FormattedInd : boolean
    +ShareSynchInd : ShareSynchInd
    +ShareMarketInd : ShareMarketInd
    +Type : string
}
AddressType +-- ShareSynchInd
class ShareSynchInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareSynchInd *- NMTOKEN
AddressType +-- ShareMarketInd
class ShareMarketInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareMarketInd *- NMTOKEN
class AirSearchPrefsType {
    +VendorPref : CompanyNamePrefType[]
    +FlightTypePref : FlightTypePrefType
    +FareRestrictPref : FareRestrictPref[]
    +EquipPref : EquipmentTypePref[]
    +CabinPref : CabinPrefType[]
    +TicketDistribPref : TicketDistribPrefType[]
    +TPA_Extensions : TPA_Extensions
    +AncillaryFees : AncillaryFees
    +FrequentFlyer : FrequentFlyer[]
    +SpanishFamilyDiscount : SpanishFamilyDiscount
    +InterlineBrands : InterlineBrandsType
    +SmokingAllowed : boolean
    +OnTimeRate : decimal
    +ETicketDesired : boolean
    +ValidInterlineTicket : boolean
    +MaxStopsQuantity : integer
    +UseAllFlights : boolean
    +AllFlightsData : boolean
    +Hybrid : boolean
}
AirSearchPrefsType +-- FareRestrictPref
class FareRestrictPref {
    +AdvResTicketing : AdvResTicketingType
    +StayRestrictions : StayRestrictionsType
    +VoluntaryChanges : VoluntaryChangesType
}
FareRestrictPref *- FareRestrictPrefType
AirSearchPrefsType +-- TPA_Extensions
class TPA_Extensions {
    +DepartureWindow : string
    +ArrivalWindow : string
    +ExcludeVendorPref : ExcludeVendorPref[]
    +IncludeAlliancePref : AllianceType[]
    +ExcludeAlliancePref : AllianceType[]
    +NumTrips : NumTripsType
    +AltCitiesCombinations : AltCitiesCombinationsType
    +NumTripsWithRouting : NumTripsWithRouting
    +OnlineIndicator : OnlineIndicator
    +InterlineIndicator : InterlineIndicator
    +TripType : TripType
    +MaxPrice : MaxPrice
    +ContentType : ContentType
    +DomesticLayoverTime : DomesticLayoverTime
    +LongConnectTime : LongConnectTime
    +LongConnectPoints : LongConnectPoints
    +AirServiceOnly : AirServiceOnly
    +JetServiceOnly : JetServiceOnly
    +SameConnectionAirportOnly : SameConnectionAirportOnly
    +SameOriginAirportOnly : SameOriginAirportOnly
    +SameTurnaroundAirportOnly : SameTurnaroundAirportOnly
    +AircraftTypePenalty : AircraftTypePenalty
    +AlternateAirportPenalty : AlternateAirportPenalty
    +FareAmountThreshold : FareAmountThreshold
    +numOfLowFareSol : numOfLowFareSol
    +numOfMustPriceOnlSol : numOfMustPriceOnlSol
    +numOfMustPriceInrlSol : numOfMustPriceInrlSol
    +numOfMustPriceNStpOnlSol : numOfMustPriceNStpOnlSol
    +numOfMustPriceNStpInrlSol : numOfMustPriceNStpInrlSol
    +numOfMustPriceSStopOnlSol : numOfMustPriceSStopOnlSol
    +stpPenaltyInUSD : stpPenaltyInUSD
    +durPenaltyInUSD : durPenaltyInUSD
    +depPenaltyInUSD : depPenaltyInUSD
    +maxAllowedMustPriceOveragePerCrr : maxAllowedMustPriceOveragePerCrr
    +fltOptMustPriceReuseLimit : fltOptMustPriceReuseLimit
    +upperBoundMustPriceFactorForNotNonStp : upperBoundMustPriceFactorForNotNonStp
    +upperBoundLFSFactor : upperBoundLFSFactor
    +numOfMustPriceNStp1StpOnlSol : numOfMustPriceNStp1StpOnlSol
    +numOfMustPriceNStp1StpInrlSol : numOfMustPriceNStp1StpInrlSol
    +upperBoundMustPriceFactorForNonStp : upperBoundMustPriceFactorForNonStp
    +maxAllowedLFSOveragePerCrrPercent : maxAllowedLFSOveragePerCrrPercent
    +targetMinNumOfLFSOnlSolPerCrr : targetMinNumOfLFSOnlSolPerCrr
    +targetMinNumOfLFSTotOnlSolPercent : targetMinNumOfLFSTotOnlSolPercent
    +fltOptLFSReuseLimitForNonAVS : fltOptLFSReuseLimitForNonAVS
    +fltOptLFSReuseLimitForAVS : fltOptLFSReuseLimitForAVS
    +avsPenaltyCrrs : avsPenaltyCrrs
    +maxNumOfNonStpOnlSol : maxNumOfNonStpOnlSol
    +maxNumOfNonStpInrlSol : maxNumOfNonStpInrlSol
    +maxNumOfSingleStpOnlSol : maxNumOfSingleStpOnlSol
    +maxNumOf2PlusStpSol : maxNumOf2PlusStpSol
    +minAllowedOveragePerCrrPercent : minAllowedOveragePerCrrPercent
    +minAllowedOveragePerCrr : minAllowedOveragePerCrr
    +maxRelFareLvlOfxForNonStp : maxRelFareLvlOfxForNonStp
    +maxRelFareLvlOfxForCnx : maxRelFareLvlOfxForCnx
    +numOfMustPrice2PlusStpSol : numOfMustPrice2PlusStpSol
    +ItineraryNumberThreshold : ItineraryNumberThreshold
    +XOFares : XOFaresType
    +ExemptAllTaxes : ExemptAllTaxes
    +ExemptAllTaxesAndFees : ExemptAllTaxesAndFees
    +Taxes : Taxes
    +ExemptTax : TaxCodeType[]
    +FlightStopsAsConnections : FlightStopsAsConnectionsType
    +TicketingSumOfLocals : TicketingSumOfLocals
    +MultiAirportCodes : MultiAirportCodes
    +JumpCabinLogic : JumpCabinLogicType
    +KeepSameCabin : KeepSameCabinType
    +GoverningCarrierOverride : GoverningCarrierOverrideType
    +ExcludeCallDirectCarriers : ExcludeCallDirectCarriers
    +ValidatingCarrier : ValidatingCarrierType
    +ValidatingCarrierCheck : ValidatingCarrierCheck
    +SettlementMethod : string
    +FlightRepeatLimit : FlightRepeatLimit
    +FlexibleFares : FlexibleFaresType
    +DiversityParameters : DiversityParameters
    +AdditionalFareLimit : AdditionalFareLimit
    +FareFocusRules : FareFocusRules
    +SellingLevels : SellingLevels
    +Budget : Budget
    +OptionsPerDatePairList : OptionsPerDatePairList
    +CountryPref : CountryPref[]
    +RetailerRules : RetailerRulesType
}
TPA_Extensions +-- ExcludeVendorPref
class ExcludeVendorPref {
    +Code : string
}
TPA_Extensions +-- NumTripsWithRouting
class NumTripsWithRouting {
    +Number : short
}
TPA_Extensions +-- TripType
class TripType {
    +Value : AirTripType
}
TPA_Extensions +-- MaxPrice
class MaxPrice {
    +Value : decimal
}
TPA_Extensions +-- ContentType
class ContentType {
    +Type : Type
}
ContentType +-- Type
class Type {
    +Air : string
    +Rail : string
}
Type *- string
TPA_Extensions +-- DomesticLayoverTime
class DomesticLayoverTime {
    +Hours : short
}
TPA_Extensions +-- LongConnectTime
class LongConnectTime {
    +Min : short
    +Max : short
    +Enable : boolean
}
TPA_Extensions +-- LongConnectPoints
class LongConnectPoints {
    +Min : short
    +Max : short
}
TPA_Extensions +-- AirServiceOnly
class AirServiceOnly {
    +Ind : boolean
}
TPA_Extensions +-- JetServiceOnly
class JetServiceOnly {
    +Ind : boolean
}
TPA_Extensions +-- SameConnectionAirportOnly
class SameConnectionAirportOnly {
    +Ind : boolean
}
TPA_Extensions +-- SameOriginAirportOnly
class SameOriginAirportOnly {
    +Ind : boolean
}
TPA_Extensions +-- SameTurnaroundAirportOnly
class SameTurnaroundAirportOnly {
    +Ind : boolean
}
TPA_Extensions +-- AircraftTypePenalty
class AircraftTypePenalty {
    +Value : short
}
TPA_Extensions +-- AlternateAirportPenalty
class AlternateAirportPenalty {
    +Value : short
}
TPA_Extensions +-- FareAmountThreshold
class FareAmountThreshold {
    +Value : float
}
TPA_Extensions +-- numOfLowFareSol
class numOfLowFareSol {
    +Value : short
}
TPA_Extensions +-- numOfMustPriceOnlSol
class numOfMustPriceOnlSol {
    +Value : short
}
TPA_Extensions +-- numOfMustPriceInrlSol
class numOfMustPriceInrlSol {
    +Value : short
}
TPA_Extensions +-- numOfMustPriceNStpOnlSol
class numOfMustPriceNStpOnlSol {
    +Value : short
}
TPA_Extensions +-- numOfMustPriceNStpInrlSol
class numOfMustPriceNStpInrlSol {
    +Value : short
}
TPA_Extensions +-- numOfMustPriceSStopOnlSol
class numOfMustPriceSStopOnlSol {
    +Value : short
}
TPA_Extensions +-- stpPenaltyInUSD
class stpPenaltyInUSD {
    +Value : short
}
TPA_Extensions +-- durPenaltyInUSD
class durPenaltyInUSD {
    +Value : short
}
TPA_Extensions +-- depPenaltyInUSD
class depPenaltyInUSD {
    +Value : short
}
TPA_Extensions +-- maxAllowedMustPriceOveragePerCrr
class maxAllowedMustPriceOveragePerCrr {
    +Value : float
}
TPA_Extensions +-- fltOptMustPriceReuseLimit
class fltOptMustPriceReuseLimit {
    +Value : short
}
TPA_Extensions +-- upperBoundMustPriceFactorForNotNonStp
class upperBoundMustPriceFactorForNotNonStp {
    +Value : float
}
TPA_Extensions +-- upperBoundLFSFactor
class upperBoundLFSFactor {
    +Value : float
}
TPA_Extensions +-- numOfMustPriceNStp1StpOnlSol
class numOfMustPriceNStp1StpOnlSol {
    +Value : short
}
TPA_Extensions +-- numOfMustPriceNStp1StpInrlSol
class numOfMustPriceNStp1StpInrlSol {
    +Value : short
}
TPA_Extensions +-- upperBoundMustPriceFactorForNonStp
class upperBoundMustPriceFactorForNonStp {
    +Value : float
}
TPA_Extensions +-- maxAllowedLFSOveragePerCrrPercent
class maxAllowedLFSOveragePerCrrPercent {
    +Value : float
}
TPA_Extensions +-- targetMinNumOfLFSOnlSolPerCrr
class targetMinNumOfLFSOnlSolPerCrr {
    +Value : short
}
TPA_Extensions +-- targetMinNumOfLFSTotOnlSolPercent
class targetMinNumOfLFSTotOnlSolPercent {
    +Value : float
}
TPA_Extensions +-- fltOptLFSReuseLimitForNonAVS
class fltOptLFSReuseLimitForNonAVS {
    +Value : short
}
TPA_Extensions +-- fltOptLFSReuseLimitForAVS
class fltOptLFSReuseLimitForAVS {
    +Value : short
}
TPA_Extensions +-- avsPenaltyCrrs
class avsPenaltyCrrs {
    +Value : string
}
TPA_Extensions +-- maxNumOfNonStpOnlSol
class maxNumOfNonStpOnlSol {
    +Value : short
}
TPA_Extensions +-- maxNumOfNonStpInrlSol
class maxNumOfNonStpInrlSol {
    +Value : short
}
TPA_Extensions +-- maxNumOfSingleStpOnlSol
class maxNumOfSingleStpOnlSol {
    +Value : short
}
TPA_Extensions +-- maxNumOf2PlusStpSol
class maxNumOf2PlusStpSol {
    +Value : short
}
TPA_Extensions +-- minAllowedOveragePerCrrPercent
class minAllowedOveragePerCrrPercent {
    +Value : float
}
TPA_Extensions +-- minAllowedOveragePerCrr
class minAllowedOveragePerCrr {
    +Value : short
}
TPA_Extensions +-- maxRelFareLvlOfxForNonStp
class maxRelFareLvlOfxForNonStp {
    +Value : float
}
TPA_Extensions +-- maxRelFareLvlOfxForCnx
class maxRelFareLvlOfxForCnx {
    +Value : float
}
TPA_Extensions +-- numOfMustPrice2PlusStpSol
class numOfMustPrice2PlusStpSol {
    +Value : short
}
TPA_Extensions +-- ItineraryNumberThreshold
class ItineraryNumberThreshold {
    +Value : float
}
TPA_Extensions +-- TicketingSumOfLocals
class TicketingSumOfLocals {
    +Enable : boolean
}
TPA_Extensions +-- MultiAirportCodes
class MultiAirportCodes {
    +EnableOpenJaw : boolean
}
TPA_Extensions +-- ExcludeCallDirectCarriers
class ExcludeCallDirectCarriers {
    +Enabled : boolean
}
TPA_Extensions +-- ValidatingCarrierCheck
class ValidatingCarrierCheck {
    +SettlementValidation : SettlementValidation
    +IETValidation : IETValidation
    +Carrier : Carrier[]
    +Country : Country[]
}
ValidatingCarrierCheck +-- SettlementValidation
class SettlementValidation {
    +Ind : boolean
}
ValidatingCarrierCheck +-- IETValidation
class IETValidation {
    +Ind : boolean
}
ValidatingCarrierCheck +-- Carrier
class Carrier {
    +Code : string
}
ValidatingCarrierCheck +-- Country
class Country {
    +Code : string
}
TPA_Extensions +-- FlightRepeatLimit
class FlightRepeatLimit {
    +Value : unsignedShort
}
TPA_Extensions +-- DiversityParameters
class DiversityParameters {
    +Weightings : Weightings
    +TimeOfDayDistribution : TimeOfDayDistribution
    +InboundOutboundPairing : unsignedShort
    +AdditionalNonStopsNumber : unsignedShort
    +AdditionalNonStopsPercentage : unsignedShort
}
DiversityParameters +-- Weightings
class Weightings {
    +PriceWeight : unsignedShort
    +TravelTimeWeight : unsignedShort
}
DiversityParameters +-- TimeOfDayDistribution
class TimeOfDayDistribution {
    +TimeOfDayRange : TimeOfDayRange[]
}
TimeOfDayDistribution +-- TimeOfDayRange
class TimeOfDayRange {
    +Begin : string
    +End : string
    +Percentage : unsignedShort
}
TPA_Extensions +-- AdditionalFareLimit
class AdditionalFareLimit {
    +Value : unsignedInt
}
TPA_Extensions +-- FareFocusRules
class FareFocusRules {
    +Exclude : boolean
}
TPA_Extensions +-- SellingLevels
class SellingLevels {
    +SellingLevelRules : SellingLevelRules
    +ShowFareAmounts : ShowFareAmounts
}
SellingLevels +-- SellingLevelRules
class SellingLevelRules {
    +Ignore : boolean
}
SellingLevels +-- ShowFareAmounts
class ShowFareAmounts {
    +Original : boolean
    +Adjusted : boolean
}
TPA_Extensions +-- Budget
class Budget {
    +MinimumPrice : string
    +MaximumPrice : string
    +RelativePriceThreshold : string
}
TPA_Extensions +-- OptionsPerDatePairList
class OptionsPerDatePairList {
    +OptionsPerDatePair : OptionsPerDatePairType[]
}
TPA_Extensions +-- CountryPref
class CountryPref {
    +Code : string
    +PreferLevel : string
}
TPA_Extensions +-- ExemptAllTaxes
class ExemptAllTaxes {
    +Value : boolean
}
TPA_Extensions +-- ExemptAllTaxesAndFees
class ExemptAllTaxesAndFees {
    +Value : boolean
}
TPA_Extensions +-- Taxes
class Taxes {
    +Tax : TaxCodeAmountType[]
}
TPA_Extensions +-- OnlineIndicator
class OnlineIndicator {
    +Ind : boolean
}
TPA_Extensions +-- InterlineIndicator
class InterlineIndicator {
    +Ind : boolean
}
AirSearchPrefsType +-- AncillaryFees
class AncillaryFees {
    +AncillaryFeeGroup : AncillaryFeeGroup[]
    +Enable : boolean
    +Summary : boolean
}
AncillaryFees +-- AncillaryFeeGroup
class AncillaryFeeGroup {
    +Code : string
    +Count : string
}
AirSearchPrefsType +-- FrequentFlyer
class FrequentFlyer {
    +Status : short
    +AirlineCode : string
}
AirSearchPrefsType +-- SpanishFamilyDiscount
class SpanishFamilyDiscount {
    +Level : Level
}
SpanishFamilyDiscount +-- Level
class Level {
    +1 : string
    +2 : string
}
Level *- short
class AirTravelerType {
    +ProfileRef : ProfileRef
    +PersonName : PersonNameType
    +Telephone : TelephoneType[]
    +Email : EmailType[]
    +Address : AddressType[]
    +CustLoyalty : CustLoyaltyType[]
    +Document : DocumentType[]
    +PassengerTypeQuantity : PassengerTypeQuantityType
    +TravelerRefNumber : TravelerRefNumberType
    +FlightSegmentRPHs : FlightSegmentRPHs
    +Gender : Gender
    +ShareSynchInd : ShareSynchInd
    +ShareMarketInd : ShareMarketInd
    +BirthDate : date
    +CurrencyCode : string
    +PassengerTypeCode : string
    +AccompaniedByInfant : boolean
}
AirTravelerType +-- ProfileRef
class ProfileRef {
    +UniqueID : UniqueID_Type
}
AirTravelerType +-- FlightSegmentRPHs
class FlightSegmentRPHs {
    +FlightSegmentRPH : string[]
}
AirTravelerType +-- ShareSynchInd
class ShareSynchInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareSynchInd *- NMTOKEN
AirTravelerType +-- ShareMarketInd
class ShareMarketInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareMarketInd *- NMTOKEN
AirTravelerType +-- Gender
class Gender {
    +Male : string
    +Female : string
    +Unknown : string
}
Gender *- NMTOKEN
class AirlineType {
    +Operating : string
    +Marketing : string
}
class AllianceType {
    +Code : string
}
enum AltCitiesCombinationsLocationsType {
    All = All
    Main = Main
}
class AltCitiesCombinationsType {
    +Origins : AltCitiesCombinationsLocationsType
    +Destinations : AltCitiesCombinationsLocationsType
}
class ApplyResidentDiscountType {
    +Ind : boolean
}
class ArunkType {
    +OriginLocation : RequestLocationType
    +DestinationLocation : RequestLocationType
    +SideTrip : SideTripType
}
class AwardShoppingType {
    +Enable : boolean
    +UseRAS : boolean
}
class BillingInformationType {
    +UserStation : short
    +UserBranch : short
    +PartitionID : string
    +UserSetAddress : string
    +AAACity : string
    +AgentSineIn : string
    +ServiceName : string
    +ActionCode : string
}
class BookingChannelType {
    +Type : string
    +Primary : boolean
}
class BookingClassPrefType {
    +ResBookDesigCode : string
    +PreferLevel : PreferLevelType
}
class BrandType {
    +Code : string
}
class CabinPrefType {
    +PreferLevel : PreferLevelType
    +Cabin : CabinType
}
enum CabinType {
    PremiumFirst = PremiumFirst
    First = First
    PremiumBusiness = PremiumBusiness
    Business = Business
    PremiumEconomy = PremiumEconomy
    Economy = Economy
    Y = Y
    S = S
    C = C
    J = J
    F = F
    P = P
}
class CachePartitionGroupType {
    +Partition : CachePartitionType[]
}
class CachePartitionType {
    +Name : string
}
enum CarrierType {
    Marketing = Marketing
    Operating = Operating
}
class CompanyNamePrefType {
    +PreferLevel : PreferLevelType
    +Type : CarrierType
}
CompanyNamePrefType *- CompanyNameType
class ConnectionType {
    +ConnectionLocation : ConnectionLocation[]
}
ConnectionType +-- ConnectionLocation
class ConnectionLocation {
    +Inclusive : boolean
    +PreferLevel : PreferLevelType
    +MinChangeTime : nonNegativeInteger
    +ConnectionInfo : ConnectionInfo
}
ConnectionLocation *- RequestLocationType
ConnectionLocation +-- ConnectionInfo
class ConnectionInfo {
    +Via : string
    +Stop : string
    +Change : string
}
ConnectionInfo *- string
class CountryNameType {
    +value : string
    +Code : string
}
class CustLoyaltyType {
    +ShareSynchInd : ShareSynchInd
    +ShareMarketInd : ShareMarketInd
    +ProgramID : string
    +MembershipID : string
    +TravelSector : string
    +LoyalLevel : string
    +SingleVendorInd : SingleVendorInd
    +SignupDate : date
    +EffectiveDate : date
    +ExpireDate : date
    +RPH : string
}
CustLoyaltyType +-- SingleVendorInd
class SingleVendorInd {
    +SingleVndr : string
    +Alliance : string
}
SingleVendorInd *- NMTOKEN
CustLoyaltyType +-- ShareSynchInd
class ShareSynchInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareSynchInd *- NMTOKEN
CustLoyaltyType +-- ShareMarketInd
class ShareMarketInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareMarketInd *- NMTOKEN
class DateRangeType {
    +OutboundDate : date
    +DateRange : short
}
class DepartureDaysType {
    +Value : string
}
class DiversityControlType {
    +LowFareBucket : LowFareBucket
    +Dimensions : Dimensions
}
DiversityControlType +-- LowFareBucket
class LowFareBucket {
    +Options : string
    +FareCutOff : string
}
DiversityControlType +-- Dimensions
class Dimensions {
    +TravelTime : TravelTime
    +Carrier : Carrier
    +OperatingDuplicate : OperatingDuplicate
    +InboundOutboundPairing : InboundOutboundPairing
    +TimeOfDay : TimeOfDay
    +StopsNumber : StopsNumber
    +PriceWeight : unsignedShort
}
Dimensions +-- TravelTime
class TravelTime {
    +Weight : integer
}
Dimensions +-- Carrier
class Carrier {
    +Default : Default
    +Override : Override[]
    +Weight : integer
    +OnlineIndicator : boolean
}
Carrier +-- Default
class Default {
    +Options : string
}
Carrier +-- Override
class Override {
    +Code : string
    +Options : string
}
Dimensions +-- OperatingDuplicate
class OperatingDuplicate {
    +PreferredCarrier : PreferredCarrier[]
    +Weight : integer
}
OperatingDuplicate +-- PreferredCarrier
class PreferredCarrier {
    +Code : string
}
Dimensions +-- InboundOutboundPairing
class InboundOutboundPairing {
    +Weight : integer
    +Duplicates : positiveInteger
}
Dimensions +-- TimeOfDay
class TimeOfDay {
    +Distribution : Distribution[]
    +Weight : integer
}
TimeOfDay +-- Distribution
class Distribution {
    +Range : Range[]
    +Direction : OutboundOrInbound
    +Leg : positiveInteger
    +Endpoint : DepartureOrArrival
}
Distribution +-- Range
class Range {
    +Begin : string
    +End : string
    +Options : string
}
Dimensions +-- StopsNumber
class StopsNumber {
    +Weight : integer
}
class DocumentType {
    +DocHolderName : string
    +DocLimitations : string[]
    +ShareSynchInd : ShareSynchInd
    +ShareMarketInd : ShareMarketInd
    +DocIssueAuthority : string
    +DocIssueLocation : string
    +DocID : string
    +DocType : string
    +Gender : Gender
    +BirthDate : date
    +EffectiveDate : date
    +ExpireDate : date
}
DocumentType +-- Gender
class Gender {
    +Male : string
    +Female : string
    +Unknown : string
}
Gender *- NMTOKEN
DocumentType +-- ShareSynchInd
class ShareSynchInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareSynchInd *- NMTOKEN
DocumentType +-- ShareMarketInd
class ShareMarketInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareMarketInd *- NMTOKEN
class EmailType {
    +value : string
    +ShareSynchInd : ShareSynchInd
    +ShareMarketInd : ShareMarketInd
    +DefaultInd : boolean
    +EmailType : string
}
EmailType +-- ShareSynchInd
class ShareSynchInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareSynchInd *- NMTOKEN
EmailType +-- ShareMarketInd
class ShareMarketInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareMarketInd *- NMTOKEN
class EquipmentTypePref {
    +PreferLevel : PreferLevelType
    +WideBody : boolean
}
EquipmentTypePref *- EquipmentType
class ExchangeAirSearchPrefsType {
    +TPA_Extensions : ExchangeTravelPreferencesTPA_ExtensionsType
    +ValidInterlineTicket : boolean
}
class ExchangeFareType {
    +BaseFareAmount : decimal
    +NonRefundableAmount : decimal
    +BaseFareCurrency : string
    +FareCalcCurrency : string
    +ValidatingCarrier : string
    +ROE : double
}
class ExchangeOriginDestinationFlightType {
    +ClassOfService : string
    +Number : short
    +DepartureDateTime : string
    +ArrivalDateTime : string
    +MarriageStatus : string
    +Type : string
    +Flown : boolean
    +Fare : Fare
    +PlusUp : PlusUpType[]
    +OriginLocation : RequestLocationType
    +DestinationLocation : RequestLocationType
    +Airline : AirlineType
    +SideTrip : SideTripType
    +Reservation : ReservationType
    +MileageDisplay : MileageDisplayType[]
    +BookingDateTime : string
}
ExchangeOriginDestinationFlightType +-- Fare
class Fare {
    +Adjustment : Adjustment
}
Fare *- FareDetailsType
Fare +-- Adjustment
class Adjustment {
    +Value : string
    +Currency : string
    +Group : short
}
class ExchangeOriginDestinationInformationType {
    +Flight : ExchangeOriginDestinationFlightType[]
    +DateFlexibility : DateFlexibility[]
    +SisterDestinationLocation : RequestLocationType[]
    +SisterDestinationMileage : SisterDestinationMileage
    +SisterOriginLocation : RequestLocationType[]
    +SisterOriginMileage : SisterOriginMileage
    +SegmentType : SegmentType
    +AlternateTime : AlternateTime
    +MaxOneWayOptions : MaxOneWayOptions
    +NumOneWayOptions : NumOneWayOptions
    +CabinPref : CabinPrefType
    +ConnectionTime : ConnectionTime
    +TotalTravelTime : TotalTravelTime
}
ExchangeOriginDestinationInformationType *- OriginDestinationInformationType
ExchangeOriginDestinationInformationType +-- DateFlexibility
class DateFlexibility {
    +NbrOfDays : int
    +Plus : int
    +Minus : int
    +Validate : boolean
}
ExchangeOriginDestinationInformationType +-- SegmentType
class SegmentType {
    +Code : Code
}
SegmentType +-- Code
class Code {
    +ARUNK : string
    +O : string
    +X : string
}
Code *- string
ExchangeOriginDestinationInformationType +-- AlternateTime
class AlternateTime {
    +PlusMinus : integer
    +Plus : integer
    +Minus : integer
}
ExchangeOriginDestinationInformationType +-- MaxOneWayOptions
class MaxOneWayOptions {
    +Value : unsignedShort
}
ExchangeOriginDestinationInformationType +-- NumOneWayOptions
class NumOneWayOptions {
    +Number : unsignedShort
}
ExchangeOriginDestinationInformationType +-- ConnectionTime
class ConnectionTime {
    +Min : nonNegativeInteger
    +Max : nonNegativeInteger
    +ExcludedConnectionBegin : string
    +ExcludedConnectionEnd : string
    +EnableExcludedConnection : boolean
}
ExchangeOriginDestinationInformationType +-- TotalTravelTime
class TotalTravelTime {
    +Min : unsignedInt
    +Max : unsignedInt
}
ExchangeOriginDestinationInformationType +-- SisterDestinationMileage
class SisterDestinationMileage {
    +Number : nonNegativeInteger
}
ExchangeOriginDestinationInformationType +-- SisterOriginMileage
class SisterOriginMileage {
    +Number : nonNegativeInteger
}
class ExchangePOSType {
    +Source : ExchangeSourceType
}
class ExchangeSettingsType {
    +RepriceCurrentItin : boolean
    +AttachExchangeInfo : boolean
    +ReissueExchange : ReissueExchange
    +BrandedResults : boolean
    +MIPTimeoutThreshold : long
    +RequestType : RequestType
}
ExchangeSettingsType +-- ReissueExchange
class ReissueExchange {
    +A : string
}
ReissueExchange *- string
ExchangeSettingsType +-- RequestType
class RequestType {
    +basic : string
    +context : string
}
RequestType *- string
class ExchangeSourceType {
    +BookingChannel : SourceBookingChannelType
    +AgentCity : string
    +MainTravelAgencyPCC : string
    +Carrier : string
    +HostCarrier : string
    +ETicketCapable : boolean
    +CoHostID : short
    +AgentSine : string
    +PseudoCityCode : string
    +ISOCountry : string
    +ISOCurrency : string
    +AgentDutyCode : string
    +AirlineVendorID : string
    +AirportCode : string
    +FirstDepartPoint : string
    +ERSP_UserID : string
    +PersonalCityCode : string
    +AccountingCode : string
    +OfficeCode : string
    +DefaultTicketingCarrier : string
    +AirlineChannelCode : string
    +AgentDepartmentCode : string
    +AgentFunction : string
    +TravelAgencyIATA : string
    +HomeAgencyIATA : string
    +AgentIATA : string
    +VendorCRSCode : string
    +AgentDuty : string
    +AbacusUser : boolean
}
class ExchangeTPA_ExtensionsType {
    +AwardShopping : AwardShoppingType
}
class ExchangeTravelPreferencesTPA_ExtensionsType {
    +ExemptAllTaxes : ExemptAllTaxes
    +ExemptAllTaxesAndFees : ExemptAllTaxesAndFees
    +Taxes : Taxes
    +ExemptTax : TaxCodeType[]
    +SettlementMethod : string
}
ExchangeTravelPreferencesTPA_ExtensionsType +-- ExemptAllTaxes
class ExemptAllTaxes {
    +Value : boolean
}
ExchangeTravelPreferencesTPA_ExtensionsType +-- ExemptAllTaxesAndFees
class ExemptAllTaxesAndFees {
    +Value : boolean
}
ExchangeTravelPreferencesTPA_ExtensionsType +-- Taxes
class Taxes {
    +Tax : TaxCodeAmountType[]
}
class ExchangeType {
    +Fare : ExchangeFareType
    +POS : ExchangePOSType
    +OriginDestinationInformation : ExchangeOriginDestinationInformationType[]
    +Arunk : ArunkType[]
    +TravelPreferences : ExchangeAirSearchPrefsType
    +TravelerInfoSummary : TravelerInfoSummaryType
    +TPA_Extensions : ExchangeTPA_ExtensionsType
    +OriginalTktIssueDateTime : string
    +ExchangedTktIssueDateTime : string
    +PreviousExchangeDateTime : string
    +NumberOfTaxBoxes : short
    +BypassAdvancePurchaseOption : string
}
class FareDetailsType {
    +ComponentNo : short
    +BasisCode : string
    +Amount : decimal
    +Vendor : string
    +SourceVendor : string
    +Tariff : string
    +RuleNumber : string
    +BrandID : token
    +ProgramID : int
}
class FareOptionalDetailsType {
    +ComponentNo : short
    +BasisCode : string
    +Amount : decimal
    +Vendor : string
    +SourceVendor : string
    +Tariff : string
    +RuleNumber : string
    +BrandID : token
    +ProgramID : int
}
class FareRestrictPrefType {
    +PreferLevel : PreferLevelType
    +FareRestriction : string
}
class FlexibleFaresType {
    +FareParameters : FareParameters[]
}
FlexibleFaresType +-- FareParameters
class FareParameters {
    +ExcludeRestricted : ExcludeRestricted
    +ResTicketing : ResTicketing
    +MinMaxStay : MinMaxStay
    +RefundPenalty : RefundPenalty
    +PublicFare : PublicFare
    +PrivateFare : PrivateFare
    +Cabin : Cabin
    +PassengerType : PassengerType
    +NegotiatedFaresOnly : NegotiatedFaresOnly
    +XOFares : XOFares
    +PassengerTypeQuantity : PassengerTypeQuantityType[]
    +JumpCabinLogic : JumpCabinLogicType
    +KeepSameCabin : KeepSameCabinType
    +CorporateID : CorporateID[]
    +AccountCode : AccountCode[]
}
FareParameters +-- ExcludeRestricted
class ExcludeRestricted {
    +Ind : boolean
}
FareParameters +-- ResTicketing
class ResTicketing {
    +Ind : boolean
}
FareParameters +-- MinMaxStay
class MinMaxStay {
    +Ind : boolean
}
FareParameters +-- RefundPenalty
class RefundPenalty {
    +Ind : boolean
}
FareParameters +-- PublicFare
class PublicFare {
    +Ind : boolean
}
FareParameters +-- PrivateFare
class PrivateFare {
    +Ind : boolean
}
FareParameters +-- Cabin
class Cabin {
    +Type : CabinType
}
FareParameters +-- PassengerType
class PassengerType {
    +Code : string, string
}
FareParameters +-- NegotiatedFaresOnly
class NegotiatedFaresOnly {
    +Ind : boolean
}
FareParameters +-- XOFares
class XOFares {
    +Ind : boolean
}
FareParameters +-- CorporateID
class CorporateID {
    +Code : string
}
FareParameters +-- AccountCode
class AccountCode {
    +Code : string
}
class FlightStopsAsConnectionsType {
    +Ind : boolean
}
class FlightTypePrefType {
    +PreferLevel : PreferLevelType
    +FlightType : FlightTypeType
    +MaxConnections : nonNegativeInteger, boolean
}
enum FlightTypeType {
    Nonstop = Nonstop
    Direct = Direct
    Connection = Connection
}
class GlobalDateTimeType {
    +TimeWindowStart : string
    +TimeWindowEnd : string
    +TimeTolerance : nonNegativeInteger
    +DateFlexibility : nonNegativeInteger
    +MaxOptionsPerDate : nonNegativeInteger
    +ConnectionTimeMin : nonNegativeInteger
    +ConnectionTimeMax : nonNegativeInteger
    +DateTime : string
}
class GoverningCarrierOverrideType {
    +AirlineCode : string
}
class IncludeVendorPrefType {
    +Code : string
}
class InterlineBrandsType {
    +Brand : BrandType[]
    +ChangeBrandForSoldout : boolean
}
class JumpCabinLogicType {
    +Disabled : boolean
}
class KeepSameCabinType {
    +Enabled : boolean
}
class MileageDisplayType {
    +Type : string
    +City : string
    +Surcharge : short
}
class NumTripsType {
    +Number : short
    +PerDateMin : unsignedShort
    +PerDateMax : unsignedShort
    +PerMarket : unsignedShort
    +PerMonth : unsignedShort
}
class OTA_AirLowFareSearchRQ {
    +POS : POS_Type
    +OriginDestinationInformation : OriginDestinationInformation[]
    +Leg : Leg[]
    +TravelPreferences : AirSearchPrefsType
    +TravelerInfoSummary : TravelerInfoSummaryType
    +TPA_Extensions : TPA_Extensions
    +EchoToken : string, string
    +TimeStamp : string
    +Target : Target
    +Version : string
    +TransactionIdentifier : string
    +SequenceNmbr : positiveInteger, boolean
    +TransactionStatusCode : TransactionStatusCode
    +AltLangID : language
    +PrimaryLangID : language
    +MaxResponses : positiveInteger, integer
    +DirectFlightsOnly : boolean
    +AvailableFlightsOnly : boolean
    +ResponseType : string
    +ResponseVersion : string
    +SeparateMessages : boolean
    +TruncateMessages : boolean
}
OTA_AirLowFareSearchRQ +-- TPA_Extensions
class TPA_Extensions {
    +IntelliSellTransaction : TransactionType
    +DiversityControl : DiversityControlType
    +MessagingDetails : MessagingDetails
    +AlternateAirportCities : AlternateAirportCities[]
    +AlternateAirportMileage : AlternateAirportMileage
    +AwardShopping : AwardShoppingType
    +Billing : BillingInformationType
    +ExchangeSettings : ExchangeSettingsType
    +Exchange : ExchangeType[]
    +SplitTaxes : SplitTaxes
    +AlternateDatesProcessing : AlternateDatesProcessing
    +ItineraryCache : ItineraryCache
    +MultiTicket : MultiTicket
    +Partitions : Partitions
    +ReservationData : ReservationData
    +AlternatePCC : AlternatePCC[]
}
TPA_Extensions +-- MessagingDetails
class MessagingDetails {
    +MDRSubset : MDRSubset
}
MessagingDetails +-- MDRSubset
class MDRSubset {
    +Code : string
}
TPA_Extensions +-- SplitTaxes
class SplitTaxes {
    +ByLeg : boolean
    +ByFareComponent : boolean
}
TPA_Extensions +-- AlternateDatesProcessing
class AlternateDatesProcessing {
    +CalendarMode : boolean
    +NumOptionsPerAlternateDate : int
}
TPA_Extensions +-- ItineraryCache
class ItineraryCache {
    +PublicTimeToLive : unsignedInt
    +RemovePreviousOnUpdate : boolean
}
TPA_Extensions +-- MultiTicket
class MultiTicket {
    +DisplayPolicy : DisplayPolicy
}
MultiTicket +-- DisplayPolicy
class DisplayPolicy {
    +SOW : string
    +GOW2RT : string
    +SCHS : string
}
DisplayPolicy *- string
TPA_Extensions +-- Partitions
class Partitions {
    +Partition : CachePartitionType[]
    +Group : CachePartitionGroupType[]
}
TPA_Extensions +-- ReservationData
class ReservationData {
    +DKNumber : string
}
TPA_Extensions +-- AlternatePCC
class AlternatePCC {
    +TravelPreferences : TravelPreferences
    +PseudoCityCode : string
}
AlternatePCC +-- TravelPreferences
class TravelPreferences {
    +VendorPref : VendorPref[]
    +TPA_Extensions : TPA_Extensions
}
TravelPreferences +-- VendorPref
class VendorPref {
    +Code : string
    +PreferLevel : PreferLevelType
}
TravelPreferences +-- TPA_Extensions
class TPA_Extensions {
    +IncludeAlliancePref : AllianceType[]
    +ExcludeAlliancePref : AllianceType[]
}
TPA_Extensions +-- AlternateAirportCities
class AlternateAirportCities {
    +SpecifiedLocation : SpecifiedLocation
    +AlternateLocation : AlternateLocation[]
}
AlternateAirportCities +-- SpecifiedLocation
class SpecifiedLocation {
    +LocationCode : string
}
AlternateAirportCities +-- AlternateLocation
class AlternateLocation {
    +LocationCode : string
}
TPA_Extensions +-- AlternateAirportMileage
class AlternateAirportMileage {
    +Number : string
}
OTA_AirLowFareSearchRQ +-- OriginDestinationInformation
class OriginDestinationInformation {
    +TPA_Extensions : TPA_Extensions
    +RPH : string
    +Fixed : boolean
    +FullDiversity : boolean
}
OriginDestinationInformation *- OriginDestinationInformationType
OriginDestinationInformation +-- TPA_Extensions
class TPA_Extensions {
    +Flight : OriginDestinationFlightType[]
    +Routing : RoutingDefinitionType[]
    +DateFlexibility : DateFlexibility[]
    +SisterDestinationLocation : RequestLocationType[]
    +SisterDestinationMileage : SisterDestinationMileage
    +SisterOriginLocation : RequestLocationType[]
    +SisterOriginMileage : SisterOriginMileage
    +SegmentType : SegmentType
    +AlternateTime : AlternateTime
    +MaxOneWayOptions : MaxOneWayOptions
    +NumOneWayOptions : NumOneWayOptions
    +CabinPref : CabinPrefType
    +ConnectionTime : ConnectionTime
    +TotalTravelTime : TotalTravelTime
    +IncludeVendorPref : IncludeVendorPrefType[]
    +IncludeAlliancePref : AllianceType[]
    +DepartureDays : DepartureDaysType
}
TPA_Extensions +-- DateFlexibility
class DateFlexibility {
    +NbrOfDays : int
    +Plus : int
    +Minus : int
    +Validate : boolean
}
TPA_Extensions +-- SegmentType
class SegmentType {
    +Code : Code
}
SegmentType +-- Code
class Code {
    +ARUNK : string
    +O : string
    +X : string
}
Code *- string
TPA_Extensions +-- AlternateTime
class AlternateTime {
    +PlusMinus : integer
    +Plus : integer
    +Minus : integer
}
TPA_Extensions +-- MaxOneWayOptions
class MaxOneWayOptions {
    +Value : unsignedShort
}
TPA_Extensions +-- NumOneWayOptions
class NumOneWayOptions {
    +Number : unsignedShort
}
TPA_Extensions +-- ConnectionTime
class ConnectionTime {
    +Min : nonNegativeInteger
    +Max : nonNegativeInteger
    +ExcludedConnectionBegin : string
    +ExcludedConnectionEnd : string
    +EnableExcludedConnection : boolean
}
TPA_Extensions +-- TotalTravelTime
class TotalTravelTime {
    +Min : unsignedInt
    +Max : unsignedInt
}
TPA_Extensions +-- SisterDestinationMileage
class SisterDestinationMileage {
    +Number : nonNegativeInteger
}
TPA_Extensions +-- SisterOriginMileage
class SisterOriginMileage {
    +Number : nonNegativeInteger
}
OTA_AirLowFareSearchRQ +-- Leg
class Leg {
    +DepartureDateTime : DepartureDateTime
    +ArrivalDateTime : GlobalDateTimeType
    +Origins : Origins
    +Destinations : Destinations
    +ConnectionLocations : ConnectionType
    +Carriers : Carriers
    +Cabin : Cabin
    +RPH : string
    +MaxOptions : nonNegativeInteger
}
Leg +-- Origins
class Origins {
    +Origin : Origin[]
}
Origins +-- Origin
class Origin {
    +ConnectionLocations : ConnectionType
    +Carriers : Carriers
    +DepartureDateTimeOverride : OverrideDateTimeType
    +AirportCode : string
    +AirportsGroup : string
}
Origin +-- Carriers
class Carriers {
    +IncludeVendorPref : IncludeVendorPrefType[]
    +ExcludeVendorPref : ExcludeVendorPref[]
}
Carriers +-- ExcludeVendorPref
class ExcludeVendorPref {
    +Code : string
}
Leg +-- Destinations
class Destinations {
    +Destination : Destination[]
}
Destinations +-- Destination
class Destination {
    +ConnectionLocations : ConnectionType
    +Carriers : Carriers
    +ArrivalDateTimeOverride : OverrideDateTimeType
    +AirportCode : string
    +AirportsGroup : string
}
Destination +-- Carriers
class Carriers {
    +IncludeVendorPref : IncludeVendorPrefType[]
    +ExcludeVendorPref : ExcludeVendorPref[]
}
Carriers +-- ExcludeVendorPref
class ExcludeVendorPref {
    +Code : string
}
Leg +-- Carriers
class Carriers {
    +IncludeVendorPref : IncludeVendorPrefType[]
    +ExcludeVendorPref : ExcludeVendorPref[]
}
Carriers +-- ExcludeVendorPref
class ExcludeVendorPref {
    +Code : string
}
Leg +-- Cabin
class Cabin {
    +PreferenceLevel : PreferLevelType
    +Type : CabinType
}
Leg +-- DepartureDateTime
class DepartureDateTime {
    +WeekDays : string
}
DepartureDateTime *- GlobalDateTimeType
OTA_AirLowFareSearchRQ +-- Target
class Target {
    +Test : string
    +Production : string
}
Target *- NMTOKEN
OTA_AirLowFareSearchRQ +-- TransactionStatusCode
class TransactionStatusCode {
    +Start : string
    +End : string
    +Rollback : string
    +InSeries : string
}
TransactionStatusCode *- NMTOKEN
class OptionsPerDatePairType {
    +Departure : string
    +Return : string
    +Min : unsignedShort
    +Max : unsignedShort
}
class OriginDestinationFlightType {
    +Number : short
    +DepartureDateTime : string
    +ArrivalDateTime : string
    +MarriageStatus : string
    +Type : string
    +Flown : boolean
    +OriginLocation : RequestLocationType
    +DestinationLocation : RequestLocationType
    +Airline : AirlineType
    +SideTrip : SideTripType
    +Reservation : ReservationType
    +MileageDisplay : MileageDisplayType[]
    +BookingDateTime : string
    +Fare : FareOptionalDetailsType
    +PlusUp : PlusUpType[]
    +ClassOfService : string
    +Shopped : boolean
}
class OriginDestinationInformationType {
    +OriginLocation : OriginLocation
    +DestinationLocation : DestinationLocation
    +ConnectionLocations : ConnectionType
}
OriginDestinationInformationType *- TravelDateTimeType
OriginDestinationInformationType +-- OriginLocation
class OriginLocation {
    +AllAirports : boolean
}
OriginLocation *- RequestLocationType
OriginDestinationInformationType +-- DestinationLocation
class DestinationLocation {
    +AllAirports : boolean
}
DestinationLocation *- RequestLocationType
class OverrideDateTimeType {
    +TimeWindowStart : string
    +TimeWindowEnd : string
    +TimeTolerance : nonNegativeInteger
    +DateFlexibility : nonNegativeInteger
    +MaxOptionsPerDate : nonNegativeInteger
    +ConnectionTimeMin : nonNegativeInteger
    +ConnectionTimeMax : nonNegativeInteger
    +DateTime : string
}
class POS_Type {
    +Source : SourceType[]
}
class PersonNameType {
    +NamePrefix : string[]
    +GivenName : string[]
    +MiddleName : string[]
    +SurnamePrefix : string
    +Surname : string
    +NameSuffix : string[]
    +NameTitle : string[]
    +ShareSynchInd : ShareSynchInd
    +ShareMarketInd : ShareMarketInd
    +NameType : string
}
PersonNameType +-- ShareSynchInd
class ShareSynchInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareSynchInd *- NMTOKEN
PersonNameType +-- ShareMarketInd
class ShareMarketInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareMarketInd *- NMTOKEN
class PlusUpType {
    +Amount : decimal
    +OriginCity : string
    +DestinationCity : string
    +FareOriginCity : string
    +FareDestinationCity : string
    +ViaCity : string
    +Message : string
    +CountryOfPayment : string
}
class PointOfSaleOverrideType {
    +Code : string
}
class PointOfTicketingOverrideType {
    +Code : string
}
class PositionType {
    +Latitude : string
    +Longitude : string
    +Altitude : string
}
enum PreferLevelType {
    Only = Only
    Unacceptable = Unacceptable
    Preferred = Preferred
}
class PriceRequestInformationType {
    +NegotiatedFareCode : NegotiatedFareCode[]
    +AccountCode : AccountCode[]
    +TPA_Extensions : TPA_Extensions
    +FareQualifier : string, boolean
    +NegotiatedFaresOnly : boolean
    +CurrencyCode : string
    +PricingSource : RequestPricingSourceType
    +Reprice : boolean
    +ProcessThruFaresOnly : boolean
    +PurchaseDate : date
    +PurchaseTime : string
    +NetFaresUsed : boolean
}
PriceRequestInformationType +-- TPA_Extensions
class TPA_Extensions {
    +PublicFare : PublicFare
    +PrivateFare : PrivateFare
    +IATAFare : IATAFare
    +WebFare : WebFare
    +Priority : Priority
    +Indicators : Indicators
    +PromoID : string
    +CustomerType : CustomerType
    +MultipleTravelerGroups : MultipleTravelerGroups
    +BrandedFareIndicators : BrandedFareIndicators
    +PassengerStatus : PassengerStatus
    +PointOfSaleOverride : PointOfSaleOverrideType
    +PointOfTicketingOverride : PointOfTicketingOverrideType
    +ApplyResidentDiscount : ApplyResidentDiscountType
    +ETicketableOverride : ETicketableOverride
    +Currency : Currency
    +UseReducedConstructions : UseReducedConstructions
    +OBFees : OBFees
    +FareBreaksAtLegs : FareBreaksAtLegs
    +FareAdjustment : FareAdjustment
}
TPA_Extensions +-- PublicFare
class PublicFare {
    +Ind : boolean
}
TPA_Extensions +-- PrivateFare
class PrivateFare {
    +Ind : boolean
}
TPA_Extensions +-- IATAFare
class IATAFare {
    +Ind : boolean
}
TPA_Extensions +-- WebFare
class WebFare {
    +Ind : boolean
}
TPA_Extensions +-- Priority
class Priority {
    +Price : Price
    +DirectFlights : DirectFlights
    +Time : Time
    +Vendor : Vendor
}
Priority +-- Price
class Price {
    +Priority : int
}
Priority +-- DirectFlights
class DirectFlights {
    +Priority : int
}
Priority +-- Time
class Time {
    +Priority : int
}
Priority +-- Vendor
class Vendor {
    +Priority : int
}
TPA_Extensions +-- Indicators
class Indicators {
    +RetainFare : RetainFare
    +MinMaxStay : MinMaxStay
    +RefundPenalty : RefundPenalty
    +ResTicketing : ResTicketing
    +TravelPolicy : TravelPolicy
}
Indicators +-- RetainFare
class RetainFare {
    +Ind : boolean
}
Indicators +-- MinMaxStay
class MinMaxStay {
    +Ind : boolean
}
Indicators +-- RefundPenalty
class RefundPenalty {
    +Ind : boolean
}
Indicators +-- ResTicketing
class ResTicketing {
    +Ind : boolean
}
Indicators +-- TravelPolicy
class TravelPolicy {
    +Ind : boolean
}
TPA_Extensions +-- CustomerType
class CustomerType {
    +Value : Value
}
CustomerType +-- Value
class Value {
    +REGULAR : string
    +TVLYPREF : string
    +PREFELITE : string
    +LOYALTY : string
}
Value *- string
TPA_Extensions +-- MultipleTravelerGroups
class MultipleTravelerGroups {
    +ItinerariesPerGroup : integer
}
TPA_Extensions +-- BrandedFareIndicators
class BrandedFareIndicators {
    +ReturnCheapestUnbrandedFare : ReturnCheapestUnbrandedFare
    +SingleBrandedFare : boolean
    +MultipleBrandedFares : boolean
}
BrandedFareIndicators +-- ReturnCheapestUnbrandedFare
class ReturnCheapestUnbrandedFare {
    +Ind : boolean
}
TPA_Extensions +-- PassengerStatus
class PassengerStatus {
    +StateCode : string
    +CountryCode : string
    +CityCode : string
    +Type : Type
}
PassengerStatus +-- Type
class Type {
    +R : string
    +E : string
    +N : string
}
Type *- string
TPA_Extensions +-- ETicketableOverride
class ETicketableOverride {
    +Value : boolean
}
TPA_Extensions +-- Currency
class Currency {
    +Dual : string
    +MOverride : boolean
}
TPA_Extensions +-- UseReducedConstructions
class UseReducedConstructions {
    +Ind : boolean
}
TPA_Extensions +-- OBFees
class OBFees {
    +RType : boolean
    +TType : boolean
}
TPA_Extensions +-- FareBreaksAtLegs
class FareBreaksAtLegs {
    +Ind : boolean
}
TPA_Extensions +-- FareAdjustment
class FareAdjustment {
    +Value : string
    +Currency : string
}
PriceRequestInformationType +-- NegotiatedFareCode
class NegotiatedFareCode {
    +Supplier : CompanyNameType[]
    +TPA_Extensions : string
    +Code : string
    +CodeContext : string
    +URI : anyURI
    +Quantity : integer
    +SecondaryCode : string
    +SupplierCode : string
}
PriceRequestInformationType +-- AccountCode
class AccountCode {
    +Code : string
}
class RequestLocationType {
    +value : string
    +LocationCode : string
    +AirportsGroup : string
    +CodeContext : string
}
enum RequestPricingSourceType {
    Published = Published
    Private = Private
    Both = Both
}
class ReservationType {
    +Status : string
    +RealStatus : string
}
class RetailerRulesType {
    +RetailerRule : RetailerRule[]
    +Force : boolean
}
RetailerRulesType +-- RetailerRule
class RetailerRule {
    +Code : string
}
class RoutingDefinitionType {
    +RoutingLeg : RoutingLegType[]
    +AddWildcards : boolean
}
class RoutingLegType {
    +InboundOutboundCarrier : string[]
    +InboundCarrier : string[]
    +OutboundCarrier : string[]
    +ConnectPoint : string[]
}
class SeatStatusSimType {
    +Type : string
    +Command : string
}
class SideTripType {
    +Number : short
    +Start : boolean
    +End : boolean
}
class SourceBookingChannelType {
    +CompanyName : CompanyNameType
}
SourceBookingChannelType *- BookingChannelType
class SourceType {
    +RequestorID : UniqueID_Type
    +Position : PositionType
    +BookingChannel : SourceBookingChannelType
    +AgentSine : string
    +PseudoCityCode : string
    +ISOCountry : string
    +ISOCurrency : string
    +AgentDutyCode : string
    +AirlineVendorID : string
    +AirportCode : string
    +FirstDepartPoint : string
    +ERSP_UserID : string
    +PersonalCityCode : string
    +AccountingCode : string
    +OfficeCode : string
    +DefaultTicketingCarrier : string
    +AirlineChannelCode : string
    +AgentDepartmentCode : string
    +AgentFunction : string
    +TravelAgencyIATA : string
    +HomeAgencyIATA : string
    +AgentIATA : string
    +VendorCRSCode : string
    +AgentDuty : string
    +AbacusUser : boolean
    +AgentCity : string
    +Carrier : string
    +MainTravelAgencyPCC : string
    +HomePCC : string
}
class StateProvType {
    +value : string
    +StateCode : string
}
class StreetNmbrType {
    +value : string
    +PO_Box : string
}
class TaxCodeAmountType {
    +Amount : decimal
}
TaxCodeAmountType *- TaxCodeType
class TaxCodeType {
    +TaxCode : string
}
class TelephoneType {
    +ShareSynchInd : ShareSynchInd
    +ShareMarketInd : ShareMarketInd
    +PhoneLocationType : string
    +PhoneTechType : string
    +CountryAccessCode : string
    +AreaCityCode : string
    +PhoneNumber : string
    +Extension : string
    +PIN : string
    +FormattedInd : boolean
}
TelephoneType +-- ShareSynchInd
class ShareSynchInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareSynchInd *- NMTOKEN
TelephoneType +-- ShareMarketInd
class ShareMarketInd {
    +Yes : string
    +No : string
    +Inherit : string
}
ShareMarketInd *- NMTOKEN
class TicketDistribPrefType {
    +value : string
    +PreferLevel : PreferLevelType
    +DistribType : string
    +TicketTime : duration
}
class TransactionType {
    +RequestType : RequestType
    +ServiceTag : ServiceTag
    +PurchaseType : PurchaseType
    +SabreAth : SabreAth
    +TranID : TranID
    +ClientSessionID : ClientSessionID
    +Branch : Branch
    +CompressResponse : CompressResponse
    +FareOverrides : FareOverrides
    +Diagnostics : Diagnostics
    +SubagentData : SubagentData
    +ResponseSorting : ResponseSorting
    +SeatStatusSim : SeatStatusSimType
    +AvailableLevel : AvailableLevel
    +ATSETest : ATSETest
    +Debug : boolean
    +DebugKey : string
    +ConfigSet : string
    +DisableCache : boolean
    +ChunkNumber : string
    +ShowItinSource : boolean
}
TransactionType +-- RequestType
class RequestType {
    +value : string
    +Name : string
}
TransactionType +-- ServiceTag
class ServiceTag {
    +value : string
    +Name : string
}
TransactionType +-- PurchaseType
class PurchaseType {
    +Name : string
}
TransactionType +-- SabreAth
class SabreAth {
    +Value : string
    +BinarySecToken : string
    +ConversationID : string
}
TransactionType +-- TranID
class TranID {
    +Value : string
}
TransactionType +-- ClientSessionID
class ClientSessionID {
    +Value : string
}
TransactionType +-- Branch
class Branch {
    +Name : string
}
TransactionType +-- CompressResponse
class CompressResponse {
    +Value : boolean
}
TransactionType +-- FareOverrides
class FareOverrides {
    +FareOverride : FareOverride[]
}
FareOverrides +-- FareOverride
class FareOverride {
    +VendorPref : CompanyNamePrefType[]
    +TPA_Extensions : string
    +FareType : string
    +PseudoCityCode : string
    +CorporateID : string
    +Callable : string
}
TransactionType +-- Diagnostics
class Diagnostics {
    +Diagnostic : Diagnostic[]
}
Diagnostics +-- Diagnostic
class Diagnostic {
    +DiagnosticArgument : DiagnosticArgument[]
    +TPA_Extensions : string
    +Target : string
    +Code : string
}
Diagnostic +-- DiagnosticArgument
class DiagnosticArgument {
    +Name : string
    +Value : string
}
TransactionType +-- SubagentData
class SubagentData {
    +Code : string
}
TransactionType +-- ResponseSorting
class ResponseSorting {
    +EnableChronologicalSorting : boolean
}
TransactionType +-- AvailableLevel
class AvailableLevel {
    +Value : string
}
TransactionType +-- ATSETest
class ATSETest {
    +Feature : string
}
class TravelDateTimeType {
    +DepartureDateTime : string
    +ArrivalDateTime : string
    +DepartureDates : DepartureDates
    +ArrivalDates : ArrivalDates
    +DepartureWindow : string
    +ArrivalWindow : string
}
TravelDateTimeType +-- DepartureDates
class DepartureDates {
    +Day : Day[]
    +DaysRange : DaysRange[]
    +LengthOfStay : LengthOfStay[]
    +LengthOfStayRange : LengthOfStayRange[]
}
DepartureDates +-- LengthOfStay
class LengthOfStay {
    +Days : unsignedShort
}
DepartureDates +-- LengthOfStayRange
class LengthOfStayRange {
    +MinDays : unsignedShort
    +MaxDays : unsignedShort
}
DepartureDates +-- Day
class Day {
    +Date : string
}
DepartureDates +-- DaysRange
class DaysRange {
    +FromDate : string
    +ToDate : string
    +WeekDays : string
}
TravelDateTimeType +-- ArrivalDates
class ArrivalDates {
    +Day : Day[]
    +DaysRange : DaysRange[]
}
ArrivalDates +-- Day
class Day {
    +Date : string
}
ArrivalDates +-- DaysRange
class DaysRange {
    +FromDate : string
    +ToDate : string
    +WeekDays : string
}
class TravelerInfoSummaryType {
    +SeatsRequested : nonNegativeInteger[]
    +AirTravelerAvail : TravelerInformationType[]
    +PriceRequestInformation : PriceRequestInformationType
    +TPA_Extensions : TravelerInfoSummary_TPA_ExtensionsType
    +SpecificPTC_Indicator : boolean
}
class TravelerInfoSummary_TPA_ExtensionsType {
    +TravelerRating : TravelerRating[]
}
TravelerInfoSummary_TPA_ExtensionsType +-- TravelerRating
class TravelerRating {
    +Score : Score[]
    +FrequentFlyer : FrequentFlyer[]
}
TravelerRating +-- Score
class Score {
    +Value : integer
    +Carrier : string
}
TravelerRating +-- FrequentFlyer
class FrequentFlyer {
    +Tier : integer
    +Carrier : string
}
class TravelerInformationType {
    +PassengerTypeQuantity : PassengerTypeQuantityType[]
    +AirTraveler : AirTravelerType
}
class TravelerRefNumberType {
    +RPH : string
}
class UniqueID_Type {
    +CompanyName : CompanyNameType
    +URL : anyURI
    +Type : string
    +Instance : string
    +ID : string
    +ID_Context : string
}
enum ValidatingCarrierPreferLevelType {
    Unacceptable = Unacceptable
    Preferred = Preferred
}
class ValidatingCarrierType {
    +Preference : Preference[]
    +Code : string
}
ValidatingCarrierType +-- Preference
class Preference {
    +Code : string
    +Level : ValidatingCarrierPreferLevelType
}
class XOFaresType {
    +Value : boolean
}

@enduml
