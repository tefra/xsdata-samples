@startuml

enum ActionCodeType {
    OK = OK
    Waitlist = Waitlist
    Other = Other
}
class AirFeeType {
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
    +Amount : decimal
    +value : string
    +FeeCode : string
}
class AirItineraryPricingInfoType {
    +PricingSource : string
    +PricingSubSource : string
    +PseudoCityCode : string
    +BrandID : string
    +FareReturned : boolean
    +FareStatus : string
    +CachedItin : boolean
    +CachePartition : string
    +CachePartitionPriority : nonNegativeInteger
    +CacheVersion : string
    +TimeToLive : integer
    +AlternateCityOption : boolean
    +PreviousExchangeDate : date
    +ReissueExchange : ReissueExchange
    +AdvancedPurchaseDate : date
    +PurchaseByDate : date
    +ItinTotalFare : ItinTotalFareType
    +PTC_FareBreakdowns : PTC_FareBreakdowns
    +FareInfos : FareInfos
    +TPA_Extensions : TPA_Extensions
    +LastTicketDate : string, time
    +PrivateFareType : string
    +SpanishFamilyDiscountIndicator : SpanishFamilyDiscountIndicator
    +FlexibleFareID : positiveInteger
}
AirItineraryPricingInfoType +-- PTC_FareBreakdowns
class PTC_FareBreakdowns {
    +PTC_FareBreakdown : PTCFareBreakdownType[]
}
AirItineraryPricingInfoType +-- FareInfos
class FareInfos {
    +FareInfo : FareInfo[]
}
FareInfos +-- FareInfo
class FareInfo {
    +NegotiatedFare : boolean
    +NegotiatedFareCode : string
    +DepartureDate : string
    +FareReference : string
    +RuleInfo : RuleInfoType
    +MarketingAirline : CompanyNameType[]
    +DepartureAirport : ResponseLocationType
    +ArrivalAirport : ResponseLocationType
    +TPA_Extensions : TPA_Extensions
}
FareInfo +-- TPA_Extensions
class TPA_Extensions {
    +SeatsRemaining : SeatsRemaining
    +Cabin : Cabin
    +FareNote : FareNote[]
    +Meal : Meal
    +Rule : Rule[]
}
TPA_Extensions +-- SeatsRemaining
class SeatsRemaining {
    +Number : int
    +BelowMin : boolean
}
TPA_Extensions +-- Cabin
class Cabin {
    +Cabin : string
}
TPA_Extensions +-- FareNote
class FareNote {
    +FareTypeName : string
    +PriorityLevel : int
    +ContentID : string
}
TPA_Extensions +-- Meal
class Meal {
    +Code : string
}
TPA_Extensions +-- Rule
class Rule {
    +Type : string
    +ID : int
}
AirItineraryPricingInfoType +-- TPA_Extensions
class TPA_Extensions {
    +DivideInParty : DivideInParty
    +PromoOffer : PromoOffer
    +FareNote : FareNote[]
    +PromoRedemption : PromoRedemption
    +Rule : Rule[]
    +MultipleTravelerGroups : MultipleTravelerGroups
    +AncillaryFeeGroups : AncillaryFeeGroups
    +Legs : Legs
    +UnflownPrice : UnflownPriceType
    +ValidatingCarrier : ValidatingCarrierInfoType[]
}
TPA_Extensions +-- DivideInParty
class DivideInParty {
    +Indicator : boolean
}
TPA_Extensions +-- PromoOffer
class PromoOffer {
    +PromoID : string
    +CorpID : string
    +ContentID : string
}
TPA_Extensions +-- FareNote
class FareNote {
    +FareTypeName : string
    +PriorityLevel : int
    +ContentID : string
}
TPA_Extensions +-- PromoRedemption
class PromoRedemption {
    +PromoID : string
    +Eligible : boolean
    +ContentID : string
}
TPA_Extensions +-- Rule
class Rule {
    +Type : string
    +ID : int
}
TPA_Extensions +-- MultipleTravelerGroups
class MultipleTravelerGroups {
    +GroupNumber : integer
    +PrimaryGroup : boolean
}
TPA_Extensions +-- AncillaryFeeGroups
class AncillaryFeeGroups {
    +AncillaryFeeGroup : AncillaryFeeGroup[]
    +Message : string
}
AncillaryFeeGroups +-- AncillaryFeeGroup
class AncillaryFeeGroup {
    +AncillaryFeeItem : AncillaryFeeItem[]
    +Code : string
    +Name : string
    +Message : string
}
AncillaryFeeGroup +-- AncillaryFeeItem
class AncillaryFeeItem {
}
AncillaryFeeItem *- OCFeeType
TPA_Extensions +-- Legs
class Legs {
    +Leg : Leg[]
}
Legs +-- Leg
class Leg {
    +Segment : Segment[]
    +Number : string
    +BrandID : string
    +BrandDescription : string
    +ProgramName : string
    +ProgramID : string
    +ProgramCode : string
    +ProgramSystemCode : string
    +FareStatus : string
}
Leg +-- Segment
class Segment {
    +Number : int
    +ProgramID : string
    +ProgramDescription : string
    +ProgramSystemCode : string
    +BrandID : string
    +BrandName : string
    +FareStatus : string
}
AirItineraryPricingInfoType +-- SpanishFamilyDiscountIndicator
class SpanishFamilyDiscountIndicator {
    +A : string
    +B : string
    +C : string
}
SpanishFamilyDiscountIndicator *- string
AirItineraryPricingInfoType +-- ReissueExchange
class ReissueExchange {
    +1 : string
    +2 : string
}
ReissueExchange *- int
class AirItineraryType {
    +OriginDestinationOptions : OriginDestinationOptions
    +DirectionInd : AirTripType
    +DepartureDate : date
}
AirItineraryType +-- OriginDestinationOptions
class OriginDestinationOptions {
    +OriginDestinationOption : OriginDestinationOptionType[]
}
class AirTaxType {
    +ReissueTaxType : string
    +ReissueRestrictionApplies : boolean
    +ReissueTaxRefundable : boolean
    +ApplyToReissue : boolean
    +ReissueMaxAmount : double
    +ReissueCurrency : string
    +PublishedAmount : double
    +PublishedCurrency : string
    +value : string
    +TaxCode : string
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
    +Amount : decimal
    +CarrierCode : string
    +MinAmount : double
    +MaxAmount : double
    +MinMaxCurrency : string
    +RateUsed : double
    +StationCode : string
}
class AirlineLowestFaresType {
    +Airline : CompanyNameType
    +NoStops : integer
    +LowestFare : CurrencyAmountType
    +ItineraryCount : string
}
class AirportInformationType {
    +TerminalID : string
}
AirportInformationType *- ResponseLocationType
class AlternateDateLowestFaresType {
    +DepartureDateTime : string
    +ReturnlDateTime : string
    +LowestFare : CurrencyAmountType
}
class AlternateLocationLowestFaresType {
    +OriginLocation : ResponseLocationType
    +DestinationLocation : ResponseLocationType
    +LowestFare : CurrencyAmountType
}
class BaggageInformationListType {
    +BaggageInformation : BaggageInformationType[]
}
class BaggageInformationType {
    +Segment : Segment[]
    +Allowance : Allowance
}
BaggageInformationType +-- Segment
class Segment {
    +Id : int
}
BaggageInformationType +-- Allowance
class Allowance {
    +Pieces : int
    +Weight : short
    +Unit : Unit
}
Allowance +-- Unit
class Unit {
    +kg : string
    +lbs : string
}
Unit *- string
class BookFlightSegmentType {
    +DepartureAirport : AirportInformationType
    +ArrivalAirport : AirportInformationType
    +OperatingAirline : OperatingAirlineType
    +Equipment : EquipmentType[]
    +MarketingAirline : CompanyNameType
    +DisclosureAirline : CompanyNameType
    +MarriageGrp : string
    +StopAirports : StopAirports
    +DepartureTimeZone : DepartureTimeZone
    +ArrivalTimeZone : ArrivalTimeZone
    +OnTimePerformance : OnTimePerformance
    +TPA_Extensions : TPA_Extensions
    +DepartureDateTime : string
    +ArrivalDateTime : string
    +StopQuantity : nonNegativeInteger
    +RPH : string
    +InfoSource : string
    +FlightNumber : string
    +TourOperatorFlightID : string
    +ResBookDesigCode : string
    +ActionCode : ActionCodeType
    +NumberInParty : positiveInteger
    +ElapsedTime : short
}
BookFlightSegmentType +-- StopAirports
class StopAirports {
    +StopAirport : StopAirport[]
}
StopAirports +-- StopAirport
class StopAirport {
    +ArrivalDateTime : string
    +DepartureDateTime : string
    +ElapsedTime : int
    +Duration : int
    +GMTOffset : float
    +Equipment : string
}
StopAirport *- ResponseLocationType
BookFlightSegmentType +-- DepartureTimeZone
class DepartureTimeZone {
    +GMTOffset : float
}
BookFlightSegmentType +-- ArrivalTimeZone
class ArrivalTimeZone {
    +GMTOffset : float
}
BookFlightSegmentType +-- OnTimePerformance
class OnTimePerformance {
    +Level : string
    +Percentage : string
}
BookFlightSegmentType +-- TPA_Extensions
class TPA_Extensions {
    +eTicket : eTicket
    +DataElement : DataElement
    +Message : Message
}
TPA_Extensions +-- eTicket
class eTicket {
    +Ind : boolean
}
TPA_Extensions +-- DataElement
class DataElement {
    +SubjectToGovernmentApproval : boolean
}
TPA_Extensions +-- Message
class Message {
    +Type : string
    +Text : string
}
class ComplexProcessingMessageType {
    +Leg : Leg[]
}
ComplexProcessingMessageType *- ProcessingMessageType
ComplexProcessingMessageType +-- Leg
class Leg {
    +DepartureDate : date
}
class CouponOfferType {
    +promo_id : string
    +corp_id : string
    +headline : string
    +discount_pctg : string
}
class CurrencyAmountType {
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
    +Amount : decimal
}
class CurrencyConversionsType {
    +Conversion : Conversion[]
}
CurrencyConversionsType +-- Conversion
class Conversion {
    +From : string
    +To : string
    +RateOfExchange : double
}
class ErrorType {
    +Type : string
    +ShortText : string
    +Code : string
    +DocURL : anyURI
    +Status : string
    +Tag : string
    +RecordID : string
    +MessageClass : MessageClassType
    +NodeList : string
}
ErrorType *- FreeTextType
class ErrorsType {
    +Error : ErrorType[]
}
class FareCalcLineType {
    +Info : string
}
class FareComponentBreakdownType {
    +FareComponentReferenceID : unsignedShort
    +FareComponentCommission : decimal
    +RuleID : unsignedLong
    +ProgramID : unsignedLong
    +ContractID : unsignedLong
}
class FareComponentTaxesType {
    +FlightSegment : FlightSegment[]
    +Tax : AirTaxType[]
}
FareComponentTaxesType +-- FlightSegment
class FlightSegment {
    +DepartureAirportCode : string
    +ArrivalAirportCode : string
}
class FareGroupType {
    +FareTypeName : string
}
class FareInfoType {
    +NegotiatedFare : boolean
    +NegotiatedFareCode : string
    +DepartureDate : string
    +FareReference : string
    +RuleInfo : RuleInfoType
    +MarketingAirline : CompanyNameType[]
    +DepartureAirport : ResponseLocationType
    +ArrivalAirport : ResponseLocationType
}
class FareMessagesType {
    +Message : Message[]
}
FareMessagesType +-- Message
class Message {
    +AirlineCode : string
    +Type : string
    +FailCode : short
    +Info : string
}
class FareType {
    +NegotiatedFare : boolean
    +NegotiatedFareCode : string
    +BaseFare : CurrencyAmountType
    +NonRefundableBaseFare : CurrencyAmountType
    +FareConstruction : CurrencyAmountType
    +EquivFare : EquivFare
    +Taxes : Taxes
    +Fees : Fees
    +OBFees : OBFees
    +RateOfExchange : RateOfExchangeType
    +CurrencyConversions : CurrencyConversionsType
    +TotalFare : CurrencyAmountType
    +ReissueInfoList : ReissueInfoList
    +PenaltiesInfo : PenaltiesInfo
    +TPA_Extensions : TPA_Extensions
}
FareType +-- EquivFare
class EquivFare {
    +EffectivePriceDeviation : decimal
}
EquivFare *- CurrencyAmountType
FareType +-- Taxes
class Taxes {
    +FareComponentsTaxes : FareComponentsTaxes
    +LegsTaxes : LegsTaxes
    +Tax : AirTaxType[]
    +TotalTax : CurrencyAmountType
}
Taxes +-- FareComponentsTaxes
class FareComponentsTaxes {
    +FareComponentTaxes : FareComponentTaxesType[]
}
Taxes +-- LegsTaxes
class LegsTaxes {
    +LegTaxes : LegTaxes[]
}
LegsTaxes +-- LegTaxes
class LegTaxes {
    +Tax : AirTaxType[]
    +Number : int
}
FareType +-- Fees
class Fees {
    +Fee : AirFeeType[]
}
FareType +-- OBFees
class OBFees {
    +OBFee : OBFeeType[]
    +TTypeAmount : decimal
}
FareType +-- ReissueInfoList
class ReissueInfoList {
    +ReissueInfo : ReissueInfoType[]
}
FareType +-- PenaltiesInfo
class PenaltiesInfo {
    +Penalty : Penalty[]
}
PenaltiesInfo +-- Penalty
class Penalty {
    +Cat16TextOnly : Cat16TextOnly[]
    +Type : Type
    +Applicability : Applicability
    +Refundable : boolean
    +Changeable : boolean
    +ConditionsApply : boolean
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
    +Amount : decimal
    +Cat16Info : boolean
}
Penalty +-- Cat16TextOnly
class Cat16TextOnly {
    +FareBasisCode : string
    +FareComponentID : integer
}
Penalty +-- Type
class Type {
    +Refund : string
    +Exchange : string
}
Type *- string
Penalty +-- Applicability
class Applicability {
    +After : string
    +Before : string
}
Applicability *- string
FareType +-- TPA_Extensions
class TPA_Extensions {
    +Surcharges : SurchargesType[]
    +Legs : Legs
    +FareComponents : FareComponents
    +Messages : FareMessagesType
    +BaggageInformationList : BaggageInformationListType
    +SellingFareDataList : SellingFareDataList
    +CommissionData : CommissionData
}
TPA_Extensions +-- Legs
class Legs {
    +Leg : Leg[]
}
Legs +-- Leg
class Leg {
    +BaseFare : CurrencyAmountType
    +EquivFare : EquivFare
    +Taxes : Taxes
    +TotalFare : CurrencyAmountType
    +TotalMileage : TotalMileage
    +Number : int
    +FareStatus : string
}
Leg +-- EquivFare
class EquivFare {
    +EffectivePriceDeviation : decimal
}
EquivFare *- CurrencyAmountType
Leg +-- Taxes
class Taxes {
    +Tax : AirTaxType
}
Leg +-- TotalMileage
class TotalMileage {
    +Amount : string
}
TPA_Extensions +-- FareComponents
class FareComponents {
    +FareComponent : FareComponent[]
}
FareComponents +-- FareComponent
class FareComponent {
    +BaseFare : CurrencyAmountType
    +EquivFare : EquivFare
    +Taxes : Taxes
    +TotalFare : CurrencyAmountType
    +Segment : Segment[]
    +HandlingMarkupDetail : HandlingMarkupDetail[]
    +FareRetailerRule : FareRetailerRule[]
    +ProgramID : string
    +ProgramDescription : string
    +ProgramSystemCode : string
    +BrandID : string
    +BrandName : string
}
FareComponent +-- EquivFare
class EquivFare {
    +EffectivePriceDeviation : decimal
}
EquivFare *- CurrencyAmountType
FareComponent +-- Taxes
class Taxes {
    +Tax : AirTaxType
}
FareComponent +-- Segment
class Segment {
    +LegIndex : int
    +FlightIndex : int
}
FareComponent +-- HandlingMarkupDetail
class HandlingMarkupDetail {
    +MarkupHandlingFeeAppID : string
    +MarkupTypeCode : string
    +FareAmountAfterMarkup : decimal
    +MarkupAmount : decimal
    +AmountCurrency : string
    +MarkupRuleSourcePCC : string
    +MarkupRuleItemNumber : unsignedLong
}
FareComponent +-- FareRetailerRule
class FareRetailerRule {
    +TransactionType : string
    +Code : string
}
TPA_Extensions +-- SellingFareDataList
class SellingFareDataList {
    +SellingFareData : SellingFareDataType[]
}
TPA_Extensions +-- CommissionData
class CommissionData {
    +VCCInformation : VCCInformationType[]
    +Cat35CommissionPercentage : decimal
    +Cat35CommissionAmount : decimal
    +Cat35MarkupAmount : decimal
    +CommissionAmountInEquivalent : decimal
    +CommissionSource : string
}
class FreeTextType {
    +Language : language
    +value : string
}
class HandlingMarkupSummaryType {
    +TypeCode : string
    +Description : string
    +MonetaryAmountValue : decimal
}
class ItinTotalFareType {
    +Extras : Extras
    +TotalWithExtras : TotalWithExtras
    +TotalMileage : TotalMileage
    +ServiceFee : ServiceFee
}
ItinTotalFareType *- FareType
ItinTotalFareType +-- Extras
class Extras {
    +Amount : string
}
ItinTotalFareType +-- TotalWithExtras
class TotalWithExtras {
    +Amount : string
}
ItinTotalFareType +-- TotalMileage
class TotalMileage {
    +Amount : string
}
ItinTotalFareType +-- ServiceFee
class ServiceFee {
    +Amount : decimal
    +TaxAmount : decimal
}
enum MessageClassType {
    E = E
    W = W
    D = D
    I = I
}
class OBFeeType {
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
    +Amount : decimal
    +Type : string
    +Description : string
}
class OCFeeType {
    +Amount : decimal
    +Description : string
    +OriginAirport : string
    +DestinationAirport : string
    +Carrier : string
    +PassengerCode : string
    +Date : string
    +StartSegment : string
    +EndSegment : string
}
class OTA_AirLowFareSearchRS {
    +Errors : ErrorsType
    +Success : SuccessType
    +Warnings : WarningsType
    +PricedItineraries : PricedItineraries
    +OneWayItineraries : OneWayItineraries
    +DepartedItineraries : DepartedItineraries
    +SoldOutItineraries : SoldOutItineraries
    +AvailableItineraries : AvailableItineraries
    +TPA_Extensions : TPA_Extensions
    +PrimaryLangID : language
    +AltLangID : language
    +EchoToken : string, string
    +TimeStamp : string
    +Target : Target
    +Version : string
    +TransactionIdentifier : string
    +SequenceNmbr : positiveInteger, boolean
    +TransactionStatusCode : TransactionStatusCode
    +PricedItinCount : short
    +BrandedOneWayItinCount : short
    +SimpleOneWayItinCount : short
    +DepartedItinCount : short
    +SoldOutItinCount : short
    +AvailableItinCount : short
}
OTA_AirLowFareSearchRS +-- PricedItineraries
class PricedItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
}
PricedItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : ComplexProcessingMessageType[]
}
OTA_AirLowFareSearchRS +-- OneWayItineraries
class OneWayItineraries {
    +BrandedOneWayItineraries : BrandedOneWayItineraries[]
    +SimpleOneWayItineraries : SimpleOneWayItineraries[]
}
OneWayItineraries +-- BrandedOneWayItineraries
class BrandedOneWayItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
    +RPH : string
}
BrandedOneWayItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : OneWayProcessingMessageType[]
}
OneWayItineraries +-- SimpleOneWayItineraries
class SimpleOneWayItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
    +RPH : string
}
SimpleOneWayItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : OneWayProcessingMessageType[]
}
OTA_AirLowFareSearchRS +-- DepartedItineraries
class DepartedItineraries {
    +PricedItineraries : PricedItineraries
    +OneWayItineraries : OneWayItineraries
}
DepartedItineraries +-- PricedItineraries
class PricedItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
}
PricedItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : ComplexProcessingMessageType[]
}
DepartedItineraries +-- OneWayItineraries
class OneWayItineraries {
    +BrandedOneWayItineraries : BrandedOneWayItineraries[]
    +SimpleOneWayItineraries : SimpleOneWayItineraries[]
}
OneWayItineraries +-- BrandedOneWayItineraries
class BrandedOneWayItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
    +RPH : string
}
BrandedOneWayItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : OneWayProcessingMessageType[]
}
OneWayItineraries +-- SimpleOneWayItineraries
class SimpleOneWayItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
    +RPH : string
}
SimpleOneWayItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : OneWayProcessingMessageType[]
}
OTA_AirLowFareSearchRS +-- SoldOutItineraries
class SoldOutItineraries {
    +PricedItineraries : PricedItineraries
    +OneWayItineraries : OneWayItineraries
}
SoldOutItineraries +-- PricedItineraries
class PricedItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
}
PricedItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : ComplexProcessingMessageType[]
}
SoldOutItineraries +-- OneWayItineraries
class OneWayItineraries {
    +BrandedOneWayItineraries : BrandedOneWayItineraries[]
    +SimpleOneWayItineraries : SimpleOneWayItineraries[]
}
OneWayItineraries +-- BrandedOneWayItineraries
class BrandedOneWayItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
    +RPH : string
}
BrandedOneWayItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : OneWayProcessingMessageType[]
}
OneWayItineraries +-- SimpleOneWayItineraries
class SimpleOneWayItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
    +RPH : string
}
SimpleOneWayItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : OneWayProcessingMessageType[]
}
OTA_AirLowFareSearchRS +-- AvailableItineraries
class AvailableItineraries {
    +PricedItineraries : PricedItineraries
    +OneWayItineraries : OneWayItineraries
}
AvailableItineraries +-- PricedItineraries
class PricedItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
}
PricedItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : ComplexProcessingMessageType[]
}
AvailableItineraries +-- OneWayItineraries
class OneWayItineraries {
    +BrandedOneWayItineraries : BrandedOneWayItineraries[]
    +SimpleOneWayItineraries : SimpleOneWayItineraries[]
}
OneWayItineraries +-- BrandedOneWayItineraries
class BrandedOneWayItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
    +RPH : string
}
BrandedOneWayItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : OneWayProcessingMessageType[]
}
OneWayItineraries +-- SimpleOneWayItineraries
class SimpleOneWayItineraries {
    +TPA_Extensions : TPA_Extensions
    +PricedItinerary : PricedItineraryType[]
    +RPH : string
}
SimpleOneWayItineraries +-- TPA_Extensions
class TPA_Extensions {
    +ProcessingMessage : OneWayProcessingMessageType[]
}
OTA_AirLowFareSearchRS +-- TPA_Extensions
class TPA_Extensions {
    +AirlineOrderList : AirlineOrderList
}
TPA_Extensions +-- AirlineOrderList
class AirlineOrderList {
    +AirlineOrder : AirlineOrder[]
}
AirlineOrderList +-- AirlineOrder
class AirlineOrder {
    +SequenceNumber : short
}
AirlineOrder *- CompanyNameType
OTA_AirLowFareSearchRS +-- Target
class Target {
    +Test : string
    +Production : string
}
Target *- NMTOKEN
OTA_AirLowFareSearchRS +-- TransactionStatusCode
class TransactionStatusCode {
    +Start : string
    +End : string
    +Rollback : string
    +InSeries : string
}
TransactionStatusCode *- NMTOKEN
class OneWayProcessingMessageType {
    +DepartureDate : date
    +DepartureAirport : string
    +ArrivalAirport : string
}
OneWayProcessingMessageType *- ProcessingMessageType
class OperatingAirlineType {
    +FlightNumber : string
}
OperatingAirlineType *- CompanyNameType
class OriginDestinationOptionType {
    +FlightSegment : BookFlightSegmentType[]
    +ElapsedTime : int
}
class PTCFareBreakdownType {
    +PassengerTypeQuantity : PassengerTypeQuantityType
    +FareBasisCodes : FareBasisCodes
    +PassengerFare : FareType
    +Endorsements : Endorsements
    +TPA_Extensions : TPA_Extensions
    +FareInfos : FareInfos
    +PricingSource : string
    +PrivateFareType : string
    +LastTicketDate : string, time
    +PreviousExchangeDate : date
    +ReissueExchange : ReissueExchange
}
PTCFareBreakdownType +-- FareBasisCodes
class FareBasisCodes {
    +FareBasisCode : FareBasisCode[]
}
FareBasisCodes +-- FareBasisCode
class FareBasisCode {
    +value : string
    +PrivateFareType : string
    +FareComponentReferenceID : unsignedShort
    +AccountCode : string
    +Mileage : int
    +BookingCode : string
    +AvailabilityBreak : boolean
    +DepartureAirportCode : string
    +ArrivalAirportCode : string
    +FareComponentBeginAirport : string
    +FareComponentEndAirport : string
    +FareComponentDirectionality : FareDirectionality
    +GovCarrier : string
}
PTCFareBreakdownType +-- Endorsements
class Endorsements {
    +Endorsement : Endorsement[]
    +TPA_Extensions : string
    +NonRefundableIndicator : boolean
    +NonEndorsableIndicator : boolean
}
Endorsements +-- Endorsement
class Endorsement {
}
Endorsement *- FreeTextType
PTCFareBreakdownType +-- TPA_Extensions
class TPA_Extensions {
    +FareCalcLine : FareCalcLineType
    +FareType : FareType
}
TPA_Extensions +-- FareType
class FareType {
    +value : string
    +Name : string
}
PTCFareBreakdownType +-- FareInfos
class FareInfos {
    +FareInfo : FareInfo[]
}
FareInfos +-- FareInfo
class FareInfo {
    +NegotiatedFare : boolean
    +NegotiatedFareCode : string
    +DepartureDate : string
    +FareReference : string
    +RuleInfo : RuleInfoType
    +MarketingAirline : CompanyNameType[]
    +DepartureAirport : ResponseLocationType
    +ArrivalAirport : ResponseLocationType
    +TPA_Extensions : TPA_Extensions
}
FareInfo +-- TPA_Extensions
class TPA_Extensions {
    +SeatsRemaining : SeatsRemaining
    +Cabin : Cabin
    +FareNote : FareNote[]
    +Meal : Meal
    +Rule : Rule[]
}
TPA_Extensions +-- SeatsRemaining
class SeatsRemaining {
    +Number : int
    +BelowMin : boolean
}
TPA_Extensions +-- Cabin
class Cabin {
    +Cabin : string
}
TPA_Extensions +-- FareNote
class FareNote {
    +FareTypeName : string
    +PriorityLevel : int
    +ContentID : string
}
TPA_Extensions +-- Meal
class Meal {
    +Code : string
}
TPA_Extensions +-- Rule
class Rule {
    +Type : string
    +ID : int
}
PTCFareBreakdownType +-- ReissueExchange
class ReissueExchange {
    +1 : string
    +2 : string
}
ReissueExchange *- int
enum PollingStatusType {
    received = received
    in progress = in progress
    complete = complete
    error = error
}
class PricedItinerariesType {
    +PricedItinerary : PricedItineraryType[]
}
class PricedItineraryType {
    +AirItinerary : AirItineraryType
    +AirItineraryPricingInfo : AirItineraryPricingInfo[]
    +Notes : FreeTextType[]
    +TicketingInfo : TicketingInfoRS_Type
    +TPA_Extensions : TPA_Extensions
    +isFromCustomPath : boolean
    +SequenceNumber : positiveInteger
    +OriginDestinationRPH : string
    +CampaignID : string
    +AlternateAirport : boolean
    +MultipleTickets : boolean
}
PricedItineraryType +-- AirItineraryPricingInfo
class AirItineraryPricingInfo {
    +Tickets : TicketsPricingType
}
AirItineraryPricingInfo *- AirItineraryPricingInfoType
PricedItineraryType +-- TPA_Extensions
class TPA_Extensions {
    +AdditionalFares : AdditionalFares[]
    +Ops : Ops
    +ItinSource : ItinSource
    +ValueBucket : ValueBucket
    +ValidatingCarrier : ValidatingCarrier
    +UnflownPrice : UnflownPriceType
    +DiversitySwapper : DiversitySwapper
    +Failed : Failed
}
TPA_Extensions +-- AdditionalFares
class AdditionalFares {
    +AirItineraryPricingInfo : AirItineraryPricingInfo
    +Notes : FreeTextType[]
    +TicketingInfo : TicketingInfoRS_Type
    +MultipleTickets : boolean
}
AdditionalFares +-- AirItineraryPricingInfo
class AirItineraryPricingInfo {
    +Tickets : TicketsPricingType
}
AirItineraryPricingInfo *- AirItineraryPricingInfoType
TPA_Extensions +-- Ops
class Ops {
    +FareTypes : FareTypes
    +ActionCode : nonNegativeInteger
}
Ops +-- FareTypes
class FareTypes {
    +FareType : FareType[]
}
FareTypes +-- FareType
class FareType {
    +Code : string
}
TPA_Extensions +-- ItinSource
class ItinSource {
    +Source : string
}
TPA_Extensions +-- ValueBucket
class ValueBucket {
    +PriceTimeValueRank : double
    +ValueBucketNumber : integer
}
TPA_Extensions +-- ValidatingCarrier
class ValidatingCarrier {
    +Code : string
}
TPA_Extensions +-- DiversitySwapper
class DiversitySwapper {
    +WeighedPriceAmount : float
}
TPA_Extensions +-- Failed
class Failed {
    +MinimumConnectTime : boolean
}
class ProcessingMessageType {
    +PricingSource : string
    +Message : string
}
class RateOfExchangeType {
    +Value : double
}
class ReissueInfoType {
    +ChangeFees : ChangeFees
    +ResidualIdicator : string
    +TypeOfServiceFee : string
    +TypeOfReissueTransaction : string
    +ReissueResultFromTag : boolean
    +FormOfRefund : string
    +ReissueRequiresElectronicTicket : boolean
    +ReissueDoesNotAllowElectronicTicket : boolean
    +TaxRefundable : boolean
}
ReissueInfoType +-- ChangeFees
class ChangeFees {
    +ChangeFee : ChangeFee
}
ChangeFees +-- ChangeFee
class ChangeFee {
    +HighestChangeFee : boolean
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
    +Amount : decimal
    +ChangeFeeWaived : boolean
    +ChangeFeeNotApplicable : boolean
}
class ResponseLocationType {
    +value : string
    +LocationCode : string
    +CodeContext : string
}
class RuleInfoType {
    +ResTicketingRules : ResTicketingRules
    +LengthOfStayRules : StayRestrictionsType
}
RuleInfoType +-- ResTicketingRules
class ResTicketingRules {
    +AdvResTicketing : AdvResTicketingType
}
class SellingFareDataType {
    +HandlingMarkupSummary : HandlingMarkupSummaryType[]
    +LayerTypeName : string
}
class SuccessType {
    +value : string
}
class SurchargesType {
    +value : string
    +Ind : string
    +Type : string
}
class TicketPricingType {
    +OriginDestinationOptions : OriginDestinationOptions
    +AirItineraryPricingInfo : AirItineraryPricingInfoType
    +Notes : FreeTextType[]
    +TicketingInfo : TicketingInfoRS_Type
    +TPA_Extensions : TPA_Extensions
    +Number : int
}
TicketPricingType +-- OriginDestinationOptions
class OriginDestinationOptions {
    +OriginDestinationOption : OriginDestinationOption[]
}
OriginDestinationOptions +-- OriginDestinationOption
class OriginDestinationOption {
    +FlightSegment : FlightSegment[]
}
OriginDestinationOption +-- FlightSegment
class FlightSegment {
    +DepartureAirport : ResponseLocationType
    +ArrivalAirport : ResponseLocationType
    +DepartureDateTime : string
}
TicketPricingType +-- TPA_Extensions
class TPA_Extensions {
    +ValidatingCarrier : ValidatingCarrier
}
TPA_Extensions +-- ValidatingCarrier
class ValidatingCarrier {
    +Code : string
}
enum TicketType {
    eTicket = eTicket
    Paper = Paper
}
class TicketingInfoRS_Type {
    +TicketAdvisory : FreeTextType[]
    +TPA_Extensions : string
    +eTicketNumber : string
    +TicketTimeLimit : string
    +TicketType : TicketType
    +ValidInterline : ValidInterlineType
}
class TicketsPricingType {
    +Ticket : TicketPricingType[]
}
class UnflownPriceType {
    +CurrencyCode : string
    +DecimalPlaces : nonNegativeInteger
    +Amount : decimal
}
class VCCInformationType {
    +FareComponentBreakdown : FareComponentBreakdownType[]
    +ValidatingCarrier : string
    +CommissionAmount : decimal
    +TotalAmountIncludingMarkUp : decimal
    +CommissionPercent : decimal
}
enum ValidInterlineType {
    Yes = Yes
    No = No
    Unknown = Unknown
}
class ValidatingCarrierInfoType {
    +Default : Default
    +Alternate : Alternate[]
    +SettlementMethod : string
    +NewVcxProcess : boolean
}
ValidatingCarrierInfoType +-- Default
class Default {
    +Country : Country[]
    +Code : string
}
Default +-- Country
class Country {
    +Code : string
}
ValidatingCarrierInfoType +-- Alternate
class Alternate {
    +Country : Country[]
    +Code : string
}
Alternate +-- Country
class Country {
    +Code : string
}
class WarningType {
    +ShortText : string
    +Code : string
    +DocURL : anyURI
    +Status : string
    +Tag : string
    +RecordID : string
    +MessageClass : MessageClassType
    +Type : string
}
WarningType *- FreeTextType
class WarningsType {
    +Warning : WarningType[]
}

@enduml