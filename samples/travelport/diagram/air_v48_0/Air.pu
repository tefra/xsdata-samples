@startuml

class ADVType {
    +AdvRsvnOnlyIfTk : xs:boolean
    +AdvRsvnAnyTm : xs:boolean
    +AdvRsvnHrs : xs:boolean
    +AdvRsvnDays : xs:boolean
    +AdvRsvnMonths : xs:boolean
    +AdvRsvnEarliestTm : xs:boolean
    +AdvRsvnLatestTm : xs:boolean
    +AdvRsvnWaived : xs:boolean
    +AdvRsvnDataExists : xs:boolean
    +AdvRsvnEndItem : xs:boolean
    +AdvTkEarliestTm : xs:boolean
    +AdvTkLatestTm : xs:boolean
    +AdvTkRsvnHrs : xs:boolean
    +AdvTkRsvnDays : xs:boolean
    +AdvTkRsvnMonths : xs:boolean
    +AdvTkStartHrs : xs:boolean
    +AdvTkStartDays : xs:boolean
    +AdvTkStartMonths : xs:boolean
    +AdvTkWaived : xs:boolean
    +AdvTkAnyTm : xs:boolean
    +AdvTkEndItem : xs:boolean
    +AdvRsvnTm : xs:integer
    +AdvTkRsvnTm : xs:integer
    +AdvTkStartTm : xs:integer
    +EarliestRsvnDtPresent : xs:boolean
    +EarliestTkDtPresent : xs:boolean
    +LatestRsvnDtPresent : xs:boolean
    +LatestTkDtPresent : xs:boolean
    +EarliestRsvnDt : xs:date
    +EarliestTkDt : xs:date
    +LatestRsvnDt : xs:date
    +LatestTkDt : xs:date
}
class APISRequirements {
    +Document : Document[]
    +Key : xs:string
    +Level : xs:string
    +GenderRequired : xs:boolean
    +DateOfBirthRequired : xs:boolean
    +RequiredDocuments : xs:string
    +NationalityRequired : xs:boolean
}
class APISRequirementsList {
    +APISRequirements : APISRequirements[]
}
class AccountRelatedRules {
    +BookingRules : BookingRules[]
    +RoutingRules : RoutingRules
}
class ActionDetails {
    +PseudoCityCode : xs:string
    +AgentSine : xs:string
    +EventDate : xs:date
    +EventTime : xs:time
    +Text : xs:string
}
class AdditionalInfo {
    +Category : xs:string
}
class AddlBookingCodeInformation {
    +value : xs:string
}
class Adjustment {
    +Amount : xs:string
    +Percent : xs:float
    +AdjustedTotalPrice : xs:string
    +ApproximateAdjustedTotalPrice : xs:string
    +BookingTravelerRef : xs:string
}
class Affiliations {
    +TravelArranger : TravelArranger[]
}
class AirAvailInfo {
    +BookingCodeInfo : BookingCodeInfo[]
    +FareTokenInfo : FareTokenInfo[]
    +ProviderCode : xs:string
    +HostTokenRef : xs:string
}
AirAvailInfo +-- FareTokenInfo
class FareTokenInfo {
    +FareInfoRef : xs:string
    +HostTokenRef : xs:string
}
class AirExchangeBundle {
    +common:AirExchangeInfo : common:AirExchangeInfo
    +AirPricingInfoRef : AirPricingInfoRef[]
    +TaxInfo : TaxInfo[]
    +common:Penalty : common:Penalty[]
}
class AirExchangeBundleList {
    +AirExchangeBundle : AirExchangeBundle[]
}
class AirExchangeBundleTotal {
    +common:AirExchangeInfo : common:AirExchangeInfo
    +common:Penalty : common:Penalty[]
}
class AirExchangeModifiers {
    +ContractCodes : ContractCodes
    +BookingDate : xs:string
    +TicketingDate : xs:string
    +AccountCode : xs:string
    +TicketDesignator : xs:string
    +AllowPenaltyFares : xs:boolean
    +PrivateFaresOnly : xs:boolean
    +UniversalRecordLocatorCode : xs:string
    +ProviderLocatorCode : xs:string
    +ProviderCode : xs:string
}
AirExchangeModifiers +-- ContractCodes
class ContractCodes {
    +ContractCode : ContractCode[]
}
class AirExchangeMulitQuoteList {
    +AirExchangeMultiQuoteOption : AirExchangeMultiQuoteOption[]
}
class AirExchangeMultiQuoteOption {
    +AirSegmentData : AirSegmentData[]
    +AirExchangeBundleTotal : AirExchangeBundleTotal
    +AirExchangeBundleList : AirExchangeBundleList[]
}
class AirExchangeTicketBundle {
    +common:TicketNumber : common:TicketNumber
    +common:FormOfPayment : common:FormOfPayment[]
    +common:FormOfPaymentRef : common:FormOfPaymentRef
    +WaiverCode : WaiverCode
}
class AirFareDiscount {
    +Percentage : xs:double
    +Amount : xs:string
    +DiscountMethod : typeFareDiscount
}
class AirFareDisplayModifiers {
    +TripType : typeFareTripType[]
    +common:CabinClass : common:CabinClass
    +PenaltyFareInformation : PenaltyFareInformation
    +FareSearchOption : typeFareSearchOption[]
    +MaxResponses : xs:integer
    +DepartureDate : xs:date
    +TicketingDate : xs:date
    +ReturnDate : xs:date
    +BaseFareOnly : xs:boolean
    +UnrestrictedFaresOnly : xs:boolean
    +FaresIndicator : typeFaresIndicator
    +CurrencyType : xs:string
    +IncludeTaxes : xs:boolean
    +IncludeEstimatedTaxes : xs:boolean
    +IncludeSurcharges : xs:boolean
    +GlobalIndicator : typeATPCOGlobalIndicator
    +ProhibitMinStayFares : xs:boolean
    +ProhibitMaxStayFares : xs:boolean
    +ProhibitAdvancePurchaseFares : xs:boolean
    +ProhibitNonRefundableFares : xs:boolean
    +ValidatedFaresOnly : xs:boolean
    +ProhibitTravelRestrictedFares : xs:boolean
    +FiledCurrency : xs:string
}
class AirFareDisplayRuleKey {
    +value : xs:string
    +ProviderCode : xs:string
}
class AirFareRuleCategory {
    +CategoryCode : typeFareRuleCategoryCode[]
    +FareInfoRef : xs:string
}
class AirFareRulesModifier {
    +AirFareRuleCategory : AirFareRuleCategory[]
}
class AirItinerary {
    +AirSegment : AirSegment[]
    +common:HostToken : common:HostToken[]
    +APISRequirements : APISRequirements[]
}
class AirItineraryDetails {
    +AirSegmentDetails : AirSegmentDetails[]
    +PassengerDetails : PassengerDetails[]
    +Key : xs:string
}
class AirItinerarySolution {
    +AirSegmentRef : AirSegmentRef[]
    +Connection : Connection[]
    +Key : xs:string
}
class AirItinerarySolutionRef {
    +Key : xs:string
}
class AirLegModifiers {
    +PermittedCabins : PermittedCabins
    +PreferredCabins : PreferredCabins
    +PermittedCarriers : PermittedCarriers
    +ProhibitedCarriers : ProhibitedCarriers
    +PreferredCarriers : PreferredCarriers
    +PermittedConnectionPoints : PermittedConnectionPoints
    +ProhibitedConnectionPoints : ProhibitedConnectionPoints
    +PreferredConnectionPoints : PreferredConnectionPoints
    +PermittedBookingCodes : PermittedBookingCodes
    +PreferredBookingCodes : PreferredBookingCodes
    +PreferredAlliances : PreferredAlliances
    +ProhibitedBookingCodes : ProhibitedBookingCodes
    +DisfavoredAlliances : DisfavoredAlliances
    +FlightType : FlightType
    +AnchorFlightData : typeAnchorFlightData
    +ProhibitOvernightLayovers : xs:boolean
    +MaxConnectionTime : xs:integer
    +ReturnFirstAvailableOnly : xs:boolean
    +AllowDirectAccess : xs:boolean
    +ProhibitMultiAirportConnection : xs:boolean
    +PreferNonStop : xs:boolean
    +OrderBy : OrderBy
    +MaxJourneyTime : xs:nonNegativeInteger
}
AirLegModifiers +-- PermittedConnectionPoints
class PermittedConnectionPoints {
    +common:ConnectionPoint : common:ConnectionPoint[]
}
AirLegModifiers +-- ProhibitedConnectionPoints
class ProhibitedConnectionPoints {
    +common:ConnectionPoint : common:ConnectionPoint[]
}
AirLegModifiers +-- PreferredConnectionPoints
class PreferredConnectionPoints {
    +common:ConnectionPoint : common:ConnectionPoint[]
}
AirLegModifiers +-- PermittedBookingCodes
class PermittedBookingCodes {
    +BookingCode : BookingCode[]
}
AirLegModifiers +-- PreferredAlliances
class PreferredAlliances {
    +Alliance : Alliance[]
}
AirLegModifiers +-- ProhibitedBookingCodes
class ProhibitedBookingCodes {
    +BookingCode : BookingCode[]
}
AirLegModifiers +-- DisfavoredAlliances
class DisfavoredAlliances {
    +Alliance : Alliance[]
}
AirLegModifiers +-- OrderBy
class OrderBy {
    +JourneyTime : xs:string
    +DepartureTime : xs:string
    +ArrivalTime : xs:string
}
OrderBy *- xs:string
class AirPricePoint {
    +AirPricingInfo : AirPricingInfo[]
    +AirPricingResultMessage : common:typeResultMessage[]
    +FeeInfo : FeeInfo[]
    +FareNote : FareNote[]
    +TaxInfo : TaxInfo[]
    +Key : xs:string
    +TotalPrice : xs:string
    +BasePrice : xs:string
    +ApproximateTotalPrice : xs:string
    +ApproximateBasePrice : xs:string
    +EquivalentBasePrice : xs:string
    +Taxes : xs:string
    +Fees : xs:string
    +Services : xs:string
    +ApproximateTaxes : xs:string
    +ApproximateFees : xs:string
    +CompleteItinerary : xs:boolean
}
class AirPricePointList {
    +AirPricePoint : AirPricePoint[]
}
class AirPriceResult {
    +AirPricingSolution : AirPricingSolution[]
    +FareRule : FareRule[]
    +AirPriceError : common:typeResultMessage
    +CommandKey : xs:string
}
class AirPricingAdjustment {
    +Adjustment : Adjustment
    +Key : xs:string
}
class AirPricingCommand {
    +AirPricingModifiers : AirPricingModifiers
    +AirSegmentPricingModifiers : AirSegmentPricingModifiers[]
    +CommandKey : xs:string
    +CabinClass : xs:string
}
class AirPricingInfo {
    +FareInfo : FareInfo[]
    +FareStatus : FareStatus
    +FareInfoRef : FareInfoRef[]
    +BookingInfo : BookingInfo[]
    +TaxInfo : TaxInfo[]
    +FareCalc : FareCalc
    +PassengerType : PassengerType[]
    +common:BookingTravelerRef : common:BookingTravelerRef[]
    +WaiverCode : WaiverCode
    +PaymentRef : PaymentRef[]
    +ChangePenalty : typeFarePenalty[]
    +CancelPenalty : typeFarePenalty[]
    +NoShowPenalty : typeFarePenalty[]
    +FeeInfo : FeeInfo[]
    +Adjustment : Adjustment[]
    +Yield : Yield[]
    +AirPricingModifiers : AirPricingModifiers
    +TicketingModifiersRef : TicketingModifiersRef[]
    +AirSegmentPricingModifiers : AirSegmentPricingModifiers[]
    +FlightOptionsList : FlightOptionsList
    +BaggageAllowances : BaggageAllowances
    +FareRulesFilter : FareRulesFilter
    +PolicyCodesList : PolicyCodesList
    +PriceChange : PriceChangeType[]
    +ActionDetails : ActionDetails
    +common:Commission : common:Commission[]
    +Origin : xs:string
    +Destination : xs:string
    +Key : xs:string
    +CommandKey : xs:string
    +ProviderCode : xs:string
    +SupplierCode : xs:string
    +TotalPrice : xs:string
    +BasePrice : xs:string
    +ApproximateTotalPrice : xs:string
    +ApproximateBasePrice : xs:string
    +EquivalentBasePrice : xs:string
    +Taxes : xs:string
    +Fees : xs:string
    +Services : xs:string
    +ApproximateTaxes : xs:string
    +ApproximateFees : xs:string
    +AmountType : xs:string
    +IncludesVAT : xs:boolean
    +ExchangeAmount : xs:string
    +ForfeitAmount : xs:string
    +Refundable : xs:boolean
    +Exchangeable : xs:boolean
    +LatestTicketingTime : xs:string
    +PricingMethod : typePricingMethod
    +Checksum : xs:string
    +ETicketability : typeEticketability
    +PlatingCarrier : xs:string
    +ProviderReservationInfoRef : xs:string
    +AirPricingInfoGroup : xs:int
    +TotalNetPrice : xs:string
    +Ticketed : xs:boolean
    +PricingType : xs:string
    +TrueLastDateToTicket : xs:string
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +InPolicy : xs:boolean
    +PreferredOption : xs:boolean
    +FareCalculationInd : xs:string
    +Cat35Indicator : xs:boolean
}
class AirPricingInfoList {
    +AirPricingInfo : AirPricingInfo[]
}
class AirPricingInfoRef {
    +Key : xs:string
}
class AirPricingModifiers {
    +ProhibitedRuleCategories : ProhibitedRuleCategories
    +AccountCodes : AccountCodes
    +PermittedCabins : PermittedCabins
    +ContractCodes : ContractCodes
    +ExemptTaxes : ExemptTaxes
    +PenaltyFareInformation : PenaltyFareInformation
    +common:DiscountCard : common:DiscountCard[]
    +PromoCodes : PromoCodes
    +ManualFareAdjustment : ManualFareAdjustment[]
    +common:PointOfSale : common:PointOfSale
    +BrandModifiers : BrandModifiers
    +MultiGDSSearchIndicator : MultiGDSSearchIndicator[]
    +PreferredCabins : PreferredCabins[]
    +ProhibitMinStayFares : xs:boolean
    +ProhibitMaxStayFares : xs:boolean
    +CurrencyType : xs:string
    +ProhibitAdvancePurchaseFares : xs:boolean
    +ProhibitNonRefundableFares : xs:boolean
    +ProhibitRestrictedFares : xs:boolean
    +FaresIndicator : typeFaresIndicator
    +FiledCurrency : xs:string
    +PlatingCarrier : xs:string
    +OverrideCarrier : xs:string
    +ETicketability : typeEticketability
    +AccountCodeFaresOnly : xs:boolean
    +Key : xs:string
    +ProhibitNonExchangeableFares : xs:boolean
    +ForceSegmentSelect : xs:boolean
    +InventoryRequestType : typeInventoryRequest
    +OneWayShop : xs:boolean
    +ProhibitUnbundledFareTypes : xs:boolean
    +ReturnServices : xs:boolean
    +ChannelId : xs:string
    +ReturnFareAttributes : xs:boolean
    +SellCheck : xs:boolean
    +ReturnFailedSegments : xs:boolean
}
AirPricingModifiers +-- ProhibitedRuleCategories
class ProhibitedRuleCategories {
    +FareRuleCategory : FareRuleCategory[]
}
AirPricingModifiers +-- AccountCodes
class AccountCodes {
    +common:AccountCode : common:AccountCode[]
}
AirPricingModifiers +-- ContractCodes
class ContractCodes {
    +ContractCode : ContractCode[]
}
AirPricingModifiers +-- PromoCodes
class PromoCodes {
    +PromoCode : PromoCode[]
}
class AirPricingPayment {
    +common:Payment : common:Payment[]
    +common:FormOfPayment : common:FormOfPayment[]
    +common:FormOfPaymentRef : common:FormOfPaymentRef
    +AirPricingInfoRef : AirPricingInfoRef[]
}
class AirPricingSolution {
    +AirSegment : AirSegment[]
    +AirSegmentRef : AirSegmentRef[]
    +Journey : Journey[]
    +LegRef : LegRef[]
    +AirPricingInfo : AirPricingInfo[]
    +FareNote : FareNote[]
    +FareNoteRef : FareNoteRef[]
    +Connection : Connection[]
    +common:MetaData : common:MetaData[]
    +AirPricingResultMessage : common:typeResultMessage[]
    +FeeInfo : FeeInfo[]
    +TaxInfo : TaxInfo[]
    +AirItinerarySolutionRef : AirItinerarySolutionRef[]
    +common:HostToken : common:HostToken[]
    +OptionalServices : OptionalServices
    +AvailableSSR : AvailableSSR
    +PricingDetails : PricingDetails
    +Key : xs:string
    +CompleteItinerary : xs:boolean
    +QuoteDate : xs:date
    +TotalPrice : xs:string
    +BasePrice : xs:string
    +ApproximateTotalPrice : xs:string
    +ApproximateBasePrice : xs:string
    +EquivalentBasePrice : xs:string
    +Taxes : xs:string
    +Fees : xs:string
    +Services : xs:string
    +ApproximateTaxes : xs:string
    +ApproximateFees : xs:string
    +Itinerary : Itinerary
}
AirPricingSolution +-- Itinerary
class Itinerary {
    +New : xs:string
    +Original : xs:string
}
Itinerary *- xs:string
class AirPricingTicketingModifiers {
    +AirPricingInfoRef : AirPricingInfoRef[]
    +TicketingModifiers : TicketingModifiers
}
class AirRefundBundle {
    +AirRefundInfo : AirRefundInfo
    +common:Name : common:Name[]
    +TaxInfo : TaxInfo[]
    +WaiverCode : WaiverCode
    +TicketNumber : xs:string
    +PTC : xs:string
    +RefundType : RefundType
}
AirRefundBundle +-- RefundType
class RefundType {
    +Auto : xs:string
    +Manual : xs:string
}
RefundType *- xs:string
class AirRefundInfo {
    +common:RefundRemark : common:RefundRemark[]
    +RefundAmount : xs:string
    +RetainAmount : xs:string
    +RefundFee : xs:string
    +RefundableTaxes : xs:string
    +FiledCurrency : xs:string
    +ConversionRate : xs:decimal
    +Taxes : xs:string
    +OriginalTicketTotal : xs:string
    +ForfeitAmount : xs:string
    +Retain : xs:boolean
    +Refund : xs:boolean
}
class AirRefundModifiers {
    +RefundDate : xs:string
    +AccountCode : xs:string
    +TicketDesignator : xs:string
}
class AirReservation {
}
AirReservation *- typeBaseAirReservation
class AirReservationLocatorCode {
    +value : xs:string
}
class AirScheduleChangedInfo {
    +AirPricingSolution : AirPricingSolution
}
class AirSearchAsynchModifiers {
    +InitialAsynchResult : InitialAsynchResult
}
AirSearchAsynchModifiers +-- InitialAsynchResult
class InitialAsynchResult {
    +MaxWait : xs:positiveInteger
}
class AirSearchModifiers {
    +DisfavoredProviders : DisfavoredProviders
    +PreferredProviders : PreferredProviders
    +DisfavoredCarriers : DisfavoredCarriers
    +PermittedCarriers : PermittedCarriers
    +ProhibitedCarriers : ProhibitedCarriers
    +PreferredCarriers : PreferredCarriers
    +PermittedCabins : PermittedCabins
    +PreferredCabins : PreferredCabins
    +PreferredAlliances : PreferredAlliances
    +DisfavoredAlliances : DisfavoredAlliances
    +PermittedBookingCodes : PermittedBookingCodes
    +PreferredBookingCodes : PreferredBookingCodes
    +ProhibitedBookingCodes : ProhibitedBookingCodes
    +FlightType : FlightType
    +MaxLayoverDuration : MaxLayoverDurationType
    +NativeSearchModifier : typeNativeSearchModifier
    +DistanceType : common:typeDistance
    +IncludeFlightDetails : xs:boolean
    +AllowChangeOfAirport : xs:boolean
    +ProhibitOvernightLayovers : xs:boolean
    +MaxSolutions : xs:integer
    +MaxConnectionTime : xs:integer
    +SearchWeekends : xs:boolean
    +IncludeExtraSolutions : xs:boolean
    +ProhibitMultiAirportConnection : xs:boolean
    +PreferNonStop : xs:boolean
    +OrderBy : OrderBy
    +ExcludeOpenJawAirport : xs:boolean
    +ExcludeGroundTransportation : xs:boolean
    +MaxJourneyTime : xs:nonNegativeInteger
    +JetServiceOnly : xs:boolean
}
AirSearchModifiers +-- DisfavoredProviders
class DisfavoredProviders {
    +common:Provider : common:Provider[]
}
AirSearchModifiers +-- PreferredProviders
class PreferredProviders {
    +common:Provider : common:Provider[]
}
AirSearchModifiers +-- DisfavoredCarriers
class DisfavoredCarriers {
    +common:Carrier : common:Carrier[]
}
AirSearchModifiers +-- PreferredAlliances
class PreferredAlliances {
    +Alliance : Alliance[]
}
AirSearchModifiers +-- DisfavoredAlliances
class DisfavoredAlliances {
    +Alliance : Alliance[]
}
AirSearchModifiers +-- PermittedBookingCodes
class PermittedBookingCodes {
    +BookingCode : BookingCode[]
}
AirSearchModifiers +-- ProhibitedBookingCodes
class ProhibitedBookingCodes {
    +BookingCode : BookingCode[]
}
AirSearchModifiers +-- OrderBy
class OrderBy {
    +JourneyTime : xs:string
    +DepartureTime : xs:string
    +ArrivalTime : xs:string
}
OrderBy *- xs:string
class AirSegment {
}
AirSegment *- typeBaseAirSegment
class AirSegmentData {
    +AirSegmentRef : AirSegmentRef[]
    +BaggageAllowance : BaggageAllowance[]
    +Brand : Brand[]
    +CabinClass : xs:string
    +ClassOfService : xs:string
}
class AirSegmentDetails {
    +PassengerDetailsRef : PassengerDetailsRef[]
    +BrandID : BrandID[]
    +BookingCodeList : xs:string
    +Key : xs:string
    +ProviderCode : xs:string
    +Carrier : xs:string
    +Origin : xs:string
    +Destination : xs:string
    +DepartureTime : xs:dateTime
    +ArrivalTime : xs:dateTime
    +Equipment : xs:string
    +ClassOfService : xs:string
    +CabinClass : xs:string
    +OperatingCarrier : xs:string
    +FlightNumber : xs:string
}
class AirSegmentError {
    +AirSegment : AirSegment
    +ErrorMessage : xs:string
}
class AirSegmentList {
    +AirSegment : AirSegment[]
}
class AirSegmentPricingModifiers {
    +PermittedBookingCodes : PermittedBookingCodes
    +AirSegmentRef : xs:string
    +CabinClass : xs:string
    +AccountCode : xs:string
    +ProhibitAdvancePurchaseFares : xs:boolean
    +ProhibitNonRefundableFares : xs:boolean
    +ProhibitPenaltyFares : xs:boolean
    +FareBasisCode : xs:string
    +FareBreak : typeFareBreak
    +ConnectionIndicator : typeConnectionIndicator
    +BrandTier : xs:string
}
AirSegmentPricingModifiers +-- PermittedBookingCodes
class PermittedBookingCodes {
    +BookingCode : BookingCode[]
}
class AirSegmentRef {
    +Key : xs:string
}
class AirSegmentSellFailureInfo {
    +AirSegmentError : AirSegmentError[]
}
class AirSegmentTicketingModifiers {
    +AirSegmentRef : xs:string
    +BrandTier : xs:string
}
class AirSolution {
    +SearchTraveler : SearchTraveler[]
    +AirSegment : AirSegment[]
    +common:HostToken : common:HostToken[]
    +FareBasis : FareBasis[]
}
class AirSolutionChangedInfo {
    +AirPricingSolution : AirPricingSolution
    +ReasonCode : ReasonCode
}
AirSolutionChangedInfo +-- ReasonCode
class ReasonCode {
    +Price : xs:string
    +Schedule : xs:string
    +Both : xs:string
}
ReasonCode *- xs:string
class AirTicketingModifiers {
    +DocumentModifiers : DocumentModifiers
    +AirPricingInfoRef : AirPricingInfoRef[]
    +TourCode : TourCode
    +TicketEndorsement : TicketEndorsement[]
    +common:Commission : common:Commission
    +common:FormOfPayment : common:FormOfPayment[]
    +common:CreditCardAuth : common:CreditCardAuth[]
    +common:Payment : common:Payment[]
    +PlatingCarrier : xs:string
    +TicketedFareOverride : xs:boolean
    +SuppressTaxAndFee : xs:boolean
    +NoComparisonSFQ : xs:boolean
}
class Alliance {
    +Code : xs:string
}
class AlternateLocationDistance {
    +common:Distance : common:Distance
    +Key : xs:string
    +SearchLocation : xs:string
    +AlternateLocation : xs:string
}
class AlternateLocationDistanceList {
    +AlternateLocationDistance : AlternateLocationDistance[]
}
class AlternateLocationDistanceRef {
    +Key : xs:string
}
class AlternateRoute {
    +Leg : Leg[]
    +Key : xs:string
}
class AlternateRouteList {
    +AlternateRoute : AlternateRoute[]
}
class ApplicableSegment {
}
ApplicableSegment *- typeApplicableSegment
class AssociatedRemark {
}
AssociatedRemark *- common:typeAssociatedRemarkWithSegmentRef
class AsyncProviderSpecificResponse {
}
AsyncProviderSpecificResponse *- common:BaseAsyncProviderSpecificResponse
class AuditData {
    +TotalPrice : xs:string
    +BasePrice : xs:string
    +ApproximateTotalPrice : xs:string
    +ApproximateBasePrice : xs:string
    +EquivalentBasePrice : xs:string
    +Taxes : xs:string
    +Fees : xs:string
    +Services : xs:string
    +ApproximateTaxes : xs:string
    +ApproximateFees : xs:string
    +TaxInfo : TaxInfo[]
    +Key : xs:string
}
class AutoPricingInfo {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +AirSegmentRef : AirSegmentRef[]
    +common:BookingTravelerRef : common:BookingTravelerRef[]
    +AirPricingModifiers : AirPricingModifiers
    +AirSegmentPricingModifiers : AirSegmentPricingModifiers[]
    +Key : xs:string
    +PricingType : xs:string
    +PlatingCarrier : xs:string
}
class AutoSeatAssignment {
    +SegmentRef : xs:string
    +Smoking : xs:boolean
    +SeatType : common:typeReqSeat
    +Group : xs:boolean
    +BookingTravelerRef : xs:string
}
class AvailabilityErrorInfo {
    +AirSegmentError : AirSegmentError[]
}
AvailabilityErrorInfo *- common:typeErrorInfo
class AvailableDiscount {
    +common:LoyaltyProgram : common:LoyaltyProgram[]
    +Amount : xs:string
    +Percent : xs:string
    +Description : xs:string
    +DiscountQualifier : xs:string
}
class AvailableSSR {
    +common:SSR : common:SSR[]
    +SSRRules : common:ServiceRuleType[]
    +common:IndustryStandardSSR : common:IndustryStandardSSR[]
}
class BackOfficeHandOff {
    +Type : typeBackOffice
    +Location : xs:string
    +PseudoCityCode : xs:string
}
class BagDetails {
    +BaggageRestriction : BaggageRestriction[]
    +AvailableDiscount : AvailableDiscount[]
    +ApplicableBags : xs:string
    +BasePrice : xs:string
    +ApproximateBasePrice : xs:string
    +Taxes : xs:string
    +TotalPrice : xs:string
    +ApproximateTotalPrice : xs:string
}
class BaggageAllowance {
    +NumberOfPieces : xs:integer
    +MaxWeight : typeWeight
}
class BaggageAllowanceInfo {
    +BagDetails : BagDetails[]
    +TravelerType : xs:string
    +FareInfoRef : xs:string
}
BaggageAllowanceInfo *- BaseBaggageAllowanceInfo
class BaggageAllowances {
    +BaggageAllowanceInfo : BaggageAllowanceInfo[]
    +CarryOnAllowanceInfo : CarryOnAllowanceInfo[]
    +EmbargoInfo : EmbargoInfo[]
}
class BaggageRestriction {
    +Dimension : Dimension[]
    +MaxWeight : typeUnitOfMeasure[]
    +TextInfo : TextInfo[]
}
class BaseBaggageAllowanceInfo {
    +URLInfo : URLInfo[]
    +TextInfo : TextInfo[]
    +Origin : xs:string
    +Destination : xs:string
    +Carrier : xs:string
}
class BillingDetailItem {
    +Name : typeBillingDetailsName
    +DataType : typeBillingDetailsDataType
    +MinLength : xs:string
    +MaxLength : xs:string
    +Value : xs:string
}
class BookingCode {
    +Code : xs:string
}
class BookingCodeInfo {
    +CabinClass : xs:string
    +BookingCounts : xs:string
}
class BookingInfo {
    +BookingCode : xs:string
    +BookingCount : xs:string
    +CabinClass : xs:string
    +FareInfoRef : xs:string
    +SegmentRef : xs:string
    +CouponRef : xs:string
    +AirItinerarySolutionRef : xs:string
    +HostTokenRef : xs:string
}
class BookingRules {
    +BookingRulesFareReference : BookingRulesFareReference[]
    +RuleInfo : RuleInfo[]
    +Restriction : Restriction[]
    +DocumentRequired : DocumentRequired[]
    +GenderDobRequired : xs:boolean
}
BookingRules +-- RuleInfo
class RuleInfo {
    +ChargesRules : ChargesRules
}
class BookingRulesFareReference {
    +value : xs:string
    +ClassOfService : xs:string
    +TicketDesignatorCode : xs:string
    +AccountCode : xs:string
    +UpgrageAllowed : xs:boolean
    +UpgradeClassOfService : xs:string
}
class Brand {
    +Title : Title[]
    +Text : Text[]
    +ImageLocation : ImageLocation[]
    +OptionalServices : OptionalServices
    +Rules : Rules[]
    +ServiceAssociations : ServiceAssociations
    +UpsellBrand : UpsellBrand
    +ApplicableSegment : typeApplicableSegment[]
    +DefaultBrandDetail : DefaultBrandDetail[]
    +Key : xs:string
    +BrandID : xs:string
    +Name : xs:string
    +AirItineraryDetailsRef : xs:string
    +UpSellBrandID : xs:string
    +BrandFound : xs:boolean
    +UpSellBrandFound : xs:boolean
    +BrandedDetailsAvailable : xs:boolean
    +Carrier : xs:string
    +BrandTier : xs:string
    +BrandMaintained : xs:string
}
class BrandID {
    +Id : xs:string
}
class BrandInfo {
    +Key : xs:string
    +BrandID : xs:string
    +AirPricingInfoRef : xs:string
    +FareInfoRef : xs:string
}
class BrandModifiers {
    +FareFamilyDisplay : FareFamilyDisplay
    +BasicDetailsOnly : BasicDetailsOnly
}
BrandModifiers +-- FareFamilyDisplay
class FareFamilyDisplay {
    +ModifierType : xs:string
}
BrandModifiers +-- BasicDetailsOnly
class BasicDetailsOnly {
    +ReturnBasicDetails : xs:boolean
}
class BrandingInfo {
    +PriceRange : PriceRange[]
    +Text : Text[]
    +Title : Title[]
    +ImageLocation : ImageLocation[]
    +ServiceGroup : ServiceGroup
    +AirSegmentRef : common:typeSegmentRef[]
    +Key : xs:string
    +ServiceSubCode : xs:string
    +ExternalServiceName : xs:string
    +ServiceType : xs:string
    +CommercialName : xs:string
    +Chargeable : xs:string
}
class BundledService {
    +Carrier : xs:string
    +CarrierSubCode : xs:boolean
    +ServiceType : xs:string
    +ServiceSubCode : xs:string
    +Name : xs:string
    +Booking : typeBooking
    +Occurrence : xs:positiveInteger
}
class BundledServices {
    +BundledService : BundledService[]
}
class CHGType {
    +PenFee : PenFeeType[]
}
class CO2Emission {
    +AirSegmentRef : xs:string
    +Value : xs:float
}
class CO2Emissions {
    +CO2Emission : CO2Emission[]
    +TotalValue : xs:float
    +Unit : xs:string
    +Category : xs:string
    +Source : xs:string
}
class CarrierCode {
    +value : xs:string
}
class CarrierList {
    +CarrierCode : CarrierCode[]
    +IncludeCarrier : xs:boolean
}
class CarryOnAllowanceInfo {
    +CarryOnDetails : CarryOnDetails[]
}
CarryOnAllowanceInfo *- BaseBaggageAllowanceInfo
CarryOnAllowanceInfo +-- CarryOnDetails
class CarryOnDetails {
    +BaggageRestriction : BaggageRestriction[]
    +ApplicableCarryOnBags : xs:string
    +BasePrice : xs:string
    +ApproximateBasePrice : xs:string
    +Taxes : xs:string
    +TotalPrice : xs:string
    +ApproximateTotalPrice : xs:string
}
class CategoryDetailsType {
    +CategoryDetails : ValueDetails[]
    +Value : xs:string
}
class Characteristic {
    +Value : xs:string
    +Position : typePosition
    +RowLocation : typeRowLocation
    +PADISCode : xs:string
}
class ChargesRules {
    +VoluntaryChanges : VoluntaryChanges[]
    +VoluntaryRefunds : VoluntaryRefunds[]
}
ChargesRules +-- VoluntaryChanges
class VoluntaryChanges {
    +Penalty : Penalty
    +VolChangeInd : xs:boolean
}
ChargesRules +-- VoluntaryRefunds
class VoluntaryRefunds {
    +Penalty : Penalty
    +VolChangeInd : xs:boolean
}
class CodeshareInfo {
    +value : xs:string
    +OperatingCarrier : xs:string
    +OperatingFlightNumber : xs:string
}
class CompanyName {
    +SupplierCode : xs:string
}
class ConjunctedTicketInfo {
    +Number : xs:string
    +IATANumber : xs:string
    +TicketIssueDate : xs:dateTime
    +TicketingAgentSignOn : xs:string
    +CountryCode : xs:string
    +Status : common:typeTicketStatus
}
class Connection {
    +FareNote : FareNote
    +ChangeOfPlane : xs:boolean
    +ChangeOfTerminal : xs:boolean
    +ChangeOfAirport : xs:boolean
    +StopOver : xs:boolean
    +MinConnectionTime : xs:int
    +Duration : xs:int
    +SegmentIndex : xs:int
    +FlightDetailsIndex : xs:int
    +IncludeStopOverToFareQuote : typeIgnoreStopOver
}
class ContractCode {
    +ProviderCode : xs:string
    +SupplierCode : xs:string
    +Code : xs:string
    +CompanyName : xs:string
}
class Coupon {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +TicketDesignator : TicketDesignator[]
    +Key : xs:string
    +CouponNumber : xs:integer
    +OperatingCarrier : xs:string
    +OperatingFlightNumber : xs:string
    +MarketingCarrier : xs:string
    +MarketingFlightNumber : xs:string
    +Origin : xs:string
    +Destination : xs:string
    +DepartureTime : xs:string
    +ArrivalTime : xs:string
    +StopoverCode : xs:boolean
    +BookingClass : xs:string
    +FareBasis : xs:string
    +NotValidBefore : xs:date
    +NotValidAfter : xs:date
    +Status : xs:string
    +SegmentGroup : xs:integer
    +MarriageGroup : xs:integer
}
class CreditSummary {
    +CurrencyCode : xs:string
    +CurrentBalance : xs:decimal
    +InitialCredit : xs:decimal
}
class CustomerReceiptInfo {
    +BookingTravelerRef : xs:string
    +EmailRef : xs:string
}
class CustomerSearch {
    +value : xs:string
}
class DefaultBrandDetail {
}
DefaultBrandDetail *- typeDefaultBrandDetail
class DestinationPurposeCode {
    +Destination : typeDestinationCode
    +Purpose : typePurposeCode
}
class DetailedBillingInformation {
    +common:FormOfPaymentRef : common:FormOfPaymentRef
    +AirPricingInfoRef : AirPricingInfoRef[]
    +BillingDetailItem : BillingDetailItem[]
}
class Dimension {
    +type : xs:string
}
Dimension *- typeUnitOfMeasure
class Document {
    +Sequence : xs:positiveInteger
    +Type : xs:string
    +Level : xs:string
}
class DocumentInfo {
    +TicketInfo : TicketInfo[]
    +MCOInfo : common:MCOInformation[]
    +TCRInfo : TCRInfo[]
}
class DocumentModifiers {
    +GenerateItineraryInvoice : xs:boolean
    +GenerateAccountingInterface : xs:boolean
}
class DocumentOptions {
    +PassengerReceiptOverride : PassengerReceiptOverride
    +OverrideOption : xs:string[]
    +SuppressItineraryRemarks : xs:boolean
    +GenerateItinNumbers : xs:boolean
}
class DocumentRequired {
    +DocType : xs:string
    +IncludeExcludeUseInd : xs:boolean
    +DocId : xs:string
    +AllowedIds : xs:string
}
class DocumentSelect {
    +BackOfficeHandOff : BackOfficeHandOff
    +Itinerary : Itinerary
    +IssueTicketOnly : xs:boolean
    +IssueElectronicTicket : xs:boolean
    +FaxIndicator : xs:boolean
}
class EMD {
    +FulfillmentType : xs:integer
    +FulfillmentTypeDescription : xs:string
    +AssociatedItem : xs:string
    +AvailabilityChargeIndicator : AvailabilityChargeIndicator
    +RefundReissueIndicator : RefundReissueIndicator
    +Commissionable : xs:boolean
    +MileageIndicator : xs:boolean
    +Location : xs:string
    +Date : xs:dateTime
    +Booking : typeBooking
    +DisplayCategory : typeDisplayCategory
    +Reusable : xs:boolean
}
EMD +-- AvailabilityChargeIndicator
class AvailabilityChargeIndicator {
    +X : xs:string
    +E : xs:string
    +F : xs:string
    +G : xs:string
    +H : xs:string
}
AvailabilityChargeIndicator *- xs:string
EMD +-- RefundReissueIndicator
class RefundReissueIndicator {
    +Refundable : xs:string
    +NonRefundable : xs:string
    +Reuse : xs:string
}
RefundReissueIndicator *- xs:string
class EMDCommission {
    +Type : common:typeAdjustmentType
    +Value : xs:decimal
    +CurrencyCode : xs:string
}
class EMDCoupon {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +Number : xs:integer
    +Status : xs:string
    +SvcDescription : xs:string
    +ConsumedAtIssuanceInd : xs:boolean
    +RFIC : xs:string
    +RFISC : xs:string
    +RFIDescription : xs:string
    +Origin : xs:string
    +Destination : xs:string
    +FlightNumber : xs:string
    +PresentTo : xs:string
    +PresentAt : xs:string
    +NonRefundableInd : xs:boolean
    +MarketingCarrier : xs:string
    +Key : xs:string
}
class EMDEndorsement {
    +value : xs:string
}
class EMDInfo {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +EMDTravelerInfo : EMDTravelerInfo
    +common:SupplierLocator : common:SupplierLocator[]
    +ElectronicMiscDocument : ElectronicMiscDocument[]
    +common:Payment : common:Payment
    +common:FormOfPayment : common:FormOfPayment
    +EMDPricingInfo : EMDPricingInfo
    +EMDEndorsement : EMDEndorsement[]
    +FareCalc : FareCalc
    +EMDCommission : EMDCommission
    +ProviderCode : xs:string
    +ProviderLocatorCode : xs:string
    +Key : xs:string
}
class EMDPricingInfo {
    +TaxInfo : TaxInfo[]
    +BaseFare : xs:string
    +TotalFare : xs:string
    +TotalTax : xs:string
    +EquivFare : xs:string
}
class EMDSummary {
    +EMDCoupon : EMDCoupon[]
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +Number : xs:string
    +PrimaryDocumentIndicator : xs:boolean
    +InConjunctionWith : xs:string
    +AssociatedTicketNumber : xs:string
    +PlatingCarrier : xs:string
    +IssueDate : xs:dateTime
    +Key : xs:string
}
class EMDSummaryInfo {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +EMDSummary : EMDSummary[]
    +EMDTravelerInfo : EMDTravelerInfo
    +common:Payment : common:Payment
    +ProviderReservationInfoRef : xs:string
    +Key : xs:string
}
class EMDTravelerInfo {
    +NameInfo : NameInfo
    +TravelerType : xs:string
    +Age : xs:integer
}
EMDTravelerInfo +-- NameInfo
class NameInfo {
    +Prefix : xs:string
    +First : xs:string
    +Middle : xs:string
    +Last : xs:string
    +Suffix : xs:string
}
class ETR {
    +TotalPrice : xs:string
    +BasePrice : xs:string
    +ApproximateTotalPrice : xs:string
    +ApproximateBasePrice : xs:string
    +EquivalentBasePrice : xs:string
    +Taxes : xs:string
    +Fees : xs:string
    +Services : xs:string
    +ApproximateTaxes : xs:string
    +ApproximateFees : xs:string
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +AirReservationLocatorCode : AirReservationLocatorCode
    +common:AgencyInfo : common:AgencyInfo
    +common:BookingTraveler : common:BookingTraveler
    +common:FormOfPayment : common:FormOfPayment[]
    +common:Payment : common:Payment[]
    +common:CreditCardAuth : common:CreditCardAuth[]
    +common:SupplierLocator : common:SupplierLocator[]
    +FareCalc : FareCalc
    +Ticket : Ticket[]
    +common:Commission : common:Commission[]
    +AirPricingInfo : AirPricingInfo
    +AuditData : AuditData
    +common:Restriction : common:Restriction[]
    +WaiverCode : WaiverCode
    +BaggageAllowances : BaggageAllowances
    +Key : xs:string
    +Refundable : xs:boolean
    +Exchangeable : xs:boolean
    +TourCode : xs:string
    +IssuedDate : xs:string
    +BulkTicket : xs:boolean
    +ProviderCode : xs:string
    +ProviderLocatorCode : xs:string
    +IATANumber : xs:string
    +PseudoCityCode : xs:string
    +CountryCode : xs:string
    +PlatingCarrier : xs:string
}
class ElectronicMiscDocument {
    +EMDCoupon : EMDCoupon[]
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +Number : xs:string
    +PrimaryDocumentIndicator : xs:boolean
    +InConjunctionWith : xs:string
    +AssociatedTicketNumber : xs:string
    +PlatingCarrier : xs:string
    +IssueDate : xs:dateTime
    +Status : xs:string
    +Key : xs:string
}
class Embargo {
    +Key : xs:string
    +Carrier : xs:string
    +SegmentRef : xs:string
    +Name : xs:string
    +Text : xs:string
    +SecondaryType : xs:string
    +Type : xs:string
    +Url : xs:anyURI
    +ServiceSubCode : xs:string
}
class EmbargoInfo {
}
EmbargoInfo *- BaseBaggageAllowanceInfo
class EmbargoList {
    +Embargo : Embargo[]
}
class Enumeration {
    +SolutionGroup : SolutionGroup[]
}
class ExchangeAirSegment {
    +AirSegment : AirSegment
    +common:CabinClass : common:CabinClass
    +FareBasisCode : xs:string
}
class ExchangeEligibilityInfo {
    +ExchangePenaltyInfo : ExchangePenaltyInfo[]
    +EligibleFares : xs:string
    +RefundableFares : xs:string
    +PassedAutomationChecks : xs:boolean
}
class ExchangePenaltyInfo {
    +PenaltyInformation : PenaltyInformation[]
    +PTC : xs:string
    +MinimumChangeFee : xs:string
    +MaximumChangeFee : xs:string
}
class ExchangedTicketInfo {
    +Number : xs:string
}
class ExcludeTicketing {
    +BookingTravelerRef : xs:string[]
}
class ExemptOBFee {
    +SubCode : xs:string[]
}
class ExemptTaxes {
    +CountryCode : xs:string[]
    +TaxCategory : xs:string[]
    +AllTaxes : xs:boolean
    +TaxTerritory : xs:string
    +CompanyName : xs:string
}
class ExpertSolution {
    +LegPrice : LegPrice[]
    +Key : xs:string
    +TotalPrice : xs:string
    +ApproximateTotalPrice : xs:string
    +CreatedDate : xs:date
}
class ExpertSolutionList {
    +ExpertSolution : ExpertSolution[]
}
class Facility {
    +Characteristic : Characteristic[]
    +common:Remark : common:Remark[]
    +PassengerSeatPrice : PassengerSeatPrice[]
    +TaxInfo : TaxInfo[]
    +EMD : EMD
    +common:ServiceData : common:ServiceData[]
    +TourCode : TourCode
    +Type : typeFacility
    +SeatCode : xs:string
    +Availability : typeSeatAvailability
    +SeatPrice : xs:string
    +Paid : xs:boolean
    +ServiceSubCode : xs:string
    +SSRCode : xs:string
    +IssuanceReason : xs:string
    +BaseSeatPrice : xs:string
    +Taxes : xs:string
    +Quantity : xs:integer
    +SequenceNumber : xs:integer
    +InclusiveOfTax : xs:boolean
    +InterlineSettlementAllowed : xs:boolean
    +GeographySpecification : xs:string
    +Source : xs:string
    +OptionalServiceRef : xs:string
    +SeatInformationRef : xs:string
}
class FareBasis {
    +Code : xs:string
    +SegmentRef : xs:string
}
class FareCalc {
    +value : xs:string
}
class FareDetails {
    +FareTicketDesignator : FareTicketDesignator
    +Key : xs:string
    +PassengerDetailRef : xs:string
    +FareBasis : xs:string
}
class FareDetailsRef {
    +Key : xs:string
}
class FareDisplay {
    +FareDisplayRule : FareDisplayRule
    +FarePricing : FarePricing[]
    +FareRestriction : FareRestriction[]
    +FareRoutingInformation : FareRoutingInformation
    +FareMileageInformation : FareMileageInformation
    +AirFareDisplayRuleKey : AirFareDisplayRuleKey
    +BookingCode : BookingCode[]
    +common:AccountCode : common:AccountCode[]
    +AddlBookingCodeInformation : AddlBookingCodeInformation
    +FareRuleFailureInfo : FareRuleFailureInfo
    +PriceChange : PriceChangeType[]
    +Carrier : xs:string
    +FareBasis : xs:string
    +Amount : xs:string
    +TripType : typeFareTripType
    +FareTypeCode : xs:string
    +SpecialFare : xs:boolean
    +InstantPurchase : xs:boolean
    +EligibilityRestricted : xs:boolean
    +FlightRestricted : xs:boolean
    +StopoversRestricted : xs:boolean
    +TransfersRestricted : xs:boolean
    +BlackoutsExist : xs:boolean
    +AccompaniedTravel : xs:boolean
    +MileOrRouteBasedFare : typeMileOrRouteBasedFare
    +GlobalIndicator : typeATPCOGlobalIndicator
    +Origin : xs:string
    +Destination : xs:string
    +FareTicketingCode : xs:string
    +FareTicketingDesignator : xs:string
}
class FareDisplayRule {
    +RuleAdvancedPurchase : RuleAdvancedPurchase
    +RuleLengthOfStay : RuleLengthOfStay
    +RuleCharges : RuleCharges
    +RuleNumber : xs:string
    +Source : xs:string
    +TariffNumber : xs:string
}
class FareGuaranteeInfo {
    +GuaranteeDate : xs:date
    +GuaranteeType : typeFareGuarantee
}
class FareInfo {
    +FareTicketDesignator : FareTicketDesignator[]
    +FareSurcharge : FareSurcharge[]
    +common:AccountCode : common:AccountCode[]
    +ContractCode : ContractCode[]
    +common:Endorsement : common:Endorsement[]
    +BaggageAllowance : BaggageAllowance
    +FareRuleKey : FareRuleKey
    +FareRuleFailureInfo : FareRuleFailureInfo
    +FareRemarkRef : FareRemarkRef[]
    +Brand : Brand
    +common:Commission : common:Commission
    +FareAttributes : xs:string
    +ChangePenalty : typeFarePenalty
    +CancelPenalty : typeFarePenalty
    +FareRulesFilter : FareRulesFilter
    +Key : xs:string
    +FareBasis : xs:string
    +PassengerTypeCode : xs:string
    +Origin : xs:string
    +Destination : xs:string
    +EffectiveDate : xs:string
    +TravelDate : xs:date
    +DepartureDate : xs:date
    +Amount : xs:string
    +PrivateFare : typePrivateFare
    +NegotiatedFare : xs:boolean
    +TourCode : xs:string
    +WaiverCode : xs:string
    +NotValidBefore : xs:date
    +NotValidAfter : xs:date
    +PseudoCityCode : xs:string
    +FareFamily : xs:string
    +PromotionalFare : xs:boolean
    +CarCode : xs:string
    +ValueCode : xs:string
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +BulkTicket : xs:boolean
    +InclusiveTour : xs:boolean
    +Value : xs:string
    +SupplierCode : xs:string
    +TaxAmount : xs:string
}
class FareInfoList {
    +FareInfo : FareInfo[]
}
class FareInfoMessage {
    +value : xs:string
    +Key : xs:string
}
class FareInfoRef {
    +Key : xs:string
}
class FareMileageInformation {
    +value : xs:string
}
class FareNote {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +value : xs:string
    +Key : xs:string
    +Precedence : xs:integer
    +NoteName : xs:string
    +FareInfoMessageRef : xs:string
}
class FareNoteList {
    +FareNote : FareNote[]
}
class FareNoteRef {
    +Key : xs:string
}
class FarePricing {
    +PassengerType : xs:string
    +TotalFareAmount : xs:string
    +PrivateFare : xs:boolean
    +NegotiatedFare : xs:boolean
    +AutoPriceable : xs:boolean
    +TotalNetFareAmount : xs:string
    +BaseFare : xs:string
    +Taxes : xs:string
    +MMid : xs:string
}
class FareRemark {
    +Text : xs:string[]
    +URL : URL[]
    +Key : xs:string
    +Name : xs:string
}
class FareRemarkList {
    +FareRemark : FareRemark[]
}
class FareRemarkRef {
    +Key : xs:string
}
class FareRestriction {
    +FareRestrictionDaysOfWeek : FareRestrictionDaysOfWeek[]
    +FareRestrictionDate : FareRestrictionDate[]
    +FareRestrictionSaleDate : FareRestrictionSaleDate
    +FareRestrictionSeasonal : FareRestrictionSeasonal[]
    +FareRestrictiontype : typeFareRestrictionType
}
class FareRestrictionDate {
    +Direction : typeFareDirectionality
    +StartDate : xs:string
    +EndDate : xs:string
    +EndDateIndicator : EndDateIndicator
}
FareRestrictionDate +-- EndDateIndicator
class EndDateIndicator {
    +Commence : xs:string
    +Complete : xs:string
}
EndDateIndicator *- xs:string
class FareRestrictionDaysOfWeek {
    +Direction : typeFareDirectionality
    +TripType : typeFareTripType
    +Monday : xs:boolean
    +Tuesday : xs:boolean
    +Wednesday : xs:boolean
    +Thursday : xs:boolean
    +Friday : xs:boolean
    +Saturday : xs:boolean
    +Sunday : xs:boolean
}
class FareRestrictionSaleDate {
    +StartDate : xs:date
    +EndDate : xs:date
}
class FareRestrictionSeasonal {
    +Comment : xs:string
    +VariationByTravelDates : xs:string
    +SeasonalRange1Ind : xs:string
    +SeasonalRange1StartDate : xs:string
    +SeasonalRange1EndDate : xs:string
    +SeasonalRange2Ind : xs:string
    +SeasonalRange2StartDate : xs:string
    +SeasonalRange2EndDate : xs:string
}
class FareRoutingInformation {
    +value : xs:string
}
class FareRule {
    +ProviderCode : xs:string
    +SupplierCode : xs:string
    +FareRuleLong : FareRuleLong[]
    +FareRuleShort : FareRuleShort[]
    +RuleAdvancedPurchase : RuleAdvancedPurchase
    +RuleLengthOfStay : RuleLengthOfStay
    +RuleCharges : RuleCharges
    +FareRuleResultMessage : common:typeResultMessage[]
    +StructuredFareRules : StructuredFareRulesType
    +FareInfoRef : xs:string
    +RuleNumber : xs:string
    +Source : xs:string
    +TariffNumber : xs:string
}
class FareRuleCategory {
    +Category : xs:integer
}
class FareRuleCategoryTypes {
    +CategoryDetails : ValueDetails[]
    +VariableCategoryDetails : CategoryDetailsType[]
    +Value : xs:string
}
class FareRuleFailureInfo {
    +Reason : xs:string[]
}
class FareRuleKey {
    +value : xs:string
    +FareInfoRef : xs:string
    +ProviderCode : xs:string
}
class FareRuleLong {
    +value : xs:string
    +Category : xs:integer
    +Type : xs:string
}
class FareRuleLongRef {
    +Key : xs:string
}
class FareRuleLookup {
    +common:AccountCode : common:AccountCode
    +common:PointOfSale : common:PointOfSale
    +Origin : xs:string
    +Destination : xs:string
    +Carrier : xs:string
    +FareBasis : xs:string
    +ProviderCode : xs:string
    +DepartureDate : xs:date
    +TicketingDate : xs:date
}
class FareRuleNameValue {
    +Name : xs:string
    +Value : xs:string
}
class FareRuleShort {
    +FareRuleNameValue : FareRuleNameValue[]
    +Category : xs:integer
    +TableNumber : xs:string
}
class FareRuleShortRef {
    +Key : xs:string
}
class FareRulesFilter {
    +Refundability : Refundability
    +LatestTicketingTime : xs:dateTime
    +CHG : CHGType
    +MIN : MINType
    +MAX : MAXType
    +ADV : ADVType
    +OTH : OTHType
}
FareRulesFilter +-- Refundability
class Refundability {
    +Value : xs:string
}
class FareRulesFilterCategory {
    +CategoryCode : xs:string[]
    +FareInfoRef : xs:string
}
class FareStatus {
    +FareStatusFailureInfo : FareStatusFailureInfo
    +Code : typeFareStatusCode
}
class FareStatusFailureInfo {
    +Code : xs:string
    +Reason : xs:string
}
class FareSurcharge {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +Key : xs:string
    +Type : xs:string
    +Amount : xs:string
    +SegmentRef : xs:string
    +CouponRef : xs:string
}
class FareTicketDesignator {
    +Value : xs:string
}
class FareType {
    +Code : xs:string
}
class FaxDetails {
    +common:PhoneNumber : common:PhoneNumber
    +TermConditions : TermConditions
    +common:Remark : common:Remark[]
    +IncludeCoverSheet : xs:boolean
    +To : xs:string
    +From : xs:string
    +DeptBillingCode : xs:string
    +InvoiceNumber : xs:string
}
class FaxDetailsInformation {
    +AirPricingInfoRef : AirPricingInfoRef[]
    +FaxDetails : FaxDetails
}
class FeeApplication {
    +value : xs:string
    +Code : xs:string
}
class FeeInfo {
}
FeeInfo *- common:typeFeeInfo
class FlexExploreModifiers {
    +Destination : xs:string[]
    +Type : Type
    +Radius : xs:integer
    +GroupName : xs:string
}
FlexExploreModifiers +-- Type
class Type {
    +AnyWhere : xs:string
    +Area : xs:string
    +Zone : xs:string
    +Country : xs:string
    +State : xs:string
    +DistanceInMiles : xs:string
    +DistanceInKilometers : xs:string
    +Destination : xs:string
    +Group : xs:string
}
Type *- xs:string
class FlightDetails {
    +Origin : xs:string
    +Destination : xs:string
    +DepartureTime : xs:string
    +ArrivalTime : xs:string
    +FlightTime : xs:integer
    +TravelTime : xs:integer
    +Distance : xs:integer
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +Connection : Connection
    +Meals : Meals[]
    +InFlightServices : InFlightServices[]
    +Key : xs:string
    +Equipment : xs:string
    +OnTimePerformance : xs:integer
    +OriginTerminal : xs:string
    +DestinationTerminal : xs:string
    +GroundTime : xs:integer
    +AutomatedCheckin : xs:boolean
}
class FlightDetailsList {
    +FlightDetails : FlightDetails[]
}
class FlightDetailsRef {
    +Key : xs:string
}
class FlightInfo {
    +FlightInfoDetail : FlightInfoDetail[]
    +FlightInfoErrorMessage : common:typeResultMessage[]
    +CriteriaKey : xs:string
    +Carrier : xs:string
    +FlightNumber : xs:string
    +Origin : xs:string
    +Destination : xs:string
    +DepartureDate : xs:date
    +ClassOfService : xs:string
}
class FlightInfoCriteria {
    +Key : xs:string
    +Carrier : xs:string
    +FlightNumber : xs:string
    +Origin : xs:string
    +Destination : xs:string
    +DepartureDate : xs:date
    +ClassOfService : xs:string
}
class FlightInfoDetail {
    +CodeshareInfo : CodeshareInfo
    +Meals : Meals[]
    +InFlightServices : InFlightServices[]
    +Variance : Variance[]
    +Origin : xs:string
    +Destination : xs:string
    +ScheduledDepartureTime : xs:string
    +ScheduledArrivalTime : xs:string
    +TravelTime : xs:integer
    +ETicketability : typeEticketability
    +Equipment : xs:string
    +OriginTerminal : xs:string
    +OriginGate : xs:string
    +DestinationTerminal : xs:string
    +DestinationGate : xs:string
    +AutomatedCheckin : xs:boolean
}
class FlightOption {
    +Option : Option[]
    +LegRef : xs:string
    +Origin : xs:string
    +Destination : xs:string
}
class FlightOptionsList {
    +FlightOption : FlightOption[]
}
class FlightTimeDetail {
    +DaysOfOperation : typeDaysOfOperation
    +Connection : Connection
    +Key : xs:string
    +VendorCode : xs:string
    +FlightNumber : xs:string
    +Origin : xs:string
    +Destination : xs:string
    +DepartureTime : xs:time
    +ArrivalTime : xs:time
    +StopCount : xs:integer
    +Equipment : xs:string
    +ScheduleStartDate : xs:date
    +ScheduleEndDate : xs:date
    +DisplayOption : xs:boolean
    +OnTimePerformance : xs:integer
    +DayChange : xs:integer
    +JourneyTime : xs:integer
    +FlightTime : xs:integer
    +StartTerminal : xs:string
    +EndTerminal : xs:string
    +FirstIntermediateStop : xs:string
    +LastIntermediateStop : xs:string
    +InsideAvailability : xs:string
    +SecureSell : xs:string
    +AvailabilitySource : xs:string
}
class FlightTimeTableCriteria {
    +GeneralTimeTable : GeneralTimeTable
    +SpecificTimeTable : SpecificTimeTable
}
class FlightType {
    +RequireSingleCarrier : xs:boolean
    +MaxConnections : xs:integer
    +MaxStops : xs:integer
    +NonStopDirects : xs:boolean
    +StopDirects : xs:boolean
    +SingleOnlineCon : xs:boolean
    +DoubleOnlineCon : xs:boolean
    +TripleOnlineCon : xs:boolean
    +SingleInterlineCon : xs:boolean
    +DoubleInterlineCon : xs:boolean
    +TripleInterlineCon : xs:boolean
}
class GeneralTimeTable {
    +DaysOfOperation : typeDaysOfOperation
    +FlightOrigin : common:typeLocation
    +FlightDestination : common:typeLocation
    +CarrierList : CarrierList
    +StartDate : xs:string
    +EndDate : xs:string
    +StartTime : xs:time
    +EndTime : xs:time
    +IncludeConnection : xs:boolean
}
class GroupedOption {
    +OptionalServiceRef : xs:string
}
class GroupedOptionInfo {
    +GroupedOption : GroupedOption[]
}
class HostReservation {
    +Carrier : xs:string
    +CarrierLocatorCode : xs:string
    +ProviderCode : xs:string
    +ProviderLocatorCode : xs:string
    +UniversalLocatorCode : xs:string
    +ETicket : xs:boolean
}
class HostTokenList {
    +common:HostToken : common:HostToken[]
}
class ImageLocation {
    +value : xs:string
    +Type : xs:string
    +ImageWidth : xs:nonNegativeInteger
    +ImageHeight : xs:nonNegativeInteger
}
class InFlightServices {
    +value : xs:string
}
class IncludeAddlBookingCodeInfo {
    +Type : typeCarrierCode
    +SecondaryCarrier : xs:string
}
class InvoluntaryChange {
    +TicketEndorsement : TicketEndorsement
}
class IssuanceModifiers {
    +common:FormOfPaymentRef : common:FormOfPaymentRef
    +common:FormOfPayment : common:FormOfPayment
    +CustomerReceiptInfo : CustomerReceiptInfo
    +EMDEndorsement : EMDEndorsement
    +EMDCommission : EMDCommission
    +PlatingCarrier : xs:string
}
class Itinerary {
    +Type : typeItinerary
    +Option : typeItineraryOption
    +SeparateIndicator : xs:boolean
}
class Journey {
    +AirSegmentRef : AirSegmentRef[]
    +TravelTime : xs:duration
}
class JourneyData {
    +AirSegment : AirSegment[]
}
class LandCharges {
    +Tax : Tax[]
    +Base : xs:string
    +Total : xs:string
    +Miscellaneous : xs:string
    +PrePaid : xs:string
    +Deposit : xs:string
}
class LanguageOption {
    +Language : xs:string
    +Country : xs:string
}
class Leg {
    +LegDetail : LegDetail[]
    +Key : xs:string
    +Group : xs:int
    +Origin : xs:string
    +Destination : xs:string
}
class LegDetail {
    +Key : xs:string
    +OriginAirport : xs:string
    +DestinationAirport : xs:string
    +Carrier : xs:string
    +TravelDate : xs:string
    +FlightNumber : xs:string
}
class LegPrice {
    +LegDetail : LegDetail[]
    +Key : xs:string
    +TotalPrice : xs:string
    +ApproximateTotalPrice : xs:string
}
class LegRef {
    +Key : xs:string
}
class LoyaltyCardDetails {
    +SupplierCode : xs:string
    +PriorityCode : xs:string
}
class MAXType {
    +HoursMax : xs:boolean
    +DaysMax : xs:boolean
    +MonthsMax : xs:boolean
    +OccurIndMax : xs:boolean
    +SameDayMax : xs:boolean
    +StartIndMax : xs:boolean
    +CompletionInd : xs:boolean
    +TmDOWMax : xs:integer
    +NumOccurMax : xs:integer
}
class MINType {
    +HoursMin : xs:boolean
    +DaysMin : xs:boolean
    +MonthsMin : xs:boolean
    +OccurIndMin : xs:boolean
    +SameDayMin : xs:boolean
    +TmDOWMin : xs:integer
    +FareComponent : xs:integer
    +NumOccurMin : xs:integer
}
class ManualFareAdjustment {
    +AppliedOn : common:typeAdjustmentTarget
    +AdjustmentType : common:typeAdjustmentType
    +Value : xs:decimal
    +PassengerRef : xs:string
    +TicketDesignator : xs:string
    +FareType : xs:string
}
class MaxLayoverDurationType {
    +Domestic : xs:integer
    +Gateway : xs:integer
    +International : xs:integer
}
enum Meals {
    Meal = Meal
    ColdMeal = ColdMeal
    HotMeal = HotMeal
    Breakfast = Breakfast
    ContinentalBreakfast = ContinentalBreakfast
    Lunch = Lunch
    Dinner = Dinner
    SnackOrBrunch = SnackOrBrunch
    FoodForPurchase = FoodForPurchase
    ComplimentaryRefreshments = ComplimentaryRefreshments
    AlcoholicBeveragesForPurchase = AlcoholicBeveragesForPurchase
    ComplimentaryAlcoholicBeverages = ComplimentaryAlcoholicBeverages
    FoodAndBeveragesForPurchase = FoodAndBeveragesForPurchase
    NoMealService = NoMealService
    RefreshmentsForPurchase = RefreshmentsForPurchase
}
class MerchandisingAvailabilityDetails {
    +AirItineraryDetails : AirItineraryDetails
    +common:AccountCode : common:AccountCode
}
class MerchandisingDetails {
    +AirItineraryDetails : AirItineraryDetails[]
    +common:AccountCode : common:AccountCode[]
}
class MerchandisingPricingModifiers {
    +common:AccountCode : common:AccountCode[]
}
class MultiGDSSearchIndicator {
    +Type : xs:string
    +ProviderCode : xs:string
    +DefaultProvider : xs:boolean
    +PrivateFareCode : xs:string
    +PrivateFareCodeOnly : xs:boolean
}
class OTHType {
    +Cat0 : xs:boolean
    +Cat1 : xs:boolean
    +Cat2 : xs:boolean
    +Cat3 : xs:boolean
    +Cat4 : xs:boolean
    +Cat5 : xs:boolean
    +Cat6 : xs:boolean
    +Cat7 : xs:boolean
    +Cat8 : xs:boolean
    +Cat9 : xs:boolean
    +Cat10 : xs:boolean
    +Cat11 : xs:boolean
    +Cat12 : xs:boolean
    +Cat13 : xs:boolean
    +Cat14 : xs:boolean
    +Cat15 : xs:boolean
    +Cat16 : xs:boolean
    +Cat17 : xs:boolean
    +Cat18 : xs:boolean
    +Cat19 : xs:boolean
    +Cat20 : xs:boolean
    +Cat21 : xs:boolean
    +Cat22 : xs:boolean
    +Cat23 : xs:boolean
    +Cat24 : xs:boolean
    +Cat25 : xs:boolean
    +Cat26 : xs:boolean
    +Cat27 : xs:boolean
    +Cat28 : xs:boolean
    +Cat29 : xs:boolean
    +Cat30 : xs:boolean
    +Cat31 : xs:boolean
    +RestrictiveDt : xs:date
    +SurchargeAmt : xs:decimal
    +NotUSACity : xs:boolean
    +MissingRules : xs:boolean
}
class OfferAvailabilityModifiers {
    +ServiceType : xs:string[]
    +Carrier : xs:string[]
    +CurrencyType : xs:string
}
class Option {
    +BookingInfo : BookingInfo[]
    +Connection : Connection[]
    +Key : xs:string
    +TravelTime : xs:duration
}
class OptionalService {
    +common:ServiceData : common:ServiceData[]
    +common:ServiceInfo : common:ServiceInfo
    +common:Remark : common:Remark[]
    +TaxInfo : TaxInfo[]
    +FeeInfo : FeeInfo[]
    +EMD : EMD
    +BundledServices : BundledServices
    +AdditionalInfo : AdditionalInfo[]
    +FeeApplication : FeeApplication
    +Text : Text[]
    +PriceRange : PriceRange[]
    +TourCode : TourCode
    +BrandingInfo : BrandingInfo
    +Title : Title[]
    +ProviderCode : xs:string
    +SupplierCode : xs:string
    +OptionalServicesRuleRef : xs:string
    +Type : xs:string
    +Confirmation : xs:string
    +SecondaryType : xs:string
    +PurchaseWindow : common:typePurchaseWindow
    +Priority : xs:integer
    +Available : xs:boolean
    +Entitled : xs:boolean
    +PerTraveler : xs:boolean
    +CreateDate : xs:dateTime
    +PaymentRef : xs:string
    +ServiceStatus : xs:string
    +Quantity : xs:integer
    +SequenceNumber : xs:integer
    +ServiceSubCode : xs:string
    +SSRCode : xs:string
    +IssuanceReason : xs:string
    +ProviderDefinedType : xs:string
    +TotalPrice : xs:string
    +BasePrice : xs:string
    +ApproximateTotalPrice : xs:string
    +ApproximateBasePrice : xs:string
    +EquivalentBasePrice : xs:string
    +Taxes : xs:string
    +Fees : xs:string
    +Services : xs:string
    +ApproximateTaxes : xs:string
    +ApproximateFees : xs:string
    +Key : xs:string
    +AssessIndicator : typeAssessIndicator
    +Mileage : xs:integer
    +ApplicableFFLevel : xs:integer
    +Private : xs:boolean
    +SSRFreeText : xs:string
    +IsPricingApproximate : xs:boolean
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +Chargeable : xs:string
    +InclusiveOfTax : xs:boolean
    +InterlineSettlementAllowed : xs:boolean
    +GeographySpecification : xs:string
    +ExcessWeightRate : xs:string
    +Source : xs:string
    +ViewableOnly : xs:boolean
    +DisplayText : xs:string
    +WeightInExcess : xs:string
    +TotalWeight : xs:string
    +BaggageUnitPrice : xs:string
    +FirstPiece : xs:int
    +LastPiece : xs:int
    +Restricted : xs:boolean
    +IsRepriceRequired : xs:boolean
    +BookedQuantity : xs:string
    +Group : xs:string
    +PseudoCityCode : xs:string
    +Tag : xs:string
    +DisplayOrder : xs:integer
}
class OptionalServiceModifier {
    +Type : xs:string
    +SecondaryType : xs:string
    +SupplierCode : xs:string
    +ServiceSubCode : xs:string
    +TravelDate : xs:date
    +Description : xs:string
}
class OptionalServiceModifiers {
    +OptionalServiceModifier : OptionalServiceModifier[]
}
class OptionalServiceRef {
    +value : xs:string
}
class OptionalServices {
    +OptionalServicesTotal : OptionalServicesTotal
    +OptionalService : OptionalService[]
    +GroupedOptionInfo : GroupedOptionInfo[]
    +OptionalServiceRules : common:ServiceRuleType[]
}
OptionalServices +-- OptionalServicesTotal
class OptionalServicesTotal {
    +TotalPrice : xs:string
    +BasePrice : xs:string
    +ApproximateTotalPrice : xs:string
    +ApproximateBasePrice : xs:string
    +EquivalentBasePrice : xs:string
    +Taxes : xs:string
    +Fees : xs:string
    +Services : xs:string
    +ApproximateTaxes : xs:string
    +ApproximateFees : xs:string
    +TaxInfo : TaxInfo[]
    +FeeInfo : FeeInfo[]
}
class OptionalServicesInfo {
    +AirPricingSolution : AirPricingSolution
    +common:FormOfPayment : common:FormOfPayment[]
    +common:FormOfPaymentRef : common:FormOfPaymentRef[]
}
class OriginalItineraryDetails {
    +ItineraryType : common:typeItineraryCode
    +BulkTicket : xs:boolean
    +TicketingPCC : xs:string
    +TicketingIATA : xs:string
    +TicketingCountry : xs:string
    +TourCode : xs:string
    +TicketingDate : xs:date
}
class OverrideCode {
    +value : xs:string
}
class PCC {
    +common:OverridePCC : common:OverridePCC
    +common:PointOfSale : common:PointOfSale[]
    +TicketAgency : TicketAgency
}
class PassengerDetails {
    +LoyaltyCardDetails : LoyaltyCardDetails[]
    +Key : xs:string
    +Code : xs:string
    +Age : xs:integer
}
class PassengerDetailsRef {
    +Key : xs:string
}
class PassengerReceiptOverride {
    +value : xs:string
}
class PassengerSeatPrice {
    +BookingTravelerRef : xs:string
    +Amount : xs:string
}
class PassengerTicketNumber {
    +TicketNumber : xs:string
    +BookingTravelerRef : xs:string
}
class PassengerType {
    +FareGuaranteeInfo : FareGuaranteeInfo
}
PassengerType *- common:typePassengerType
class PaymentRef {
    +Key : xs:string
}
class PenFeeType {
    +DepRequired : xs:boolean
    +DepNonRef : xs:boolean
    +TkNonRef : xs:boolean
    +AirVFee : xs:boolean
    +Cancellation : xs:boolean
    +FailConfirmSpace : xs:boolean
    +ItinChg : xs:boolean
    +ReplaceTk : xs:boolean
    +Applicable : xs:boolean
    +ApplicableTo : xs:boolean
    +Amt : xs:decimal
    +Type : xs:string
    +Currency : xs:string
}
class Penalty {
    +Amount : xs:string
    +PenaltyType : xs:string
}
class PenaltyFareInformation {
    +PenaltyInfo : typeFarePenalty
    +ProhibitPenaltyFares : xs:boolean
}
class PenaltyInformation {
    +value : xs:string
    +Carrier : xs:string
    +FareBasis : xs:string
    +FareComponent : xs:integer
    +PriceableUnit : xs:integer
    +BoardPoint : xs:string
    +OffPoint : xs:string
    +MinimumChangeFee : xs:string
    +MaximumChangeFee : xs:string
    +FiledCurrency : xs:string
    +ConversionRate : xs:decimal
    +Refundable : xs:boolean
    +ChangeFeeApplicationCode : xs:string
}
class PermittedCabins {
    +common:CabinClass : common:CabinClass[]
}
class PermittedCarriers {
    +common:Carrier : common:Carrier[]
}
class PersonName {
    +First : xs:string
    +Last : xs:string
    +Prefix : xs:string
}
class PersonNameSearch {
    +Last : xs:string
}
class PocketItineraryRemark {
}
PocketItineraryRemark *- common:typeAssociatedRemarkWithSegmentRef
class PolicyCodesList {
    +PolicyCode : xs:int[]
}
class PrePayAccount {
    +CreditSummary : CreditSummary
    +PrePayPriceInfo : PrePayPriceInfo
    +ProgramTitle : xs:string
    +CertificateNumber : xs:string
    +ProgramName : xs:string
    +EffectiveDate : xs:date
    +ExpireDate : xs:date
}
class PrePayCustomer {
    +PersonName : PersonName
    +common:Email : common:Email[]
    +Address : common:typeStructuredAddress[]
    +RelatedTraveler : RelatedTraveler[]
    +common:LoyaltyCard : common:LoyaltyCard[]
}
class PrePayId {
    +CompanyName : CompanyName
    +Id : xs:string
    +Type : xs:string
}
class PrePayPriceInfo {
    +TaxInfo : TaxInfo[]
    +BaseFare : xs:string
    +TotalFare : xs:string
    +TotalTax : xs:string
}
class PrePayProfileInfo {
    +PrePayId : PrePayId
    +PrePayCustomer : PrePayCustomer
    +PrePayAccount : PrePayAccount
    +Affiliations : Affiliations
    +AccountRelatedRules : AccountRelatedRules
    +StatusCode : xs:string
    +CreatorID : xs:string
}
class PreferredBookingCodes {
    +BookingCode : BookingCode[]
}
class PreferredCabins {
    +common:CabinClass : common:CabinClass
}
class PreferredCarriers {
    +common:Carrier : common:Carrier[]
}
class PriceChangeType {
    +value : xs:string
    +Amount : xs:string
    +Carrier : xs:string
    +SegmentRef : xs:string
}
class PriceRange {
    +DefaultCurrency : xs:boolean
    +StartPrice : xs:string
    +EndPrice : xs:string
}
class PricingDetails {
    +AdvisoryMessage : xs:string[]
    +EndorsementText : xs:string[]
    +WaiverText : xs:string
    +LowFarePricing : xs:boolean
    +LowFareFound : xs:boolean
    +PenaltyApplies : xs:boolean
    +DiscountApplies : xs:boolean
    +ItineraryType : common:typeItineraryCode
    +ValidatingVendorCode : xs:string
    +ForTicketingOnDate : xs:date
    +LastDateToTicket : xs:date
    +FormOfRefund : common:typeFormOfRefund
    +AccountCode : xs:string
    +BankersSellingRate : xs:decimal
    +PricingType : common:typePricingType
    +ConversionRate : xs:decimal
    +RateOfExchange : xs:decimal
    +OriginalTicketCurrency : xs:string
}
class PrintBlankFormItinerary {
    +IncludeDescription : xs:boolean
    +IncludeHeader : xs:boolean
}
class ProhibitedCabins {
    +common:CabinClass : common:CabinClass[]
}
class ProhibitedCarriers {
    +common:Carrier : common:Carrier[]
}
class PromoCode {
    +Code : xs:string
    +ProviderCode : xs:string
    +SupplierCode : xs:string
}
class RailCoachDetails {
    +RailCoachNumber : xs:string
    +AvailableRailSeats : xs:string
    +RailSeatMapAvailability : xs:boolean
}
class RefundFailureInfo {
    +common:TicketNumber : common:TicketNumber
    +common:Name : common:Name
    +TCRNumber : xs:string
    +BookingTravelerRef : xs:string[]
    +Code : xs:integer
    +Message : xs:string
}
class RelatedTraveler {
    +common:LoyaltyCard : common:LoyaltyCard[]
    +PersonName : PersonName
    +CreditsUsed : CreditsUsed
    +StatusCode : xs:string
    +Relation : xs:string
}
RelatedTraveler +-- CreditsUsed
class CreditsUsed {
    +UsedCredit : xs:decimal
    +CurrencyCode : xs:string
}
class RepricingModifiers {
    +PrivateFareOptions : xs:string
    +FareType : FareType[]
    +FareTicketDesignator : FareTicketDesignator
    +OverrideCurrency : OverrideCurrency
    +AirSegmentPricingModifiers : AirSegmentPricingModifiers[]
    +WithholdTaxCode : xs:string[]
    +PriceClassOfService : common:typePriceClassOfService
    +CreateDate : xs:date
    +ReissueLocCityCode : xs:string
    +ReissueLocCountryCode : xs:string
    +BulkTicket : xs:boolean
    +AccountCode : xs:string
    +PenaltyAsTaxCode : xs:string
    +AirPricingSolutionRef : xs:string
    +PenaltyToFare : xs:boolean
    +PricePTCOnly : xs:boolean
    +BrandDetails : xs:boolean
    +BrandModifier : xs:string
    +JetServiceOnly : xs:boolean
    +TimeWindow : xs:integer
    +FlightType : FlightType
    +MultiAirportSearch : xs:boolean
    +ConnectionPoint : xs:string
}
RepricingModifiers +-- OverrideCurrency
class OverrideCurrency {
    +CurrencyCode : xs:string
    +CountryCode : xs:string
}
RepricingModifiers +-- FlightType
class FlightType {
    +Direct : xs:string
    +NonStop : xs:string
    +SingleConnection : xs:string
    +NoRestrictions : xs:string
}
FlightType *- xs:string
class Restriction {
    +DaysOfWeekRestriction : DaysOfWeekRestriction[]
    +RestrictionPassengerTypes : RestrictionPassengerTypes[]
}
Restriction +-- DaysOfWeekRestriction
class DaysOfWeekRestriction {
    +Mon : xs:boolean
    +Tue : xs:boolean
    +Wed : xs:boolean
    +Thu : xs:boolean
    +Fri : xs:boolean
    +Sat : xs:boolean
    +Sun : xs:boolean
    +RestrictionExistsInd : xs:boolean
    +Application : xs:string
    +IncludeExcludeUseInd : xs:boolean
}
Restriction +-- RestrictionPassengerTypes
class RestrictionPassengerTypes {
    +MaxNbrTravelers : xs:string
    +TotalNbrPTC : xs:string
}
class Route {
    +Leg : Leg[]
    +Key : xs:string
}
class RouteList {
    +Route : Route[]
}
class RoutingRules {
    +Routing : Routing[]
}
RoutingRules +-- Routing
class Routing {
    +DirectionInfo : DirectionInfo[]
    +RoutingConstructedInd : xs:boolean
    +Number : xs:string
    +RoutingRestriction : xs:string
}
Routing +-- DirectionInfo
class DirectionInfo {
    +LocationCode : xs:string
    +Direction : Direction
}
DirectionInfo +-- Direction
class Direction {
    +To : xs:string
    +From : xs:string
}
Direction *- xs:string
class Row {
    +Facility : Facility[]
    +Characteristic : Characteristic[]
    +Number : xs:integer
    +SearchTravelerRef : xs:string
}
class Rows {
    +Row : Row[]
    +SegmentRef : xs:string
}
class RuleAdvancedPurchase {
    +ReservationLatestPeriod : xs:string
    +ReservationLatestUnit : typeStayUnit
    +TicketingEarliestDate : xs:string
    +TicketingLatestDate : xs:string
    +MoreRulesPresent : xs:boolean
}
class RuleCharges {
    +PenaltyType : xs:string
    +DepartureStatus : xs:string
    +Amount : xs:string
    +Percent : xs:decimal
    +MoreRulesPresent : xs:boolean
}
class RuleLengthOfStay {
    +MinimumStay : typeRestrictionLengthOfStay
    +MaximumStay : typeRestrictionLengthOfStay
}
class Rules {
    +RulesText : xs:string
}
class SearchAirLeg {
    +SearchOrigin : common:typeSearchLocation[]
    +SearchDestination : common:typeSearchLocation[]
    +SearchDepTime : common:typeFlexibleTimeSpec[]
    +SearchArvTime : common:typeTimeSpec[]
    +AirLegModifiers : AirLegModifiers
}
class SearchTraveler {
    +common:AirSeatAssignment : common:AirSeatAssignment[]
    +Key : xs:string
}
SearchTraveler *- common:typePassengerType
class SeatInformation {
    +Power : xs:string
    +Video : xs:string
    +Type : xs:string
    +Description : xs:string
    +Rating : Rating
    +Key : xs:string
}
SeatInformation +-- Rating
class Rating {
    +value : xs:string
    +Number : xs:integer
}
class SegmentIndex {
    +value : xs:int
}
class SegmentModifiers {
    +AirSegmentRef : AirSegmentRef
    +TicketValidity : TicketValidity
    +BaggageAllowance : BaggageAllowance
    +TicketDesignator : xs:string
}
class SegmentSelect {
    +AirSegmentRef : typeSegmentRef[]
    +HotelReservationRef : typeNonAirReservationRef[]
    +VehicleReservationRef : typeNonAirReservationRef[]
    +PassiveSegmentRef : typeSegmentRef[]
    +AllConfirmedAir : xs:boolean
    +AllWaitlistedAir : xs:boolean
    +AllHotel : xs:boolean
    +AllVehicle : xs:boolean
    +AllPassive : xs:boolean
}
class SelectionModifiers {
    +AirSegmentRef : AirSegmentRef[]
    +SvcSegmentRef : xs:string[]
    +SupplierCode : xs:string
    +RFIC : xs:string
}
class ServiceAssociations {
    +ApplicableSegment : ApplicableSegment[]
}
ServiceAssociations +-- ApplicableSegment
class ApplicableSegment {
    +common:ResponseMessage : common:ResponseMessage
    +OptionalServiceRef : OptionalServiceRef
    +Key : xs:string
}
class ServiceGroup {
    +ServiceSubGroup : ServiceSubGroup[]
    +Code : xs:string
}
class ServiceSubGroup {
    +Code : xs:string
}
class SolutionGroup {
    +PermittedAccountCodes : PermittedAccountCodes
    +PreferredAccountCodes : PreferredAccountCodes
    +ProhibitedAccountCodes : ProhibitedAccountCodes
    +PermittedPointOfSales : PermittedPointOfSales
    +ProhibitedPointOfSales : ProhibitedPointOfSales
    +Count : xs:integer
    +TripType : typeTripType
    +Diversification : typeDiversity
    +Tag : xs:string
    +Primary : xs:boolean
}
SolutionGroup +-- PermittedAccountCodes
class PermittedAccountCodes {
    +common:AccountCode : common:AccountCode[]
}
SolutionGroup +-- PreferredAccountCodes
class PreferredAccountCodes {
    +common:AccountCode : common:AccountCode[]
}
SolutionGroup +-- ProhibitedAccountCodes
class ProhibitedAccountCodes {
    +common:AccountCode : common:AccountCode[]
}
SolutionGroup +-- PermittedPointOfSales
class PermittedPointOfSales {
    +common:PointOfSale : common:PointOfSale[]
}
SolutionGroup +-- ProhibitedPointOfSales
class ProhibitedPointOfSales {
    +common:PointOfSale : common:PointOfSale[]
}
class SpecificSeatAssignment {
    +BookingTravelerRef : xs:string
    +SegmentRef : xs:string
    +FlightDetailRef : xs:string
    +SeatId : xs:string
    +RailCoachNumber : xs:string
}
class SpecificTimeTable {
    +FlightOrigin : FlightOrigin
    +FlightDestination : FlightDestination
    +StartDate : xs:string
    +Carrier : xs:string
    +FlightNumber : xs:string
}
SpecificTimeTable +-- FlightOrigin
class FlightOrigin {
    +common:Airport : common:Airport
}
SpecificTimeTable +-- FlightDestination
class FlightDestination {
    +common:Airport : common:Airport
}
class SplitTicketingSearch {
    +RoundTrip : xs:integer
}
class SponsoredFltInfo {
    +SponsoredLNB : xs:nonNegativeInteger
    +NeutralLNB : xs:nonNegativeInteger
    +FltKey : xs:string
}
class StructuredFareRulesType {
    +FareRuleCategoryType : FareRuleCategoryTypes[]
}
class SvcSegment {
    +Key : xs:string
    +Carrier : xs:string
    +Status : xs:string
    +NumberOfItems : xs:integer
    +Origin : xs:string
    +Destination : xs:string
    +StartDate : xs:date
    +TravelOrder : xs:integer
    +BookingTravelerRef : xs:string
    +RFIC : xs:string
    +RFISC : xs:string
    +SvcDescription : xs:string
    +Fee : xs:string
    +EMDNumber : xs:string
}
class TCR {
    +common:FormOfPayment : common:FormOfPayment[]
    +common:Payment : common:Payment[]
    +common:BookingTraveler : common:BookingTraveler[]
    +PassengerTicketNumber : PassengerTicketNumber[]
    +AirPricingInfo : AirPricingInfo[]
    +common:AgencyInfo : common:AgencyInfo
    +AirReservationLocatorCode : AirReservationLocatorCode
    +common:SupplierLocator : common:SupplierLocator[]
    +common:RefundRemark : common:RefundRemark[]
    +TCRNumber : xs:string
    +Status : typeTCRStatus
    +ModifiedDate : xs:string
    +ConfirmedDate : xs:string
    +BasePrice : xs:string
    +Taxes : xs:string
    +Fees : xs:string
    +Refundable : xs:boolean
    +Exchangeable : xs:boolean
    +Voidable : xs:boolean
    +Modifiable : xs:boolean
    +ProviderCode : xs:string
    +ProviderLocatorCode : xs:string
    +RefundAccessCode : xs:string
    +RefundAmount : xs:string
    +RefundFee : xs:string
    +ForfeitAmount : xs:string
}
class TCRExchangeBundle {
    +common:AirExchangeInfo : common:AirExchangeInfo
    +AirPricingInfoRef : AirPricingInfoRef[]
    +FeeInfo : FeeInfo[]
    +TaxInfo : TaxInfo[]
    +common:Penalty : common:Penalty[]
    +TCRNumber : xs:string
}
class TCRInfo {
    +Status : typeTCRStatus
    +Date : xs:dateTime
    +TCRNumber : xs:string
    +ProviderReservationInfoRef : xs:string
}
class TCRRefundBundle {
    +AirRefundInfo : AirRefundInfo
    +WaiverCode : WaiverCode
    +AirSegment : AirSegment[]
    +FeeInfo : FeeInfo[]
    +TaxInfo : TaxInfo[]
    +common:HostToken : common:HostToken[]
    +TCRNumber : xs:string
    +RefundType : RefundType
    +RefundAccessCode : xs:string
}
TCRRefundBundle +-- RefundType
class RefundType {
    +Auto : xs:string
    +Manual : xs:string
    +Ignored : xs:string
}
RefundType *- xs:string
class Tax {
    +Category : xs:string
    +Amount : xs:string
}
class TaxInfo {
}
TaxInfo *- common:typeTaxInfo
class TermConditions {
    +LanguageOption : LanguageOption[]
    +IncludeTermConditions : xs:boolean
}
class Text {
}
Text *- typeTextElement
class TextInfo {
    +Text : xs:string[]
    +Title : xs:string
}
class Ticket {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +Coupon : Coupon[]
    +TicketEndorsement : TicketEndorsement[]
    +TourCode : TourCode[]
    +ExchangedTicketInfo : ExchangedTicketInfo[]
    +Key : xs:string
    +TicketNumber : xs:string
    +TicketStatus : common:typeTicketStatus
}
class TicketAgency {
    +ProviderCode : xs:string
    +PseudoCityCode : xs:string
}
class TicketDesignator {
    +Value : xs:string
}
class TicketEndorsement {
    +Value : xs:string
}
class TicketFailureInfo {
    +AirPricingInfoRef : AirPricingInfoRef[]
    +common:Name : common:Name
    +Code : xs:integer
    +Message : xs:string
    +BookingTravelerRef : xs:string
}
class TicketInfo {
    +common:Name : common:Name
    +ConjunctedTicketInfo : ConjunctedTicketInfo[]
    +ExchangedTicketInfo : ExchangedTicketInfo[]
    +Number : xs:string
    +IATANumber : xs:string
    +TicketIssueDate : xs:dateTime
    +TicketingAgentSignOn : xs:string
    +CountryCode : xs:string
    +Status : common:typeTicketStatus
    +BulkTicket : xs:boolean
    +BookingTravelerRef : xs:string
    +AirPricingInfoRef : xs:string
}
class TicketValidity {
    +NotValidBefore : xs:date
    +NotValidAfter : xs:date
}
class TicketingModifiers {
    +ElStat : common:typeElementStatus
    +KeyOverride : xs:boolean
    +BookingTravelerRef : xs:string[]
    +NetRemit : typeTicketModifierAmountType
    +NetFare : typeTicketModifierAmountType
    +ActualSellingFare : typeTicketModifierAmountType
    +InvoiceFare : typeTicketModifierAccountingType
    +CorporateDiscount : typeTicketModifierAccountingType
    +AccountingInfo : typeTicketModifierAccountingType
    +BulkTicket : BulkTicket
    +GroupTour : typeBulkTicketModifierType
    +common:Commission : common:Commission
    +TourCode : TourCode
    +TicketEndorsement : TicketEndorsement[]
    +ValueModifier : typeTicketModifierValueType
    +DocumentSelect : DocumentSelect
    +DocumentOptions : DocumentOptions
    +SegmentSelect : SegmentSelect
    +SegmentModifiers : SegmentModifiers[]
    +common:SupplierLocator : common:SupplierLocator
    +DestinationPurposeCode : DestinationPurposeCode
    +LanguageOption : LanguageOption[]
    +LandCharges : LandCharges
    +PrintBlankFormItinerary : PrintBlankFormItinerary
    +ExcludeTicketing : ExcludeTicketing
    +ExemptOBFee : ExemptOBFee
    +IsPrimaryDI : xs:boolean
    +DocumentInstructionNumber : xs:string
    +Reference : xs:string
    +Status : xs:string
    +FreeText : xs:string
    +NameNumber : xs:string
    +TicketRecord : xs:string
    +PlatingCarrier : xs:string
    +ExemptVAT : xs:boolean
    +NetRemitApplied : xs:boolean
    +FreeTicket : xs:boolean
    +CurrencyOverrideCode : xs:string
    +Key : xs:string
}
TicketingModifiers +-- BulkTicket
class BulkTicket {
    +NonRefundable : xs:boolean
}
BulkTicket *- typeBulkTicketModifierType
class TicketingModifiersRef {
    +Key : xs:string
}
class Title {
}
Title *- typeTextElement
class TourCode {
    +Value : xs:string
}
class TravelArranger {
    +value : xs:string
    +CompanyShortName : xs:string
    +Code : xs:string
}
class URL {
    +value : xs:string
    +Type : xs:string
}
class URLInfo {
    +Text : xs:string[]
    +URL : xs:anyURI[]
}
class UpsellBrand {
    +FareBasis : xs:string
    +FareInfoRef : xs:string
}
class ValueDetails {
    +Name : xs:string
    +Value : xs:string
}
class Variance {
    +Type : typeVarianceType
    +Time : xs:string
    +Indicator : typeVarianceIndicator
    +Reason : xs:string
}
class VoidDocumentInfo {
    +DocumentNumber : xs:string
    +DocumentType : common:DocumentType
}
VoidDocumentInfo +-- DocumentType
class DocumentType {
    +Service Fee : xs:string
    +Paper Ticket : xs:string
    +MCO : xs:string
    +E-Ticket : xs:string
}
DocumentType *- xs:string
class VoidFailureInfo {
    +value : xs:string
    +TicketNumber : xs:string
    +Code : xs:integer
}
class VoidResultInfo {
    +FailureRemark : xs:string
    +DocumentNumber : xs:string
    +DocumentType : common:DocumentType
    +ResultType : xs:string
}
VoidResultInfo +-- DocumentType
class DocumentType {
    +Service Fee : xs:string
    +Paper Ticket : xs:string
    +MCO : xs:string
    +E-Ticket : xs:string
}
DocumentType *- xs:string
class WaiverCode {
    +TourCode : xs:string
    +TicketDesignator : xs:string
    +Endorsement : xs:string
}
class Yield {
    +Amount : xs:string
    +BookingTravelerRef : xs:string
}
enum typeATPCOGlobalIndicator {
    AL = AL
    AP = AP
    AT = AT
    CA = CA
    CT = CT
    EH = EH
    FE = FE
    IN = IN
    NA = NA
    PA = PA
    PN = PN
    PO = PO
    RU = RU
    RW = RW
    SA = SA
    SP = SP
    TB = TB
    TS = TS
    US = US
    WH = WH
    ZZ = ZZ
}
class typeAirReservationWithFOP {
    +common:FormOfPayment : common:FormOfPayment[]
}
typeAirReservationWithFOP *- typeBaseAirReservation
enum typeAlliance {
    StarAlliance = StarAlliance
    OneWorld = OneWorld
    KLMNorthwestAlliance = KLMNorthwestAlliance
    SkyTeam = SkyTeam
    OWCode = OWCode
}
class typeAnchorFlightData {
    +AirlineCode : xs:string
    +FlightNumber : xs:string
    +ConnectionIndicator : xs:boolean
}
class typeApplicableSegment {
    +Key : xs:string
    +AirItineraryDetailsRef : xs:string
    +BookingCounts : xs:string
}
enum typeAssessIndicator {
    MileageAndCurrency = MileageAndCurrency
    MileageOrCurrency = MileageOrCurrency
}
enum typeBackOffice {
    Accounting = Accounting
    Global = Global
    NonAccounting = NonAccounting
    NonAccountingRemote = NonAccountingRemote
    Dual = Dual
}
class typeBaseAirReservation {
    +OptionalServices : OptionalServices
    +common:SupplierLocator : common:SupplierLocator[]
    +common:ThirdPartyInformation : common:ThirdPartyInformation[]
    +DocumentInfo : DocumentInfo
    +common:BookingTravelerRef : common:BookingTravelerRef[]
    +common:ProviderReservationInfoRef : common:ProviderReservationInfoRef[]
    +AirSegment : AirSegment[]
    +SvcSegment : SvcSegment[]
    +AirPricingInfo : AirPricingInfo[]
    +common:Payment : common:Payment[]
    +common:CreditCardAuth : common:CreditCardAuth[]
    +FareNote : FareNote[]
    +FeeInfo : FeeInfo[]
    +TaxInfo : typeTaxInfoWithPaymentRef[]
    +TicketingModifiers : TicketingModifiers[]
    +AssociatedRemark : AssociatedRemark[]
    +PocketItineraryRemark : PocketItineraryRemark[]
    +AirExchangeBundleTotal : AirExchangeBundleTotal
    +AirExchangeBundle : AirExchangeBundle[]
}
typeBaseAirReservation *- common:BaseReservation
class typeBaseAirSegment {
    +SponsoredFltInfo : SponsoredFltInfo
    +CodeshareInfo : CodeshareInfo
    +AirAvailInfo : AirAvailInfo[]
    +FlightDetails : FlightDetails[]
    +FlightDetailsRef : FlightDetailsRef[]
    +AlternateLocationDistanceRef : AlternateLocationDistanceRef[]
    +Connection : Connection
    +common:SellMessage : common:SellMessage[]
    +RailCoachDetails : RailCoachDetails[]
    +OpenSegment : xs:boolean
    +Group : xs:int
    +Carrier : xs:string
    +CabinClass : xs:string
    +FlightNumber : xs:string
    +ParticipantLevel : xs:string
    +LinkAvailability : xs:boolean
    +PolledAvailabilityOption : xs:string
    +AvailabilityDisplayType : xs:string
    +FlightTime : xs:integer
    +TravelTime : xs:integer
    +Distance : xs:integer
    +Origin : xs:string
    +Destination : xs:string
    +DepartureTime : xs:string
    +ArrivalTime : xs:string
    +ProviderCode : xs:string
    +SupplierCode : xs:string
    +ClassOfService : xs:string
    +ETicketability : typeEticketability
    +Equipment : xs:string
    +MarriageGroup : xs:int
    +NumberOfStops : xs:int
    +Seamless : xs:boolean
    +ChangeOfPlane : xs:boolean
    +GuaranteedPaymentCarrier : xs:string
    +HostTokenRef : xs:string
    +ProviderReservationInfoRef : xs:string
    +PassiveProviderReservationInfoRef : xs:string
    +OptionalServicesIndicator : xs:boolean
    +AvailabilitySource : xs:string
    +APISRequirementsRef : xs:string
    +BlackListed : xs:boolean
    +OperationalStatus : xs:string
    +NumberInParty : xs:positiveInteger
    +RailCoachNumber : xs:string
    +BookingDate : xs:date
    +FlownSegment : xs:boolean
    +ScheduleChange : xs:boolean
    +BrandIndicator : xs:string
}
typeBaseAirSegment *- common:Segment
enum typeBillingDetailsDataType {
    Alpha = Alpha
    Numeric = Numeric
    AlphaNumeric = AlphaNumeric
    Date = Date
}
enum typeBillingDetailsName {
    PersonalId = PersonalId
    CostAccountNumber = CostAccountNumber
    AccountNumber = AccountNumber
    ProjectNumber = ProjectNumber
    ActionCode = ActionCode
    DepartmentCode = DepartmentCode
    AccountingUnit = AccountingUnit
    OrderNumber = OrderNumber
    Destination = Destination
    FileDate = FileDate
}
enum typeBooking {
    SSR = SSR
    Auxillary Segment = Auxillary Segment
    Available for Display/Pricing = Available for Display/Pricing
    Contact Carrier for Booking = Contact Carrier for Booking
    No Booking Required = No Booking Required
    Apply booking per service = Apply booking per service
}
class typeBulkTicketModifierType {
    +SuppressOnFareCalc : xs:boolean
}
enum typeCarrierCode {
    Primary = Primary
    Secondary = Secondary
}
enum typeConnectionIndicator {
    AvailabilityAndPricing = AvailabilityAndPricing
    TurnAround = TurnAround
    Stopover = Stopover
}
enum typeCouponStatus {
    A = A
    C = C
    F = F
    L = L
    O = O
    P = P
    R = R
    E = E
    V = V
    Z = Z
    U = U
    S = S
    I = I
    D = D
}
class typeDaysOfOperation {
    +Mon : xs:boolean
    +Tue : xs:boolean
    +Wed : xs:boolean
    +Thu : xs:boolean
    +Fri : xs:boolean
    +Sat : xs:boolean
    +Sun : xs:boolean
}
class typeDefaultBrandDetail {
    +Text : Text[]
    +ImageLocation : ImageLocation[]
    +ApplicableSegment : ApplicableSegment[]
    +BrandID : xs:string
}
enum typeDestinationCode {
    MexicoCostRicaCentralAmerica = MexicoCostRicaCentralAmerica
    Caribbean = Caribbean
    SouthAmerica = SouthAmerica
    Europe = Europe
    Africa = Africa
    MiddleEastWesternAsia = MiddleEastWesternAsia
    Asia = Asia
    AustraliaNewZealandPacificIslands = AustraliaNewZealandPacificIslands
    CanadaGreenland = CanadaGreenland
    USA = USA
}
enum typeDisplayCategory {
    With Itinerary Pricing = With Itinerary Pricing
    Store = Store
    SpecialService = SpecialService
}
enum typeDiversity {
    Blend = Blend
    Airports = Airports
    Carrier = Carrier
    Origin = Origin
    Destination = Destination
    DateCombination = DateCombination
    FirstODDate = FirstODDate
    SecondODDate = SecondODDate
    FirstOD = FirstOD
    SecondOD = SecondOD
}
enum typeEticketability {
    Yes = Yes
    No = No
    Required = Required
    Ticketless = Ticketless
}
enum typeFacility {
    Seat = Seat
    Aisle = Aisle
    Open = Open
    Unknown = Unknown
}
class typeFailureInfo {
    +Code : xs:integer
    +Message : xs:string
}
enum typeFareBreak {
    MustBreak = MustBreak
    MustOnlyBreak = MustOnlyBreak
    MustNotBreak = MustNotBreak
}
enum typeFareDirectionality {
    Outbound = Outbound
    Return = Return
    All = All
}
enum typeFareDiscount {
    BaseReCalcUSTaxes = BaseReCalcUSTaxes
    BaseNoReCalcUSTaxes = BaseNoReCalcUSTaxes
    BaseTax = BaseTax
}
enum typeFareGuarantee {
    Auto = Auto
    Manual = Manual
    ManualFare = ManualFare
    Guaranteed = Guaranteed
    Invalid = Invalid
    Restored = Restored
    Ticketed = Ticketed
    Unticketable = Unticketable
    Reprice = Reprice
    Expired = Expired
    AutoUsingPrivateFare = AutoUsingPrivateFare
    GuaranteedUsingAirlinePrivateFare = GuaranteedUsingAirlinePrivateFare
    Airline = Airline
    GuaranteeExpired = GuaranteeExpired
    AgencyPrivateFareNoOverride = AgencyPrivateFareNoOverride
    Unknown = Unknown
}
class typeFarePenalty {
    +Amount : xs:string
    +Percentage : xs:string
    +PenaltyApplies : PenaltyApplies
    +NoShow : xs:boolean
}
typeFarePenalty +-- PenaltyApplies
class PenaltyApplies {
    +Anytime : xs:string
    +Before Departure : xs:string
    +After Departure : xs:string
}
PenaltyApplies *- xs:string
enum typeFareRestrictionType {
    DayOfWeek = DayOfWeek
    FlightTimeOfDay = FlightTimeOfDay
    Both = Both
}
enum typeFareRuleCategoryCode {
    APP = APP
    WHO = WHO
    DAY = DAY
    SEA = SEA
    FLT = FLT
    ADV = ADV
    MIN = MIN
    MAX = MAX
    STP = STP
    TRF = TRF
    CMB = CMB
    BLA = BLA
    SUR = SUR
    ACC = ACC
    TVL = TVL
    TKT = TKT
    CHG = CHG
    HIP = HIP
    END = END
    CHD = CHD
    TUC = TUC
    AGT = AGT
    DSC = DSC
    MIS = MIS
    FBR = FBR
    GRP = GRP
    TUR = TUR
    VAC = VAC
    DEP = DEP
    VOL = VOL
    IVE = IVE
    VOR = VOR
    IVR = IVR
    NET = NET
    OTH = OTH
}
enum typeFareRuleType {
    none = none
    short = short
    long = long
}
enum typeFareSearchOption {
    Leave = Leave
    Return = Return
    Seasonal = Seasonal
    Blackout = Blackout
    Advance Purchase = Advance Purchase
    Day-of-week = Day-of-week
    Effective Date = Effective Date
}
enum typeFareStatusCode {
    ReadyToTicket = ReadyToTicket
    UnableToTicket = UnableToTicket
    Reprice = Reprice
    Ticketed = Ticketed
    Unable = Unable
    Unknown = Unknown
}
enum typeFareTripType {
    OneWay = OneWay
    OneWayOnly = OneWayOnly
    Return = Return
    ReturnOnly = ReturnOnly
    HalfReturn = HalfReturn
    CircleTrip = CircleTrip
    RoundTheWorld = RoundTheWorld
}
enum typeFaresIndicator {
    PublicFaresOnly = PublicFaresOnly
    PrivateFaresOnly = PrivateFaresOnly
    AgencyPrivateFaresOnly = AgencyPrivateFaresOnly
    AirlinePrivateFaresOnly = AirlinePrivateFaresOnly
    PublicAndPrivateFares = PublicAndPrivateFares
    NetFaresOnly = NetFaresOnly
    AllFares = AllFares
}
enum typeIgnoreStopOver {
    NoStopOver = NoStopOver
    StopOver = StopOver
    IgnoreSegment = IgnoreSegment
}
enum typeInventoryRequest {
    Seamless = Seamless
    DirectAccess = DirectAccess
    Basic = Basic
}
enum typeItinerary {
    Invoice = Invoice
    Pocket = Pocket
}
enum typeItineraryOption {
    NoFare = NoFare
    NoAmount = NoAmount
    SequenceNumber = SequenceNumber
}
enum typeMealService {
    Meal = Meal
    ColdMeal = ColdMeal
    HotMeal = HotMeal
    Breakfast = Breakfast
    ContinentalBreakfast = ContinentalBreakfast
    Lunch = Lunch
    Dinner = Dinner
    SnackOrBrunch = SnackOrBrunch
    FoodForPurchase = FoodForPurchase
    ComplimentaryRefreshments = ComplimentaryRefreshments
    AlcoholicBeveragesForPurchase = AlcoholicBeveragesForPurchase
    ComplimentaryAlcoholicBeverages = ComplimentaryAlcoholicBeverages
    FoodAndBeveragesForPurchase = FoodAndBeveragesForPurchase
    NoMealService = NoMealService
    RefreshmentsForPurchase = RefreshmentsForPurchase
}
enum typeMileOrRouteBasedFare {
    Mile = Mile
    Route = Route
    Both = Both
}
class typeNativeSearchModifier {
    +value : xs:string
    +ProviderCode : xs:string
}
class typeNonAirReservationRef {
    +LocatorCode : xs:string
}
enum typePosition {
    Left = Left
    Right = Right
    Center = Center
    LeftCenter = LeftCenter
    RightCenter = RightCenter
}
enum typePricingMethod {
    Auto = Auto
    Manual = Manual
    ManualFare = ManualFare
    Guaranteed = Guaranteed
    Invalid = Invalid
    Restored = Restored
    Ticketed = Ticketed
    Unticketable = Unticketable
    Reprice = Reprice
    Expired = Expired
    AutoUsingPrivateFare = AutoUsingPrivateFare
    GuaranteedUsingAirlinePrivateFare = GuaranteedUsingAirlinePrivateFare
    Airline = Airline
    AgentAssisted = AgentAssisted
    VerifyPrice = VerifyPrice
    AltSegmentRemovedReprice = AltSegmentRemovedReprice
    AuxiliarySegmentRemovedReprice = AuxiliarySegmentRemovedReprice
    DuplicateSegmentRemovedReprice = DuplicateSegmentRemovedReprice
    Unknown = Unknown
    GuaranteedUsingAgencyPrivateFare = GuaranteedUsingAgencyPrivateFare
    AutoRapidReprice = AutoRapidReprice
}
enum typePrivateFare {
    UnknownType = UnknownType
    PrivateFare = PrivateFare
    AgencyPrivateFare = AgencyPrivateFare
    AirlinePrivateFare = AirlinePrivateFare
}
enum typePurposeCode {
    Business = Business
    Pleasure = Pleasure
    CharterService = CharterService
}
enum typeReportingType {
    AvailabilityFailure = AvailabilityFailure
    PriceDiscrepancies = PriceDiscrepancies
    MarriageDiscrepancies = MarriageDiscrepancies
    Success = Success
    ScheduleDiscrepancies = ScheduleDiscrepancies
}
class typeRestrictionLengthOfStay {
    +Length : xs:integer
    +StayUnit : typeStayUnit
    +StayDate : xs:date
    +MoreRulesPresent : xs:boolean
}
enum typeRowLocation {
    Rear = Rear
    Front = Front
}
enum typeSeatAvailability {
    Available = Available
    Occupied = Occupied
    Reserved = Reserved
    AdvancedBoardingPass = AdvancedBoardingPass
    InterlineCheckin = InterlineCheckin
    Codeshare = Codeshare
    Protected = Protected
    PartnerAirline = PartnerAirline
    AdvSeatSelection = AdvSeatSelection
    Blocked = Blocked
    Extra = Extra
    RBDRestriction = RBDRestriction
    Group = Group
    NoSeat = NoSeat
    UnoccupiedButNotEligible = UnoccupiedButNotEligible
}
class typeSegmentRef {
    +Key : xs:string
}
enum typeStayUnit {
    Minutes = Minutes
    Hours = Hours
    Days = Days
    Months = Months
    Monday = Monday
    Tuesday = Tuesday
    Wednesday = Wednesday
    Thursday = Thursday
    Friday = Friday
    Saturday = Saturday
    Sunday = Sunday
}
enum typeTCRStatus {
    Unknown = Unknown
    Confirmed = Confirmed
    Refunded = Refunded
    Exchanged = Exchanged
    Cancelled = Cancelled
    Pending = Pending
}
class typeTaxInfoWithPaymentRef {
    +PaymentRef : PaymentRef[]
}
typeTaxInfoWithPaymentRef *- common:typeTaxInfo
class typeTextElement {
    +value : xs:string
    +Type : xs:string
    +LanguageCode : xs:language
}
class typeTicketFailureInfo {
    +common:TicketNumber : common:TicketNumber
    +common:Name : common:Name
    +TCRNumber : xs:string
    +BookingTravelerRef : xs:string[]
    +Code : xs:integer
    +Message : xs:string
}
class typeTicketModifierAccountingType {
    +Value : xs:string
}
class typeTicketModifierAmountType {
    +Amount : xs:string
}
class typeTicketModifierPercentType {
    +Percent : xs:string
}
class typeTicketModifierValueType {
    +Value : xs:string
    +NetFareValue : xs:boolean
}
class typeTicketingModifiersRef {
    +AirPricingInfoRef : AirPricingInfoRef[]
    +Key : xs:string
}
enum typeTripType {
    Cheapest = Cheapest
    Quickest = Quickest
    MostConvenient = MostConvenient
    Leisure = Leisure
    Business = Business
    Luxury = Luxury
    PreferFirst = PreferFirst
    BusinessOrFirst = BusinessOrFirst
    NoPenalty = NoPenalty
}
class typeUnitOfMeasure {
    +Value : xs:float
    +Unit : xs:string
}
enum typeUnitWeight {
    Kilograms = Kilograms
    Pounds = Pounds
}
enum typeVarianceIndicator {
    Early = Early
    Late = Late
}
enum typeVarianceType {
    Actual = Actual
    Estimated = Estimated
    Canceled = Canceled
    Diversion = Diversion
}
class typeWeight {
    +Value : xs:integer
    +Unit : typeUnitWeight
}

@enduml