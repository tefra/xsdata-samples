
samples.travelport.output.common_v48_0.common.AccountCode()
    code: Optional[str] = [('default', None), ('max_length', 36.0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    type: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.AccountInformation()
    account_name: Optional[str] = [('default', None)]
    address: Optional[TypeStructuredAddress] = [('default', None)]
    phone_number: List[PhoneNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.AccountingRemark()
    booking_traveler_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    category: Optional[str] = [('default', None), ('max_length', 14.0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    remark_data: Optional[str] = [('default', None), ('required', True)]
    type_in_gds: Optional[str] = [('default', None), ('max_length', 30.0)]
    use_provider_native_mode: bool = [('default', False)]

samples.travelport.output.common_v48_0.common.ActionStatus()
    account_code: Optional[str] = [('default', None)]
    airport_code: Optional[str] = [('default', None), ('length', 3)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    queue_category: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]
    remark: Optional[Remark] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    ticket_date: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.AddSvc()
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    rfic: Optional[str] = [('default', None)]
    rfisc: Optional[str] = [('default', None)]
    start_date: Optional[str] = [('default', None)]
    svc_description: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.AddressRestriction()
    required_field: List[RequiredField] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.AgencyContactInfo()
    key: Optional[str] = [('default', None)]
    phone_number: List[PhoneNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.AgencyInfo()
    agent_action: List[AgentAction] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.AgencyInformation()
    address: Optional[TypeStructuredAddress] = [('default', None)]
    email: List[Email] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    phone_number: List[PhoneNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.AgencyPayment(TypeAgencyPayment)

samples.travelport.output.common_v48_0.common.AgencySellInfo()
    city_code: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    country: Optional[str] = [('default', None), ('length', 2)]
    currency_code: Optional[str] = [('default', None), ('length', 3)]
    iata_code: Optional[str] = [('default', None), ('max_length', 8.0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]

samples.travelport.output.common_v48_0.common.AgentAction()
    action_type: Optional[str] = [('default', None), ('required', True)]
    agency_code: Optional[str] = [('default', None), ('required', True)]
    agent_code: Optional[str] = [('default', None), ('required', True)]
    agent_override: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0)]
    agent_sine: Optional[str] = [('default', None)]
    branch_code: Optional[str] = [('default', None), ('max_length', 25.0), ('min_length', 1.0), ('required', True)]
    event_time: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.AgentIdoverride()
    agent_id: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0), ('required', True)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]

samples.travelport.output.common_v48_0.common.AgentVoucher()
    number: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.AirExchangeInfo()
    add_collection: Optional[str] = [('default', None)]
    base_fare: Optional[str] = [('default', None)]
    bulk_ticket_advisory: Optional[bool] = [('default', None)]
    change_fee: Optional[str] = [('default', None)]
    equivalent_base_fare: Optional[str] = [('default', None)]
    equivalent_change_fee: Optional[str] = [('default', None)]
    equivalent_exchange_amount: Optional[str] = [('default', None)]
    exchange_amount: Optional[str] = [('default', None), ('required', True)]
    exchangeable: Optional[bool] = [('default', None)]
    fare_pull: Optional[TypeFarePull] = [('default', None)]
    fee_info: List[TypeFeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    first_class_upgrade: Optional[bool] = [('default', None)]
    flown_segment_value: Optional[str] = [('default', None)]
    forfeit_amount: Optional[str] = [('default', None)]
    form_of_refund: Optional[TypeFormOfRefund] = [('default', None)]
    original_flight_value: Optional[str] = [('default', None)]
    paid_tax: List[TypeTax] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    passenger_count: Optional[int] = [('default', None)]
    passenger_type_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]
    pricing_tag: Optional[str] = [('default', None)]
    reason: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    refund: Optional[str] = [('default', None)]
    refundable: Optional[bool] = [('default', None)]
    residual_value: Optional[str] = [('default', None)]
    tax_info: List[TypeTaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None)]
    ticket_by_date: Optional[str] = [('default', None)]
    ticket_fee_info: List["AirExchangeInfo.TicketFeeInfo"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    total_penalty_tax_info: Optional["AirExchangeInfo.TotalPenaltyTaxInfo"] = [('default', None)]
    total_residual_value: Optional[str] = [('default', None)]

    samples.travelport.output.common_v48_0.common.AirExchangeInfo.TicketFeeInfo()
        base: Optional[str] = [('default', None)]
        tax: Optional[str] = [('default', None)]
        total: Optional[str] = [('default', None)]

    samples.travelport.output.common_v48_0.common.AirExchangeInfo.TotalPenaltyTaxInfo()
        penalty_tax_info: List[TypeTax] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
        total_penalty_tax: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.AirSearchParameters()
    no_advance_purchase: Optional[bool] = [('default', None)]
    non_penalty_fares: Optional[bool] = [('default', None)]
    refundable_fares: Optional[bool] = [('default', None)]
    un_restricted_fares: Optional[bool] = [('default', None)]

samples.travelport.output.common_v48_0.common.AirSeatAssignment(SeatAssignment)

samples.travelport.output.common_v48_0.common.Airport(Location)
    code: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.Apiprovider()
    available_pseudo_city_code: List["Apiprovider.AvailablePseudoCityCode"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    iatacode: Optional[str] = [('default', None), ('max_length', 8.0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    transaction_type: Optional[TransactionType] = [('default', None)]

    samples.travelport.output.common_v48_0.common.Apiprovider.AvailablePseudoCityCode()
        pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]

samples.travelport.output.common_v48_0.common.AppliedProfile()
    account_id: Optional[str] = [('default', None)]
    account_name: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    immediate_parent_id: Optional[str] = [('default', None)]
    immediate_parent_name: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    traveler_id: Optional[str] = [('default', None)]
    traveler_name: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.Arcpayment()
    arcidentifier: Optional[str] = [('default', None), ('max_length', 128.0), ('required', True)]
    arcpassword: Optional[str] = [('default', None), ('max_length', 128.0)]

samples.travelport.output.common_v48_0.common.Auxdata()
    entry: List["Auxdata.Entry"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.common_v48_0.common.Auxdata.Entry()
        description: Optional[str] = [('default', None), ('required', True)]
        reason: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.BaseAsyncProviderSpecificResponse()
    more_results: Optional[bool] = [('default', None), ('required', True)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]

samples.travelport.output.common_v48_0.common.BaseReservation()
    accounting_remark: List[AccountingRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    create_date: Optional[str] = [('default', None), ('required', True)]
    customer_number: Optional[str] = [('default', None)]
    general_remark: List[GeneralRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0), ('required', True)]
    modified_date: Optional[str] = [('default', None), ('required', True)]
    passive_info: Optional[PassiveInfo] = [('default', None)]
    restriction: List[Restriction] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.BillingPointOfSaleInfo()
    cidbnumber: Optional[int] = [('default', None), ('pattern', '\\d{10}')]
    origin_application: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.BookingDates()
    check_in_date: Optional[str] = [('default', None), ('pattern', '[^:Z].*')]
    check_out_date: Optional[str] = [('default', None), ('pattern', '[^:Z].*')]

samples.travelport.output.common_v48_0.common.BookingSource()
    code: Optional[str] = [('default', None), ('min_length', 1.0), ('required', True)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.BookingTraveler()
    address: List[TypeStructuredAddress] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    age: Optional[int] = [('default', None)]
    air_seat_assignment: List[AirSeatAssignment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    applied_profile: List[AppliedProfile] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    booking_traveler_name: Optional[BookingTravelerName] = [('default', None), ('required', True)]
    customized_name_data: List[CustomizedNameData] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    delivery_info: List[DeliveryInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    discount_card: List[DiscountCard] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]
    dob: Optional[str] = [('default', None)]
    drivers_license: List[DriversLicense] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    email: List[Email] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    emergency_info: Optional[str] = [('default', None)]
    gender: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    loyalty_card: List[LoyaltyCard] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    name_number: Optional[str] = [('default', None)]
    name_remark: List[NameRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    nationality: Optional[str] = [('default', None), ('length', 2)]
    phone_number: List[PhoneNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_seat_assignment: List[RailSeatAssignment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ssr: List[Ssr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    travel_compliance_data: List[TravelComplianceData] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    travel_info: Optional[TravelInfo] = [('default', None)]
    traveler_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]
    vip: bool = [('default', False)]

samples.travelport.output.common_v48_0.common.BookingTravelerInfo()
    address: Optional[TypeStructuredAddress] = [('default', None)]
    age: Optional[int] = [('default', None)]
    applied_profile: Optional[AppliedProfile] = [('default', None)]
    booking_traveler_name: Optional[BookingTravelerName] = [('default', None)]
    customized_name_data: Optional[CustomizedNameData] = [('default', None)]
    delivery_info: Optional[DeliveryInfo] = [('default', None)]
    dob: Optional[str] = [('default', None)]
    email: Optional[Email] = [('default', None)]
    emergency_info: Optional[str] = [('default', None)]
    gender: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    key: Optional[str] = [('default', None)]
    name_remark: Optional[NameRemark] = [('default', None)]
    phone_number: Optional[PhoneNumber] = [('default', None)]
    travel_info: Optional[TravelInfo] = [('default', None)]
    traveler_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]

samples.travelport.output.common_v48_0.common.BookingTravelerInformation()
    booking_traveler_ref: Optional[str] = [('default', None)]
    name: Optional[Name] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.BookingTravelerName()
    first: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]
    last: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]
    middle: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0)]
    prefix: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 1.0)]
    suffix: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0)]

samples.travelport.output.common_v48_0.common.BookingTravelerRef()
    discount_card_ref: List[DiscountCardRef] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]
    drivers_license_ref: Optional[DriversLicenseRef] = [('default', None)]
    key: Optional[str] = [('default', None)]
    loyalty_card_ref: List[LoyaltyCardRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    payment_ref: List[PaymentRef] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.Bsppayment()
    bspidentifier: Optional[str] = [('default', None), ('max_length', 128.0), ('required', True)]
    bsppassword: Optional[str] = [('default', None), ('max_length', 128.0)]

samples.travelport.output.common_v48_0.common.CabinClass()
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.CardRestriction()
    code: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 2.0), ('required', True)]
    name: Optional[str] = [('default', None), ('required', True)]
    required_field: List[RequiredField] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.Carrier()
    code: Optional[str] = [('default', None), ('length', 2), ('required', True)]

samples.travelport.output.common_v48_0.common.Certificate()
    amount: Optional[str] = [('default', None)]
    discount_amount: Optional[str] = [('default', None)]
    discount_percentage: Optional[int] = [('default', None)]
    not_valid_after: Optional[str] = [('default', None)]
    not_valid_before: Optional[str] = [('default', None)]
    number: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Characteristic()
    seat_description: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0)]
    seat_type: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0)]
    seat_value: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0)]
    seat_value_description: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0)]

samples.travelport.output.common_v48_0.common.Check()
    account_number: Optional[str] = [('default', None)]
    check_number: Optional[str] = [('default', None)]
    micrnumber: Optional[str] = [('default', None), ('max_length', 29.0)]
    routing_number: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.City(Location)
    code: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.CityOrAirport(Location)
    code: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    prefer_city: bool = [('default', False)]

samples.travelport.output.common_v48_0.common.Commission()
    amount: Optional[str] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None)]
    commission_override: bool = [('default', False)]
    key: Optional[str] = [('default', None)]
    level: Optional[TypeCommissionLevel] = [('default', None), ('required', True)]
    modifier: Optional[TypeCommissionModifier] = [('default', None)]
    percentage: Optional[str] = [('default', None), ('pattern', '([0-9]{1,2}|100)\\.[0-9]{1,2}')]
    type: Optional[TypeCommissionType] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None), ('max_length', 15.0), ('min_length', 0.0)]

samples.travelport.output.common_v48_0.common.CommissionRemark()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    passenger_type_level: List["CommissionRemark.PassengerTypeLevel"] = [('default', 'list'), ('max_occurs', 4), ('min_occurs', 0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    provider_reservation_level: Optional["CommissionRemark.ProviderReservationLevel"] = [('default', None)]

    samples.travelport.output.common_v48_0.common.CommissionRemark.PassengerTypeLevel()
        amount: Optional[str] = [('default', None)]
        commission_cap: Optional[str] = [('default', None)]
        percentage: Optional[str] = [('default', None), ('pattern', '([0-9]{1,2}|100)\\.[0-9]{1,2}')]
        traveler_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0), ('required', True)]

    samples.travelport.output.common_v48_0.common.CommissionRemark.ProviderReservationLevel()
        amount: Optional[str] = [('default', None)]
        commission_cap: Optional[str] = [('default', None)]
        percentage: Optional[str] = [('default', None), ('pattern', '([0-9]{1,2}|100)\\.[0-9]{1,2}')]

samples.travelport.output.common_v48_0.common.ConnectionPoint(TypeLocation)

samples.travelport.output.common_v48_0.common.ConsolidatorRemark()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    pseudo_city_code: List[PseudoCityCode] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.ContinuityCheckOverride()
    key: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.CoordinateLocation(Location)
    latitude: Optional[float] = [('default', None), ('required', True)]
    longitude: Optional[float] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.CorporateDiscountId()
    negotiated_rate_code: Optional[bool] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.Credentials()
    user_id: Optional[str] = [('default', None), ('max_length', 36.0), ('required', True)]

samples.travelport.output.common_v48_0.common.CreditCard(TypeCreditCardType)
    key: Optional[str] = [('default', None)]
    profile_id: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.CreditCardAuth()
    amount: Optional[str] = [('default', None), ('required', True)]
    auth_code: Optional[str] = [('default', None)]
    auth_result_code: Optional[str] = [('default', None), ('required', True)]
    avsresult_code: Optional[str] = [('default', None)]
    form_of_payment_ref: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    message: Optional[str] = [('default', None)]
    number: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 13.0)]
    payment_ref: Optional[str] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    trans_id: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.CustomProfileInformation()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.CustomerId(TypeRemark)
    key: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.CustomizedNameData()
    key: Optional[str] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.DebitCard(TypePaymentCard)
    issue_number: Optional[str] = [('default', None), ('max_length', 8.0)]
    key: Optional[str] = [('default', None)]
    profile_id: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.DeliveryInfo()
    email: Optional[Email] = [('default', None)]
    general_remark: List[GeneralRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    phone_number: Optional[PhoneNumber] = [('default', None)]
    provider_reservation_info_ref: List[ProviderReservationInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    shipping_address: Optional["DeliveryInfo.ShippingAddress"] = [('default', None)]
    signature_required: Optional[str] = [('default', None), ('max_length', 10.0)]
    tracking_number: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None)]

    samples.travelport.output.common_v48_0.common.DeliveryInfo.ShippingAddress(TypeStructuredAddress)

samples.travelport.output.common_v48_0.common.DirectPayment()
    text: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.DiscountCard()
    code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 1.0), ('required', True)]
    description: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 1.0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    number: Optional[str] = [('default', None), ('max_length', 36.0), ('min_length', 1.0)]

samples.travelport.output.common_v48_0.common.DiscountCardRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Distance()
    direction: Optional[str] = [('default', None), ('max_length', 2.0)]
    units: str = [('default', '"MI"'), ('length', 2)]
    value: Optional[int] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.DriversLicense()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    license_number: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.DriversLicenseRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Email()
    comment: Optional[str] = [('default', None), ('min_length', 1.0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    email_id: Optional[str] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_reservation_info_ref: List[ProviderReservationInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    type: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0)]

samples.travelport.output.common_v48_0.common.EmailNotification()
    email_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    recipients: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Endorsement()
    value: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.common_v48_0.common.EnettVan()
    expiry_days: Optional[str] = [('default', None), ('max_inclusive', 'P366D'), ('min_inclusive', 'P1D')]
    max_percentage: Optional[int] = [('default', None), ('max_inclusive', 100.0), ('min_inclusive', 0.0)]
    min_percentage: Optional[int] = [('default', None), ('max_inclusive', 100.0), ('min_inclusive', 0.0)]
    multi_use: bool = [('default', True)]

samples.travelport.output.common_v48_0.common.ExchangedCoupon()
    coupon_number: Optional[str] = [('default', None)]
    ticket_number: Optional[str] = [('default', None), ('length', 13), ('required', True)]

samples.travelport.output.common_v48_0.common.FileFinishingInfo()
    account_information: Optional[AccountInformation] = [('default', None)]
    agency_information: Optional[AgencyInformation] = [('default', None)]
    custom_profile_information: Optional[CustomProfileInformation] = [('default', None)]
    policy_information: List[PolicyInformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    shop_information: Optional[ShopInformation] = [('default', None)]
    traveler_information: List[TravelerInformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.FormOfPayment()
    agency_payment: Optional[AgencyPayment] = [('default', None)]
    agent_text: Optional[str] = [('default', None)]
    agent_voucher: Optional[AgentVoucher] = [('default', None)]
    arcpayment: Optional[Arcpayment] = [('default', None)]
    bsppayment: Optional[Bsppayment] = [('default', None)]
    certificate: Optional[Certificate] = [('default', None)]
    check: Optional[Check] = [('default', None)]
    credit_card: Optional[CreditCard] = [('default', None)]
    debit_card: Optional[DebitCard] = [('default', None)]
    direct_payment: Optional[DirectPayment] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    enett_van: Optional[EnettVan] = [('default', None)]
    external_reference: Optional[str] = [('default', None), ('max_length', 32.0)]
    fulfillment_idnumber: Optional[str] = [('default', None)]
    fulfillment_idtype: Optional[TypeFulfillmentIdtype] = [('default', None)]
    fulfillment_location: Optional[str] = [('default', None)]
    fulfillment_type: Optional[str] = [('default', None)]
    is_agent_type: bool = [('default', False)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    misc_form_of_payment: Optional[MiscFormOfPayment] = [('default', None)]
    payment_advice: Optional[PaymentAdvice] = [('default', None)]
    profile_id: Optional[str] = [('default', None)]
    profile_key: Optional[str] = [('default', None)]
    provider_reservation_info_ref: List[TypeFormOfPaymentPnrreference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    requisition: Optional[Requisition] = [('default', None)]
    reusable: bool = [('default', False)]
    reuse_fop: Optional[str] = [('default', None)]
    segment_ref: List[TypeGeneralReference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_number: Optional[TicketNumber] = [('default', None)]
    type: Optional[str] = [('default', None), ('max_length', 25.0), ('required', True)]
    united_nations: Optional[UnitedNations] = [('default', None)]

samples.travelport.output.common_v48_0.common.FormOfPaymentRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.FormattedTextTextType()
    formatted: Optional[bool] = [('default', None)]
    language: Optional[str] = [('default', None)]
    text_format: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.GeneralRemark()
    booking_traveler_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    category: Optional[str] = [('default', None), ('max_length', 20.0)]
    create_date: Optional[str] = [('default', None)]
    direction: Optional[TypeDirection] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    remark_data: Optional[str] = [('default', None), ('required', True)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    supplier_type: Optional[TypeProduct] = [('default', None)]
    type_in_gds: Optional[str] = [('default', None), ('max_length', 30.0)]
    use_provider_native_mode: bool = [('default', False)]

samples.travelport.output.common_v48_0.common.Group()
    address: Optional[TypeStructuredAddress] = [('default', None)]
    booking_traveler_ref: List["Group.BookingTravelerRef"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    delivery_info: Optional[DeliveryInfo] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    group_size: Optional[int] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    name: Optional["Group.Name"] = [('default', None), ('required', True)]
    phone_number: List[PhoneNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ssrref: List["Group.Ssrref"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    traveler_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]

    samples.travelport.output.common_v48_0.common.Group.BookingTravelerRef()
        key: Optional[str] = [('default', None), ('required', True)]

    samples.travelport.output.common_v48_0.common.Group.Name()
        value: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

    samples.travelport.output.common_v48_0.common.Group.Ssrref()
        key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Guarantee()
    credit_card: Optional[CreditCard] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    external_reference: Optional[str] = [('default', None), ('max_length', 32.0)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    other_guarantee_info: Optional[OtherGuaranteeInfo] = [('default', None)]
    reusable: bool = [('default', False)]
    reuse_fop: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.GuaranteeType()
    value: Optional[str] = [('default', None), ('max_length', 250.0)]

samples.travelport.output.common_v48_0.common.HostToken()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    host: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.HostTokenList()
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.IncludedInBase()
    amount: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.IndustryStandardSsr()
    code: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.InvoiceData()
    booking_traveler_information: List[BookingTravelerInformation] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 1)]
    invoice_number: Optional[str] = [('default', None), ('required', True)]
    issue_date: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.InvoiceRemark(TypeAssociatedRemark)
    air_segment_ref: Optional[TypeSegmentRef] = [('default', None)]
    hotel_reservation_ref: Optional[TypeNonAirReservationRef] = [('default', None)]
    passive_segment_ref: Optional[TypeSegmentRef] = [('default', None)]
    vehicle_reservation_ref: Optional[TypeNonAirReservationRef] = [('default', None)]

samples.travelport.output.common_v48_0.common.KeyMapping()
    element_name: Optional[str] = [('default', None), ('required', True)]
    new_key: Optional[str] = [('default', None), ('required', True)]
    original_key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Keyword(TypeKeyword)

samples.travelport.output.common_v48_0.common.LinkedUniversalRecord()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0), ('required', True)]

samples.travelport.output.common_v48_0.common.Location()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.LocationAddress(TypeStructuredAddress)

samples.travelport.output.common_v48_0.common.LocatorCode()
    value: Optional[str] = [('default', None), ('min_length', 1.0)]

samples.travelport.output.common_v48_0.common.LoyaltyCard()
    alliance_level: Optional[str] = [('default', None)]
    card_number: Optional[str] = [('default', None), ('max_length', 36.0), ('min_length', 1.0), ('required', True)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    free_text: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    level: Optional[str] = [('default', None), ('pattern', '[a-zA-Z0-9]{1,1}')]
    membership_program: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0)]
    membership_status: Optional[str] = [('default', None)]
    priority_code: Optional[str] = [('default', None), ('pattern', '[a-zA-Z0-9]{1,1}')]
    provider_reservation_specific_info: List[TypeProviderReservationSpecificInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    status: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    supplier_type: Optional[TypeProduct] = [('default', None)]
    vendor_location_ref: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.LoyaltyCardRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.LoyaltyProgram()
    alliance_level: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    level: Optional[str] = [('default', None)]
    membership_program: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0)]
    supplier_code: Optional[str] = [('default', None), ('length', 2), ('required', True)]

samples.travelport.output.common_v48_0.common.MarketingInformation()
    text: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.Mco(Mcoinformation)
    endorsement: Optional[Endorsement] = [('default', None)]
    expiry_date: Optional[str] = [('default', None)]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    issue_reason_code: Optional[str] = [('default', None)]
    location: Optional[str] = [('default', None)]
    mcodoc_num: Optional[str] = [('default', None)]
    mcoexchange_info: Optional[McoexchangeInfo] = [('default', None)]
    mcofee_info: Optional[McofeeInfo] = [('default', None)]
    mcoissue_date: Optional[str] = [('default', None)]
    mcoissued: Optional[bool] = [('default', None), ('required', True)]
    mcoprice_data: Optional[McopriceData] = [('default', None)]
    mcoremark: List[Mcoremark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    mcotext: List[Mcotext] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    stock_control: List[StockControl] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_number: Optional[str] = [('default', None)]
    ticket_type: Optional[str] = [('default', None)]
    tour_code: Optional[str] = [('default', None)]
    tour_operator: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.McoexchangeInfo()
    exchanged_coupon: List[ExchangedCoupon] = [('default', 'list'), ('max_occurs', 4), ('min_occurs', 0)]
    form_of_payment: Optional[FormOfPayment] = [('default', None)]
    iatacode: Optional[str] = [('default', None), ('max_length', 8.0)]
    original_city_code: Optional[str] = [('default', None), ('length', 3)]
    original_ticket_date: Optional[str] = [('default', None), ('pattern', '[^:Z].*')]
    original_ticket_number: Optional[str] = [('default', None), ('length', 13)]

samples.travelport.output.common_v48_0.common.McofeeInfo()
    amount: Optional[str] = [('default', None)]
    fee_applies_to_ind: Optional[str] = [('default', None)]
    percentage: Optional[str] = [('default', None), ('pattern', '([0-9]{1,2}|100)\\.[0-9]{1,2}')]

samples.travelport.output.common_v48_0.common.Mcoinformation()
    mconumber: Optional[str] = [('default', None)]
    mcotype: Optional[str] = [('default', None)]
    passenger_info: List[PassengerInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    status: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.McopriceData()
    commission: Optional["McopriceData.Commission"] = [('default', None)]
    mcoamount: Optional[str] = [('default', None), ('required', True)]
    mcoequivalent_fare: Optional[str] = [('default', None)]
    mcototal_amount: Optional[str] = [('default', None)]
    tax_info: List[TypeTaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.common_v48_0.common.McopriceData.Commission()
        amount: Optional[str] = [('default', None)]
        percentage: Optional[str] = [('default', None), ('pattern', '([0-9]{1,2}|100)\\.[0-9]{1,2}')]

samples.travelport.output.common_v48_0.common.Mcoremark()
    additional_rmk: Optional[bool] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.Mcotext(TypeFreeFormText)
    type: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.MealRequest()
    type: Optional[str] = [('default', None), ('length', 4), ('required', True)]

samples.travelport.output.common_v48_0.common.MediaItem()
    caption: Optional[str] = [('default', None)]
    height: Optional[int] = [('default', None)]
    icon: Optional[str] = [('default', None)]
    size_code: Optional[TypeResponseImageSize] = [('default', None)]
    type: Optional[str] = [('default', None)]
    url: Optional[str] = [('default', None)]
    width: Optional[int] = [('default', None)]

samples.travelport.output.common_v48_0.common.MetaData()
    key: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 1.0), ('required', True)]
    value: Optional[str] = [('default', None), ('max_length', 50.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.common_v48_0.common.MiscFormOfPayment()
    acceptance_override: Optional[bool] = [('default', None)]
    category: Optional[str] = [('default', None), ('required', True)]
    credit_card_number: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 13.0)]
    credit_card_type: Optional[str] = [('default', None), ('length', 2)]
    exp_date: Optional[str] = [('default', None)]
    text: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.ModificationType(str)
    ADD_PASSENGER: xs:string = [('default', '"AddPassenger"')]
    ADD_SEGMENT: xs:string = [('default', '"AddSegment"')]
    OPTIONS_ONLY: xs:string = [('default', '"OptionsOnly"')]
    OTHER: xs:string = [('default', '"Other"')]
    REMOVE_PASSENGER: xs:string = [('default', '"RemovePassenger"')]
    REMOVE_SEGMENT: xs:string = [('default', '"RemoveSegment"')]
    REPLACE_SEGMENT: xs:string = [('default', '"ReplaceSegment"')]

samples.travelport.output.common_v48_0.common.Name()
    first: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]
    last: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]
    middle: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0)]
    prefix: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 1.0)]
    suffix: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0)]
    traveler_profile_id: Optional[int] = [('default', None)]

samples.travelport.output.common_v48_0.common.NameOverride()
    age: Optional[int] = [('default', None)]
    first: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]
    last: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.common_v48_0.common.NameRemark()
    category: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_reservation_info_ref: List[ProviderReservationInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    remark_data: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.NextResultReference()
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    value: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.OperatedBy()
    value: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.OptionalServiceApplicabilityType(str)
    ITINERARY: xs:string = [('default', '"Itinerary"')]
    OTHER: xs:string = [('default', '"Other"')]
    PASSENGER: xs:string = [('default', '"Passenger"')]
    PASSENGER_OD: xs:string = [('default', '"PassengerOD"')]
    PASSENGER_SEGMENT: xs:string = [('default', '"PassengerSegment"')]
    SEGMENT: xs:string = [('default', '"Segment"')]

samples.travelport.output.common_v48_0.common.OptionalServiceApplicationLimitType()
    applicable_level: Optional[OptionalServiceApplicabilityType] = [('default', None), ('required', True)]
    maximum_quantity: Optional[int] = [('default', None), ('required', True)]
    minimum_quantity: Optional[int] = [('default', None)]
    provider_defined_applicable_levels: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.Osi()
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    code: Optional[str] = [('default', None), ('max_length', 4.0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    text: Optional[str] = [('default', None), ('max_length', 256.0), ('required', True)]

samples.travelport.output.common_v48_0.common.OtherGuaranteeInfo()
    type: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.OverridePcc()
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0), ('required', True)]

samples.travelport.output.common_v48_0.common.OwnershipChange()
    owning_pcc: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.PassengerInfo()
    booking_traveler_ref: Optional[str] = [('default', None)]
    name: Optional[Name] = [('default', None)]
    passenger_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]

samples.travelport.output.common_v48_0.common.PassiveInfo()
    commission: Optional[Commission] = [('default', None)]
    confirmation_number: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    provider_code: Optional[str] = [('default', None)]
    provider_locator_code: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None)]
    supplier_locator_code: Optional[str] = [('default', None)]
    ticket_number: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.Payment()
    amount: Optional[str] = [('default', None), ('required', True)]
    amount_type: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0)]
    approximate_amount: Optional[str] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    form_of_payment_ref: Optional[str] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    status: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.PaymentAdvice()
    document_number: Optional[str] = [('default', None), ('max_length', 22.0), ('required', True)]
    issue_city: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    issue_date: Optional[str] = [('default', None), ('required', True)]
    original_fop: Optional[str] = [('default', None), ('max_length', 19.0)]
    type: Optional[str] = [('default', None), ('max_length', 3.0), ('required', True)]

samples.travelport.output.common_v48_0.common.PaymentRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.PaymentRestriction()
    address_restriction: Optional[AddressRestriction] = [('default', None), ('required', True)]
    card_restriction: List[CardRestriction] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.Penalty()
    cancel_refund: Optional[bool] = [('default', None)]
    cancelation_penalty: Optional[bool] = [('default', None)]
    charge_applicable: Optional[bool] = [('default', None)]
    charge_portion: Optional[bool] = [('default', None)]
    non_exchangeable: Optional[bool] = [('default', None)]
    non_refundable: Optional[bool] = [('default', None)]
    non_reissue_penalty: Optional[bool] = [('default', None)]
    penalty_amount: Optional[str] = [('default', None)]
    reissue_penalty: Optional[bool] = [('default', None)]
    ticket_refund_penalty: Optional[bool] = [('default', None)]

samples.travelport.output.common_v48_0.common.PermittedProviders()
    provider: Optional[Provider] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.PersonalGeography()
    city_code: Optional[str] = [('default', None), ('length', 3)]
    country_code: Optional[str] = [('default', None), ('length', 2)]
    state_province_code: Optional[str] = [('default', None), ('max_length', 6.0)]

samples.travelport.output.common_v48_0.common.PhoneNumber()
    area_code: Optional[str] = [('default', None), ('max_length', 10.0)]
    country_code: Optional[str] = [('default', None), ('max_length', 5.0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    extension: Optional[str] = [('default', None), ('max_length', 10.0)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    location: Optional[str] = [('default', None), ('max_length', 10.0)]
    number: Optional[str] = [('default', None), ('max_length', 83.0), ('min_length', 1.0), ('required', True)]
    provider_reservation_info_ref: List[ProviderReservationInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    text: Optional[str] = [('default', None), ('max_length', 1024.0)]
    type: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.PointOfCommencement()
    city_or_airport_code: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    time: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.PointOfSale()
    iata: Optional[str] = [('default', None), ('max_length', 8.0)]
    key: Optional[str] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0), ('required', True)]

samples.travelport.output.common_v48_0.common.PolicyInformation()
    name: Optional[str] = [('default', None)]
    out_of_policy: Optional[bool] = [('default', None)]
    reason_code: Optional["PolicyInformation.ReasonCode"] = [('default', None)]
    segment_ref: Optional[str] = [('default', None)]
    type: Optional[TypePolicy] = [('default', None), ('required', True)]

    samples.travelport.output.common_v48_0.common.PolicyInformation.ReasonCode()
        out_of_policy: Optional[str] = [('default', None)]
        purpose_of_trip: Optional[str] = [('default', None)]
        remark: Optional[Remark] = [('default', None)]

samples.travelport.output.common_v48_0.common.Postscript(TypeRemark)
    key: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.PriceMatchError()
    base_diff: Optional[float] = [('default', None)]
    error_message: Optional[str] = [('default', None), ('required', True)]
    hotel_chain: Optional[str] = [('default', None), ('length', 2)]
    hotel_code: Optional[str] = [('default', None), ('max_length', 32.0)]
    req_base: Optional[float] = [('default', None)]
    req_total: Optional[float] = [('default', None)]
    rsp_base: Optional[float] = [('default', None)]
    rsp_total: Optional[float] = [('default', None)]
    total_diff: Optional[float] = [('default', None)]
    vendor_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]

samples.travelport.output.common_v48_0.common.Provider()
    code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]

samples.travelport.output.common_v48_0.common.ProviderArnksegment()
    key: Optional[str] = [('default', None)]
    next_segment: Optional["ProviderArnksegment.NextSegment"] = [('default', None)]
    previous_segment: Optional["ProviderArnksegment.PreviousSegment"] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    provider_segment_order: Optional[int] = [('default', None), ('max_inclusive', 999.0)]

    samples.travelport.output.common_v48_0.common.ProviderArnksegment.NextSegment()
        air_segment_ref: Optional[TypeSegmentRef] = [('default', None)]
        hotel_reservation_ref: Optional[TypeNonAirReservationRef] = [('default', None)]
        passive_segment_ref: Optional[TypeSegmentRef] = [('default', None)]
        vehicle_reservation_ref: Optional[TypeNonAirReservationRef] = [('default', None)]

    samples.travelport.output.common_v48_0.common.ProviderArnksegment.PreviousSegment()
        air_segment_ref: Optional[TypeSegmentRef] = [('default', None)]
        hotel_reservation_ref: Optional[TypeNonAirReservationRef] = [('default', None)]
        passive_segment_ref: Optional[TypeSegmentRef] = [('default', None)]
        vehicle_reservation_ref: Optional[TypeNonAirReservationRef] = [('default', None)]

samples.travelport.output.common_v48_0.common.ProviderReservationDetail(TypeProviderReservationDetail)

samples.travelport.output.common_v48_0.common.ProviderReservationInfoRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.PseudoCityCode()
    value: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]

samples.travelport.output.common_v48_0.common.QueuePlace()
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    queue_selector: List[QueueSelector] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.QueueSelector()
    category: Optional[str] = [('default', None)]
    date_range: Optional[str] = [('default', None)]
    queue: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.RailLocation(Location)
    code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('required', True), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.RailSeatAssignment()
    characteristic: List[Characteristic] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    coach_number: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    rail_segment_ref: Optional[str] = [('default', None)]
    seat: Optional[str] = [('default', None), ('required', True)]
    status: Optional[str] = [('default', None), ('length', 2), ('required', True), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.ReferencePoint()
    value: Optional[str] = [('default', None), ('max_length', 30.0)]

samples.travelport.output.common_v48_0.common.RefundRemark()
    remark_data: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Remark()
    key: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.RequestKeyMappings()
    key_mapping: List[KeyMapping] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.RequiredField()
    name: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Requisition()
    category: Optional[str] = [('default', None)]
    number: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.ReservationName()
    booking_traveler_ref: Optional[BookingTravelerRef] = [('default', None)]
    name_override: Optional[NameOverride] = [('default', None)]

samples.travelport.output.common_v48_0.common.ResponseMessage()
    code: Optional[int] = [('default', None), ('required', True)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    type: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.Restriction()
    operation: Optional[str] = [('default', None), ('required', True)]
    reason: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.ReviewBooking()
    date_time: Optional[str] = [('default', None), ('required', True)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    queue: Optional[int] = [('default', None), ('max_inclusive', 99.0), ('required', True)]
    queue_category: Optional[str] = [('default', None), ('max_length', 2.0)]
    remarks: Optional[str] = [('default', None), ('max_length', 300.0), ('required', True)]

samples.travelport.output.common_v48_0.common.RoleInfo()
    description: Optional[str] = [('default', None), ('max_length', 1024.0)]
    id: Optional[str] = [('default', None), ('max_length', 19.0), ('required', True)]
    name: Optional[str] = [('default', None), ('max_length', 128.0), ('required', True)]
    source: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.SearchEvent(TypeTimeRange)
    type: Optional[TypeEventType] = [('default', None)]

samples.travelport.output.common_v48_0.common.SearchPassenger(TypePassengerType)
    key: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.SearchTicketing()
    reservation_status: str = [('default', '"Both"')]
    ticket_date: Optional[str] = [('default', None)]
    ticket_status: str = [('default', '"Both"')]

samples.travelport.output.common_v48_0.common.SeatAssignment()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    flight_details_ref: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    rail_coach_number: Optional[str] = [('default', None)]
    seat: Optional[str] = [('default', None), ('required', True)]
    seat_type_code: Optional[str] = [('default', None), ('length', 4), ('white_space', 'collapse')]
    segment_ref: Optional[str] = [('default', None)]
    status: Optional[str] = [('default', None), ('length', 2), ('required', True), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.SeatAttribute()
    value: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.common_v48_0.common.SeatAttributes()
    seat_attribute: List[SeatAttribute] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.Segment()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    passive: Optional[bool] = [('default', None)]
    provider_segment_order: Optional[int] = [('default', None), ('max_inclusive', 999.0)]
    segment_remark: List[SegmentRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    status: Optional[str] = [('default', None)]
    travel_order: Optional[int] = [('default', None)]

samples.travelport.output.common_v48_0.common.SegmentRemark()
    key: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.SellMessage()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.ServiceData()
    air_segment_ref: Optional[str] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None)]
    cabin_class: Optional[CabinClass] = [('default', None)]
    data: Optional[str] = [('default', None)]
    emdcoupon_ref: Optional[str] = [('default', None)]
    emdsummary_ref: Optional[str] = [('default', None)]
    seat_attributes: Optional[SeatAttributes] = [('default', None)]
    ssrref: List[TypeKeyBasedReference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    stop_over: bool = [('default', False)]
    traveler_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]

samples.travelport.output.common_v48_0.common.ServiceFeeInfo()
    base_amount: Optional[str] = [('default', None)]
    booking_traveler_name: Optional[str] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None)]
    confirmation: Optional[str] = [('default', None)]
    credit_card_auth: Optional[CreditCardAuth] = [('default', None)]
    description: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    form_of_payment: Optional[FormOfPayment] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    passive_provider_reservation_info_ref: Optional[str] = [('default', None)]
    payment: Optional[Payment] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    service_fee_tax_info: List[ServiceFeeTaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    status: Optional[TypeStatus] = [('default', None)]
    taxes: Optional[str] = [('default', None)]
    ticket_number: Optional[str] = [('default', None)]
    total_amount: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.ServiceFeeTaxInfo()
    amount: Optional[str] = [('default', None), ('required', True)]
    category: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.ServiceInfo()
    description: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    media_item: List[MediaItem] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.ServiceRuleType()
    application_level: Optional["ServiceRuleType.ApplicationLevel"] = [('default', None)]
    application_rules: Optional["ServiceRuleType.ApplicationRules"] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    modify_rules: Optional["ServiceRuleType.ModifyRules"] = [('default', None)]
    remarks: List[FormattedTextTextType] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    secondary_type_rules: Optional["ServiceRuleType.SecondaryTypeRules"] = [('default', None)]

    samples.travelport.output.common_v48_0.common.ServiceRuleType.ApplicationLevel()
        applicable_levels: List[OptionalServiceApplicabilityType] = [('default', 'list'), ('max_occurs', 9223372036854775807), ('min_occurs', 0)]
        application_limits: Optional["ServiceRuleType.ApplicationLevel.ApplicationLimits"] = [('default', None)]
        provider_defined_applicable_levels: Optional[str] = [('default', None)]
        service_data: List[ServiceData] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

        samples.travelport.output.common_v48_0.common.ServiceRuleType.ApplicationLevel.ApplicationLimits()
            application_limit: List[OptionalServiceApplicationLimitType] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 1)]

    samples.travelport.output.common_v48_0.common.ServiceRuleType.ApplicationRules()
        required_for_all_segments: Optional[bool] = [('default', None)]
        required_for_all_segments_in_od: Optional[bool] = [('default', None)]
        required_for_all_travelers: Optional[bool] = [('default', None)]
        secondary_option_code_required: Optional[bool] = [('default', None)]
        unselected_option_required: Optional[bool] = [('default', None)]

    samples.travelport.output.common_v48_0.common.ServiceRuleType.ModifyRules()
        modify_rule: List["ServiceRuleType.ModifyRules.ModifyRule"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
        provider_defined_modification_type: Optional[str] = [('default', None)]
        supported_modifications: List[ModificationType] = [('default', 'list'), ('max_occurs', 9223372036854775807), ('min_occurs', 0)]

        samples.travelport.output.common_v48_0.common.ServiceRuleType.ModifyRules.ModifyRule()
            automatically_applied_on_add: bool = [('default', False)]
            can_add: Optional[bool] = [('default', None)]
            can_delete: Optional[bool] = [('default', None)]
            modification: Optional[ModificationType] = [('default', None), ('required', True)]
            provider_defined_modification_type: Optional[str] = [('default', None)]
            refundable: Optional[bool] = [('default', None)]

    samples.travelport.output.common_v48_0.common.ServiceRuleType.SecondaryTypeRules()
        secondary_type_rule: List["ServiceRuleType.SecondaryTypeRules.SecondaryTypeRule"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

        samples.travelport.output.common_v48_0.common.ServiceRuleType.SecondaryTypeRules.SecondaryTypeRule()
            application_limit: List[OptionalServiceApplicationLimitType] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]
            secondary_type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.ShopInformation()
    cabin_selected: Optional[str] = [('default', None)]
    cabin_shopped: Optional[str] = [('default', None)]
    flights_offered: List["ShopInformation.FlightsOffered"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    lowest_fare_offered: Optional[str] = [('default', None)]
    search_request: List["ShopInformation.SearchRequest"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.common_v48_0.common.ShopInformation.FlightsOffered()
        carrier: Optional[str] = [('default', None), ('length', 2)]
        class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
        connection: bool = [('default', False)]
        departure_time: Optional[str] = [('default', None)]
        destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
        flight_number: Optional[str] = [('default', None), ('max_length', 5.0)]
        origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
        stop_over: bool = [('default', False)]
        travel_order: Optional[int] = [('default', None)]

    samples.travelport.output.common_v48_0.common.ShopInformation.SearchRequest()
        class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
        departure_time: Optional[str] = [('default', None)]
        destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
        origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.SimpleName()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.SpecialEquipment()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.Ssr()
    carrier: Optional[str] = [('default', None), ('length', 2)]
    carrier_specific_text: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0)]
    description: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    free_text: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    passive_segment_ref: Optional[str] = [('default', None)]
    profile_id: Optional[str] = [('default', None)]
    profile_secure_flight_doc_key: Optional[str] = [('default', None)]
    provider_defined_type: Optional[str] = [('default', None), ('max_length', 16.0), ('min_length', 1.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    segment_ref: Optional[str] = [('default', None)]
    ssrrule_ref: Optional[str] = [('default', None)]
    status: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None), ('max_length', 4.0), ('min_length', 4.0), ('required', True)]
    url: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.Ssrinfo()
    booking_traveler_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ssr: Optional[Ssr] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.State()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.StockControl()
    number: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.SupplierLocator()
    create_date_time: Optional[str] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    segment_ref: List[TypeGeneralReference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    supplier_code: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    supplier_locator_code: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TaxDetail()
    amount: Optional[str] = [('default', None), ('required', True)]
    country_code: Optional[str] = [('default', None)]
    destination_airport: Optional[str] = [('default', None), ('length', 3)]
    fare_info_ref: Optional[str] = [('default', None)]
    origin_airport: Optional[str] = [('default', None), ('length', 3)]

samples.travelport.output.common_v48_0.common.TerminalSessionInfo()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.ThirdPartyInformation()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    segment_ref: List[TypeGeneralReference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    third_party_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    third_party_locator_code: Optional[str] = [('default', None), ('max_length', 36.0)]
    third_party_name: Optional[str] = [('default', None), ('max_length', 64.0)]

samples.travelport.output.common_v48_0.common.TicketNumber()
    value: Optional[str] = [('default', None), ('max_length', 13.0), ('min_length', 1.0)]

samples.travelport.output.common_v48_0.common.TransactionType()
    air: Optional["TransactionType.Air"] = [('default', None)]
    background_passive: Optional[TypeBookingTransactionsAllowed] = [('default', None)]
    hotel: Optional[TypeTransactionsAllowed] = [('default', None)]
    passive: Optional[TypeBookingTransactionsAllowed] = [('default', None)]
    rail: Optional[TypeTransactionsAllowed] = [('default', None)]
    vehicle: Optional[TypeTransactionsAllowed] = [('default', None)]

    samples.travelport.output.common_v48_0.common.TransactionType.Air(TypeTransactionsAllowed)
        airports_enabled: Optional[bool] = [('default', None)]
        days_enabled: Optional[bool] = [('default', None)]
        flex_explore: Optional[bool] = [('default', None)]
        odenabled: Optional[bool] = [('default', None)]
        one_way_shop: Optional[bool] = [('default', None)]
        rapid_reprice_enabled: Optional[bool] = [('default', None)]
        return_upsell_fare: Optional[bool] = [('default', None)]
        tier: Optional[int] = [('default', None)]
        weekends_enabled: Optional[bool] = [('default', None)]

samples.travelport.output.common_v48_0.common.TravelComplianceData()
    air_segment_ref: Optional[str] = [('default', None)]
    contract_compliance: List["TravelComplianceData.ContractCompliance"] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    passive_segment_ref: Optional[str] = [('default', None)]
    policy_compliance: List["TravelComplianceData.PolicyCompliance"] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]
    preferred_supplier: List["TravelComplianceData.PreferredSupplier"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_segment_ref: Optional[str] = [('default', None)]
    reservation_locator_ref: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]

    samples.travelport.output.common_v48_0.common.TravelComplianceData.ContractCompliance()
        contract_token: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0)]
        in_contract: Optional[bool] = [('default', None), ('required', True)]

    samples.travelport.output.common_v48_0.common.TravelComplianceData.PolicyCompliance()
        in_policy: Optional[bool] = [('default', None), ('required', True)]
        policy_token: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0)]

    samples.travelport.output.common_v48_0.common.TravelComplianceData.PreferredSupplier()
        preferred: Optional[bool] = [('default', None), ('required', True)]
        profile_type: Optional[TypeProfileType] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TravelInfo()
    travel_purpose: Optional[str] = [('default', None), ('max_length', 50.0)]
    trip_name: Optional[str] = [('default', None), ('max_length', 50.0)]

samples.travelport.output.common_v48_0.common.TravelSegment(Segment)
    arrival_time: Optional[str] = [('default', None)]
    departure_time: Optional[str] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.TravelerInformation()
    booking_traveler_ref: Optional[str] = [('default', None), ('required', True)]
    emergency_contact: Optional["TravelerInformation.EmergencyContact"] = [('default', None)]
    home_airport: Optional[str] = [('default', None), ('length', 3)]
    visa_expiration_date: Optional[str] = [('default', None)]

    samples.travelport.output.common_v48_0.common.TravelerInformation.EmergencyContact()
        name: Optional[str] = [('default', None)]
        phone_number: Optional[PhoneNumber] = [('default', None)]
        relationship: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.TravelerType()
    code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeAdjustmentTarget(str)
    BASE: xs:string = [('default', '"Base"')]
    OTHER: xs:string = [('default', '"Other"')]
    TOTAL: xs:string = [('default', '"Total"')]

samples.travelport.output.common_v48_0.common.TypeAdjustmentType(str)
    AMOUNT: xs:string = [('default', '"Amount"')]
    PERCENTAGE: xs:string = [('default', '"Percentage"')]

samples.travelport.output.common_v48_0.common.TypeAgencyHierarchyLongReference(TypeAgencyHierarchyReference)
    profile_name: Optional[str] = [('default', None), ('max_length', 102.0), ('required', True)]
    profile_version: Optional[int] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeAgencyHierarchyReference()
    profile_id: Optional[int] = [('default', None), ('required', True)]
    profile_type: Optional[TypeAgencyProfileLevel] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeAgencyPayment()
    agency_billing_identifier: Optional[str] = [('default', None), ('max_length', 128.0), ('required', True)]
    agency_billing_number: Optional[str] = [('default', None), ('max_length', 128.0)]
    agency_billing_password: Optional[str] = [('default', None), ('max_length', 128.0)]

samples.travelport.output.common_v48_0.common.TypeAgencyProfileLevel(str)
    AGENCY: xs:string = [('default', '"Agency"')]
    AGENT: xs:string = [('default', '"Agent"')]
    BRANCH: xs:string = [('default', '"Branch"')]
    BRANCH_GROUP: xs:string = [('default', '"BranchGroup"')]

samples.travelport.output.common_v48_0.common.TypeAgentInfo()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeAssociatedRemark(TypeRemarkWithTravelerRef)
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeAssociatedRemarkWithSegmentRef(TypeAssociatedRemark)
    segment_ref: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeBookingTransactionsAllowed()
    booking_enabled: Optional[bool] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeCommissionLevel(str)
    FARE: xs:string = [('default', '"Fare"')]
    PENALTY: xs:string = [('default', '"Penalty"')]
    RECALLED: xs:string = [('default', '"Recalled"')]

samples.travelport.output.common_v48_0.common.TypeCommissionModifier(str)
    COMMISSION_AMOUNT: xs:string = [('default', '"CommissionAmount"')]
    FARE_AMOUNT: xs:string = [('default', '"FareAmount"')]
    FARE_PERCENT: xs:string = [('default', '"FarePercent"')]
    LESS_STANDARD_COMMISSION: xs:string = [('default', '"LessStandardCommission"')]
    STANDARD_PLUS_SUPPLEMENTARY_PERCENT: xs:string = [('default', '"StandardPlusSupplementaryPercent"')]
    SUPPLEMENTARY_AMOUNT: xs:string = [('default', '"SupplementaryAmount"')]
    SUPPLEMENTARY_PERCENT: xs:string = [('default', '"SupplementaryPercent"')]

samples.travelport.output.common_v48_0.common.TypeCommissionType(str)
    FLAT: xs:string = [('default', '"Flat"')]
    PERCENT_BASE: xs:string = [('default', '"PercentBase"')]
    PERCENT_TOTAL: xs:string = [('default', '"PercentTotal"')]

samples.travelport.output.common_v48_0.common.TypeCreditCardType(TypePaymentCard)
    acceptance_override: Optional[bool] = [('default', None)]
    bank_country_code: Optional[str] = [('default', None), ('length', 2)]
    bank_name: Optional[str] = [('default', None)]
    bank_state_code: Optional[str] = [('default', None), ('max_length', 6.0)]
    customer_reference: Optional[str] = [('default', None)]
    enett: bool = [('default', False)]
    extended_payment: Optional[str] = [('default', None)]
    third_party_payment: bool = [('default', False)]

samples.travelport.output.common_v48_0.common.TypeDateRange()
    end_date: Optional[str] = [('default', None), ('required', True)]
    start_date: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeDirection(str)
    INCOMING: xs:string = [('default', '"Incoming"')]
    OUTGOING: xs:string = [('default', '"Outgoing"')]

samples.travelport.output.common_v48_0.common.TypeDistance(str)
    KM: xs:string = [('default', '"KM"')]
    MI: xs:string = [('default', '"MI"')]

samples.travelport.output.common_v48_0.common.TypeDoorCount(str)
    FOUR_TO_FIVE_DOORS: xs:string = [('default', '"FourToFiveDoors"')]
    TWO_TO_FOUR_DOORS: xs:string = [('default', '"TwoToFourDoors"')]
    TWO_TO_THREE_DOORS: xs:string = [('default', '"TwoToThreeDoors"')]

samples.travelport.output.common_v48_0.common.TypeElement(str)
    ACCOUNTING_REMARK: xs:string = [('default', '"AccountingRemark"')]
    ACTION_STATUS: xs:string = [('default', '"ActionStatus"')]
    ADDRESS: xs:string = [('default', '"Address"')]
    AIR_PRICING_INFO: xs:string = [('default', '"AirPricingInfo"')]
    AIR_RESERVATION_AIR_SEGMENT_UPDATE: xs:string = [('default', '"AirReservationAirSegmentUpdate"')]
    AIR_SEGMENT: xs:string = [('default', '"AirSegment"')]
    APPLIED_PROFILE: xs:string = [('default', '"AppliedProfile"')]
    ASSOCIATED_REMARK: xs:string = [('default', '"AssociatedRemark"')]
    AUTO_SEAT_ASSIGNMENT: xs:string = [('default', '"AutoSeatAssignment"')]
    BOOKING_CONFIRMATION: xs:string = [('default', '"BookingConfirmation"')]
    BOOKING_TRAVELER: xs:string = [('default', '"BookingTraveler"')]
    BRAND: xs:string = [('default', '"Brand"')]
    COLLECTION_ADDRESS: xs:string = [('default', '"CollectionAddress"')]
    COMMISSION_REMARK: xs:string = [('default', '"CommissionRemark"')]
    CONSOLIDATOR_REMARK: xs:string = [('default', '"ConsolidatorRemark"')]
    CORPORATE_DISCOUNT_ID: xs:string = [('default', '"CorporateDiscountID"')]
    CREDIT_CARD_AUTHORIZATION: xs:string = [('default', '"CreditCardAuthorization"')]
    CUSTOMER_ID: xs:string = [('default', '"CustomerID"')]
    CUSTOMIZED_NAME_DATA: xs:string = [('default', '"CustomizedNameData"')]
    DELIVERY_ADDRESS: xs:string = [('default', '"DeliveryAddress"')]
    DELIVERY_INFO: xs:string = [('default', '"DeliveryInfo"')]
    DRIVERS_LICENSE: xs:string = [('default', '"DriversLicense"')]
    EMAIL: xs:string = [('default', '"Email"')]
    FORM_OF_PAYMENT: xs:string = [('default', '"FormOfPayment"')]
    GENERAL_REMARK: xs:string = [('default', '"GeneralRemark"')]
    GUARANTEE: xs:string = [('default', '"Guarantee"')]
    HOTEL_SPECIAL_REQUEST: xs:string = [('default', '"HotelSpecialRequest"')]
    INVOICE_REMARK: xs:string = [('default', '"InvoiceRemark"')]
    LINKED_UNIVERSAL_RECORD: xs:string = [('default', '"LinkedUniversalRecord"')]
    LOYALTY_CARD: xs:string = [('default', '"LoyaltyCard"')]
    NAME_REMARK: xs:string = [('default', '"NameRemark"')]
    OSI: xs:string = [('default', '"OSI"')]
    PASSIVE_SEGMENT: xs:string = [('default', '"PassiveSegment"')]
    PAYMENT: xs:string = [('default', '"Payment"')]
    PAYMENT_INFORMATION: xs:string = [('default', '"PaymentInformation"')]
    PHONE_NUMBER: xs:string = [('default', '"PhoneNumber"')]
    POCKET_ITINERARY_REMARK: xs:string = [('default', '"PocketItineraryRemark"')]
    POST_SCRIPT: xs:string = [('default', '"PostScript"')]
    REVIEW_BOOKING: xs:string = [('default', '"ReviewBooking"')]
    SEAT_ASSIGNMENT: xs:string = [('default', '"SeatAssignment"')]
    SERVICE_FEE_INFO: xs:string = [('default', '"ServiceFeeInfo"')]
    SPECIAL_EQUIPMENT: xs:string = [('default', '"SpecialEquipment"')]
    SPECIFIC_SEAT_ASSIGNMENT: xs:string = [('default', '"SpecificSeatAssignment"')]
    SSR: xs:string = [('default', '"SSR"')]
    THIRD_PARTY_INFORMATION: xs:string = [('default', '"ThirdPartyInformation"')]
    TICKETING_MODIFIERS: xs:string = [('default', '"TicketingModifiers"')]
    TRAVEL_COMPLIANCE: xs:string = [('default', '"TravelCompliance"')]
    TRAVEL_PURPOSE: xs:string = [('default', '"TravelPurpose"')]
    TRIP_NAME: xs:string = [('default', '"TripName"')]
    UNASSOCIATED_REMARK: xs:string = [('default', '"UnassociatedRemark"')]
    VEHICLE_SPECIAL_REQUEST: xs:string = [('default', '"VehicleSpecialRequest"')]
    XMLREMARK: xs:string = [('default', '"XMLRemark"')]

samples.travelport.output.common_v48_0.common.TypeElementStatus(str)
    A: xs:string = [('default', '"A"')]
    C: xs:string = [('default', '"C"')]
    M: xs:string = [('default', '"M"')]

samples.travelport.output.common_v48_0.common.TypeErrorInfo()
    auxdata: Optional[Auxdata] = [('default', None)]
    code: Optional[str] = [('default', None), ('required', True)]
    command_history: Optional[str] = [('default', None)]
    description: Optional[str] = [('default', None), ('required', True)]
    service: Optional[str] = [('default', None), ('required', True)]
    stack_trace: Optional[str] = [('default', None)]
    trace_id: Optional[str] = [('default', None)]
    transaction_id: Optional[str] = [('default', None), ('required', True)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeEventType(str)
    CANCEL: xs:string = [('default', '"Cancel"')]
    CREATE: xs:string = [('default', '"Create"')]
    EXCHANGE: xs:string = [('default', '"Exchange"')]
    REFUND: xs:string = [('default', '"Refund"')]
    TICKET: xs:string = [('default', '"Ticket"')]
    VOID: xs:string = [('default', '"Void"')]

samples.travelport.output.common_v48_0.common.TypeFarePull(str)
    REVERSE_OF_ORIGIN_DESTINATION: xs:string = [('default', '"ReverseOfOriginDestination"')]
    SAME_AS_ORIGIN_DESTINATION: xs:string = [('default', '"SameAsOriginDestination"')]

samples.travelport.output.common_v48_0.common.TypeFeeInfo()
    amount: Optional[str] = [('default', None), ('required', True)]
    base_amount: Optional[str] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None)]
    code: Optional[str] = [('default', None), ('required', True)]
    description: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    fee_token: Optional[str] = [('default', None)]
    included_in_base: Optional[IncludedInBase] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    passenger_type_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]
    payment_ref: Optional[str] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    sub_code: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    tax_info_ref: List["TypeFeeInfo.TaxInfoRef"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    text: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0)]

    samples.travelport.output.common_v48_0.common.TypeFeeInfo.TaxInfoRef()
        key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeFlexibleTimeSpec(TypeTimeSpec)
    search_extra_days: Optional["TypeFlexibleTimeSpec.SearchExtraDays"] = [('default', None)]

    samples.travelport.output.common_v48_0.common.TypeFlexibleTimeSpec.SearchExtraDays()
        days_after: Optional[int] = [('default', None)]
        days_before: Optional[int] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeFormOfPaymentPnrreference()
    key: Optional[str] = [('default', None)]
    provider_reservation_level: bool = [('default', True)]

samples.travelport.output.common_v48_0.common.TypeFormOfRefund(str)
    FORM_OF_PAYMENT: xs:string = [('default', '"FormOfPayment"')]
    MCO: xs:string = [('default', '"MCO"')]

samples.travelport.output.common_v48_0.common.TypeFreeFormText()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeFuel(str)
    DIESEL: xs:string = [('default', '"Diesel"')]
    ELECTRIC: xs:string = [('default', '"Electric"')]
    ETHANOL: xs:string = [('default', '"Ethanol"')]
    HYBRID: xs:string = [('default', '"Hybrid"')]
    HYDROGEN: xs:string = [('default', '"Hydrogen"')]
    LPGCNG: xs:string = [('default', '"LPGCNG"')]
    MULTI_FUEL: xs:string = [('default', '"MultiFuel"')]
    PETROL: xs:string = [('default', '"Petrol"')]

samples.travelport.output.common_v48_0.common.TypeFulfillmentIdtype(str)
    BAHN_CARD: xs:string = [('default', '"Bahn Card"')]
    COLLECTION_REFERENCE: xs:string = [('default', '"Collection Reference"')]
    CREDIT_CARD: xs:string = [('default', '"Credit Card"')]
    EURO_CHEQUE_CARD: xs:string = [('default', '"Euro Cheque Card"')]

samples.travelport.output.common_v48_0.common.TypeFulfillmentType(str)
    CORPORATE_KIOSK: xs:string = [('default', '"Corporate Kiosk"')]
    COURIER: xs:string = [('default', '"Courier"')]
    DIGITAL_PRINTING_OF_TICKET_AT_HOME: xs:string = [('default', '"Digital Printing of Ticket at Home"')]
    DIRECT_PRINTING_OF_TICKET: xs:string = [('default', '"Direct Printing of Ticket"')]
    EXPRESS_MAIL: xs:string = [('default', '"Express Mail"')]
    KIOSK: xs:string = [('default', '"Kiosk"')]
    PRINTING_OF_TICKET_AT_HOME: xs:string = [('default', '"Printing of Ticket at Home"')]
    RETRIEVE_TICKET_AT_EUROSTAR_IN_LONDON: xs:string = [('default', '"Retrieve Ticket at Eurostar in London"')]
    STANDARD_MAIL: xs:string = [('default', '"Standard Mail"')]
    TICKETLESS: xs:string = [('default', '"Ticketless"')]
    TICKET_OFFICE: xs:string = [('default', '"Ticket Office"')]
    TRAIN_STATION_SERVICE_DESK: xs:string = [('default', '"Train Station Service Desk"')]
    TRAVEL_AGENCY: xs:string = [('default', '"Travel Agency"')]

samples.travelport.output.common_v48_0.common.TypeGeneralReference()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeGuaranteeInformation()
    agency_type: Optional[str] = [('default', None), ('required', True)]
    iatanumber: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0), ('required', True)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeImageSize(str)
    B: xs:string = [('default', '"B"')]
    C: xs:string = [('default', '"C"')]
    E: xs:string = [('default', '"E"')]
    F: xs:string = [('default', '"F"')]
    G: xs:string = [('default', '"G"')]
    H: xs:string = [('default', '"H"')]
    I: xs:string = [('default', '"I"')]
    J: xs:string = [('default', '"J"')]
    L: xs:string = [('default', '"L"')]
    M: xs:string = [('default', '"M"')]
    O: xs:string = [('default', '"O"')]
    S: xs:string = [('default', '"S"')]
    T: xs:string = [('default', '"T"')]

samples.travelport.output.common_v48_0.common.TypeInvoiceRecordCategory(str)
    INVOICE: xs:string = [('default', '"Invoice"')]
    MANUAL: xs:string = [('default', '"Manual"')]
    REFUND: xs:string = [('default', '"Refund"')]
    VOID: xs:string = [('default', '"Void"')]

samples.travelport.output.common_v48_0.common.TypeItineraryCode(str)
    DOMESTIC: xs:string = [('default', '"Domestic"')]
    INTERNATIONAL: xs:string = [('default', '"International"')]

samples.travelport.output.common_v48_0.common.TypeItineraryType(str)
    NEW: xs:string = [('default', '"New"')]
    ORIGINAL: xs:string = [('default', '"Original"')]

samples.travelport.output.common_v48_0.common.TypeKeyBasedReference()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeKeyword()
    description: Optional[str] = [('default', None)]
    language_code: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('max_length', 12.0), ('required', True)]
    number: Optional[str] = [('default', None)]
    sub_key: List[TypeSubKey] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    text: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.TypeLicenseCode(str)
    ENTERPRISE: xs:string = [('default', '"Enterprise"')]
    STANDARD: xs:string = [('default', '"Standard"')]
    STANDARD_PLUS: xs:string = [('default', '"Standard Plus"')]
    TE_ONLY: xs:string = [('default', '"TE Only"')]
    U_API: xs:string = [('default', '"uAPI"')]

samples.travelport.output.common_v48_0.common.TypeLocation()
    airport: Optional[Airport] = [('default', None)]
    city: Optional[City] = [('default', None)]
    city_or_airport: Optional[CityOrAirport] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeMcofeeType(str)
    CURRENTLY: xs:string = [('default', '"CURRENTLY"')]
    UNDEFINED: xs:string = [('default', '"UNDEFINED"')]

samples.travelport.output.common_v48_0.common.TypeMcostatus(str)
    EXPIRED: xs:string = [('default', '"Expired"')]
    OPEN: xs:string = [('default', '"Open"')]
    REFUNDED: xs:string = [('default', '"Refunded"')]
    USED: xs:string = [('default', '"Used"')]
    VOIDED: xs:string = [('default', '"Voided"')]

samples.travelport.output.common_v48_0.common.TypeMcotype(str)
    AGENCY_SERVICE_FEE: xs:string = [('default', '"AgencyServiceFee"')]
    AIRLINE_SERVICE_FEE: xs:string = [('default', '"AirlineServiceFee"')]
    EXCHANGE_RESIDUAL: xs:string = [('default', '"ExchangeResidual"')]

samples.travelport.output.common_v48_0.common.TypeNonAirReservationRef()
    locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeOtakeyword()
    description: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('max_length', 6.0), ('required', True)]
    number: Optional[str] = [('default', None)]
    sub_key: List[TypeOtasubKey] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    text: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.TypeOtasubKey()
    description: Optional[str] = [('default', None)]
    name: Optional[int] = [('default', None), ('required', True)]
    text: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.TypeOtherImageSize(str)
    X: xs:string = [('default', '"X"')]

samples.travelport.output.common_v48_0.common.TypePassengerType()
    accompanied_passenger: bool = [('default', False)]
    age: Optional[int] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None)]
    code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0), ('required', True)]
    discount_card: List[DiscountCard] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]
    dob: Optional[str] = [('default', None)]
    gender: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    loyalty_card: List[LoyaltyCard] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    name: Optional[Name] = [('default', None)]
    personal_geography: Optional[PersonalGeography] = [('default', None)]
    price_ptconly: Optional[bool] = [('default', None)]
    residency_type: Optional[TypeResidency] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypePaymentCard()
    approval_code: Optional[str] = [('default', None), ('max_length', 16.0), ('min_length', 1.0)]
    billing_address: Optional[TypeStructuredAddress] = [('default', None)]
    cvv: Optional[str] = [('default', None), ('max_length', 4.0)]
    exp_date: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('max_length', 128.0)]
    number: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 13.0)]
    phone_number: Optional[PhoneNumber] = [('default', None)]
    type: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 2.0)]

samples.travelport.output.common_v48_0.common.TypePolicy(str)
    AIR: xs:string = [('default', '"Air"')]
    HOTEL: xs:string = [('default', '"Hotel"')]
    RAIL: xs:string = [('default', '"Rail"')]
    TICKETING: xs:string = [('default', '"Ticketing"')]
    VEHICLE: xs:string = [('default', '"Vehicle"')]

samples.travelport.output.common_v48_0.common.TypePolicyCodesList()
    max_policy_code: List[str] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]
    min_policy_code: List[str] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]
    policy_code: List[str] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.TypePriceClassOfService(str)
    CLASS_BOOKED: xs:string = [('default', '"ClassBooked"')]
    LOWEST_CLASS: xs:string = [('default', '"LowestClass"')]

samples.travelport.output.common_v48_0.common.TypePricingType(str)
    CLASS_BOOKED: xs:string = [('default', '"ClassBooked"')]
    LOWEST_CLASS: xs:string = [('default', '"LowestClass"')]
    LOWEST_QUOTE: xs:string = [('default', '"LowestQuote"')]

samples.travelport.output.common_v48_0.common.TypeProduct(str)
    AIR: xs:string = [('default', '"Air"')]
    CRUISE: xs:string = [('default', '"Cruise"')]
    HOTEL: xs:string = [('default', '"Hotel"')]
    OTHER: xs:string = [('default', '"Other"')]
    RAIL: xs:string = [('default', '"Rail"')]
    VEHICLE: xs:string = [('default', '"Vehicle"')]

samples.travelport.output.common_v48_0.common.TypeProfileApplicability(str)
    ALWAYS: xs:string = [('default', '"Always"')]
    NEVER: xs:string = [('default', '"Never"')]
    OPTIONAL: xs:string = [('default', '"Optional"')]

samples.travelport.output.common_v48_0.common.TypeProfileEntityStatus(str)
    ACTIVE: xs:string = [('default', '"Active"')]
    INACTIVE: xs:string = [('default', '"Inactive"')]

samples.travelport.output.common_v48_0.common.TypeProfileEntityStatusWithDelete(str)
    ACTIVE: xs:string = [('default', '"Active"')]
    DELETED: xs:string = [('default', '"Deleted"')]
    INACTIVE: xs:string = [('default', '"Inactive"')]

samples.travelport.output.common_v48_0.common.TypeProfileLevel(str)
    ACCOUNT: xs:string = [('default', '"Account"')]
    AGENCY: xs:string = [('default', '"Agency"')]
    AGENT: xs:string = [('default', '"Agent"')]
    BRANCH: xs:string = [('default', '"Branch"')]
    BRANCH_GROUP: xs:string = [('default', '"BranchGroup"')]
    TRAVELER: xs:string = [('default', '"Traveler"')]
    TRAVELER_GROUP: xs:string = [('default', '"TravelerGroup"')]

samples.travelport.output.common_v48_0.common.TypeProfileLevelWithCredential(str)
    AGENCY: xs:string = [('default', '"Agency"')]
    AGENT: xs:string = [('default', '"Agent"')]
    BRANCH: xs:string = [('default', '"Branch"')]

samples.travelport.output.common_v48_0.common.TypeProfileLevelWithSystem(str)
    ACCOUNT: xs:string = [('default', '"Account"')]
    AGENCY: xs:string = [('default', '"Agency"')]
    AGENT: xs:string = [('default', '"Agent"')]
    BRANCH: xs:string = [('default', '"Branch"')]
    BRANCH_GROUP: xs:string = [('default', '"BranchGroup"')]
    SYSTEM: xs:string = [('default', '"System"')]
    TRAVELER: xs:string = [('default', '"Traveler"')]
    TRAVELER_GROUP: xs:string = [('default', '"TravelerGroup"')]

samples.travelport.output.common_v48_0.common.TypeProfileRef()
    profile_entity_id: Optional[str] = [('default', None), ('required', True)]
    profile_level: Optional[TypeProfileLevel] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeProfileType(str)
    ACCOUNT: xs:string = [('default', '"Account"')]
    AGENCY: xs:string = [('default', '"Agency"')]
    AGENCY_GROUP: xs:string = [('default', '"AgencyGroup"')]
    AGENT: xs:string = [('default', '"Agent"')]
    BRANCH: xs:string = [('default', '"Branch"')]
    BRANCH_GROUP: xs:string = [('default', '"BranchGroup"')]
    TRAVELER: xs:string = [('default', '"Traveler"')]
    TRAVELER_GROUP: xs:string = [('default', '"TravelerGroup"')]

samples.travelport.output.common_v48_0.common.TypeProviderReservationDetail()
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeProviderReservationSpecificInfo()
    operated_by: List[OperatedBy] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    provider_reservation_info_ref: Optional[ProviderReservationInfoRef] = [('default', None)]
    provider_reservation_level: Optional[bool] = [('default', None)]
    reservation_level: Optional[bool] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeProviderToken(str)
    SABRE: xs:string = [('default', '"Sabre"')]

samples.travelport.output.common_v48_0.common.TypePurchaseWindow(str)
    ANYTIME: xs:string = [('default', '"Anytime"')]
    BOOKING_ONLY: xs:string = [('default', '"BookingOnly"')]
    CHECK_IN_ONLY: xs:string = [('default', '"CheckInOnly"')]
    POST_TICKETING: xs:string = [('default', '"PostTicketing"')]
    TICKETING_ONLY: xs:string = [('default', '"TicketingOnly"')]

samples.travelport.output.common_v48_0.common.TypeQueueModifyAction(str)
    ADD: xs:string = [('default', '"Add"')]
    MOVE: xs:string = [('default', '"Move"')]
    REMOVE: xs:string = [('default', '"Remove"')]
    REQUEUE: xs:string = [('default', '"Requeue"')]
    UNLOCK: xs:string = [('default', '"Unlock"')]

samples.travelport.output.common_v48_0.common.TypeRateCategory(str)
    ASSOCIATION: xs:string = [('default', '"Association"')]
    BUSINESS: xs:string = [('default', '"Business"')]
    CONSORTIUM: xs:string = [('default', '"Consortium"')]
    CONVENTION: xs:string = [('default', '"Convention"')]
    CORPORATE: xs:string = [('default', '"Corporate"')]
    CREDENTIAL: xs:string = [('default', '"Credential"')]
    GOVERNMENT: xs:string = [('default', '"Government"')]
    INCLUSIVE: xs:string = [('default', '"Inclusive"')]
    INDUSTRY: xs:string = [('default', '"Industry"')]
    NEGOTIATED: xs:string = [('default', '"Negotiated"')]
    PACKAGE: xs:string = [('default', '"Package"')]
    PREPAY: xs:string = [('default', '"Prepay"')]
    PROMOTIONAL: xs:string = [('default', '"Promotional"')]
    STANDARD: xs:string = [('default', '"Standard"')]

samples.travelport.output.common_v48_0.common.TypeRateDescription()
    name: Optional[str] = [('default', None)]
    text: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.common_v48_0.common.TypeRateGuarantee(str)
    AGENT_ENTERED: xs:string = [('default', '"Agent Entered"')]
    RATE_GUARANTEED: xs:string = [('default', '"Rate Guaranteed"')]
    RATE_QUOTED: xs:string = [('default', '"Rate Quoted"')]

samples.travelport.output.common_v48_0.common.TypeRateTimePeriod(str)
    BUNDLE: xs:string = [('default', '"Bundle"')]
    DAILY: xs:string = [('default', '"Daily"')]
    HOURLY: xs:string = [('default', '"Hourly"')]
    MONTHLY: xs:string = [('default', '"Monthly"')]
    OTHER: xs:string = [('default', '"Other"')]
    PACKAGE: xs:string = [('default', '"Package"')]
    TOTAL: xs:string = [('default', '"Total"')]
    WEEKEND_DAY: xs:string = [('default', '"WeekendDay"')]
    WEEKLY: xs:string = [('default', '"Weekly"')]

samples.travelport.output.common_v48_0.common.TypeRecordStatus(str)
    ALL: xs:string = [('default', '"All"')]
    CANCELED: xs:string = [('default', '"Canceled"')]
    CURRENT: xs:string = [('default', '"Current"')]
    PAST: xs:string = [('default', '"Past"')]
    UNKNOWN: xs:string = [('default', '"Unknown"')]

samples.travelport.output.common_v48_0.common.TypeRemark()
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeRemarkWithTravelerRef()
    booking_traveler_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    remark_data: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeReqSeat(str)
    AISLE: xs:string = [('default', '"Aisle"')]
    ANY: xs:string = [('default', '"Any"')]
    BULKHEAD: xs:string = [('default', '"Bulkhead"')]
    EXIT: xs:string = [('default', '"Exit"')]
    MIDDLE: xs:string = [('default', '"Middle"')]
    WINDOW: xs:string = [('default', '"Window"')]

samples.travelport.output.common_v48_0.common.TypeReserveRequirement(str)
    DEPOSIT: xs:string = [('default', '"Deposit"')]
    GUARANTEE: xs:string = [('default', '"Guarantee"')]
    OTHER: xs:string = [('default', '"Other"')]
    PREPAYMENT: xs:string = [('default', '"Prepayment"')]

samples.travelport.output.common_v48_0.common.TypeResidency(str)
    EMPLOYEE: xs:string = [('default', '"Employee"')]
    NATIONAL: xs:string = [('default', '"National"')]
    RESIDENT: xs:string = [('default', '"Resident"')]

samples.travelport.output.common_v48_0.common.TypeResponseImageSize()
    B: xs:string = [('default', '"B"')]
    C: xs:string = [('default', '"C"')]
    E: xs:string = [('default', '"E"')]
    F: xs:string = [('default', '"F"')]
    G: xs:string = [('default', '"G"')]
    H: xs:string = [('default', '"H"')]
    I: xs:string = [('default', '"I"')]
    J: xs:string = [('default', '"J"')]
    L: xs:string = [('default', '"L"')]
    M: xs:string = [('default', '"M"')]
    O: xs:string = [('default', '"O"')]
    S: xs:string = [('default', '"S"')]
    T: xs:string = [('default', '"T"')]
    X: xs:string = [('default', '"X"')]

samples.travelport.output.common_v48_0.common.TypeResultMessage()
    code: Optional[int] = [('default', None), ('required', True)]
    type: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeSearchLocation()
    airport: Optional[Airport] = [('default', None)]
    city: Optional[City] = [('default', None)]
    city_or_airport: Optional[CityOrAirport] = [('default', None)]
    coordinate_location: Optional[CoordinateLocation] = [('default', None)]
    distance: Optional[Distance] = [('default', None)]
    rail_location: Optional[RailLocation] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeSearchTimeSpec()
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeSegmentRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeSource(str)
    AGENCY: xs:string = [('default', '"Agency"')]
    AGENT: xs:string = [('default', '"Agent"')]
    BRANCH: xs:string = [('default', '"Branch"')]
    BRANCH_GROUP: xs:string = [('default', '"BranchGroup"')]

samples.travelport.output.common_v48_0.common.TypeSpecificTime()
    time: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeStatus(str)
    ISSUED: xs:string = [('default', '"Issued"')]
    ISSUE_LATER: xs:string = [('default', '"IssueLater"')]
    READY_TO_ISSUE: xs:string = [('default', '"ReadyToIssue"')]

samples.travelport.output.common_v48_0.common.TypeStructuredAddress()
    address_name: Optional[str] = [('default', None), ('max_length', 128.0)]
    city: Optional[str] = [('default', None), ('max_length', 50.0), ('min_length', 2.0)]
    country: Optional[str] = [('default', None), ('length', 2)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    postal_code: Optional[str] = [('default', None), ('max_length', 15.0), ('min_length', 1.0)]
    provider_reservation_info_ref: List[ProviderReservationInfoRef] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    state: Optional[State] = [('default', None)]
    street: List[str] = [('default', 'list'), ('max_length', 255.0), ('max_occurs', 5), ('min_length', 1.0), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.TypeSubKey()
    description: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('required', True)]
    text: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common.TypeTax()
    amount: Optional[str] = [('default', None)]
    code: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeTaxInfo()
    amount: Optional[str] = [('default', None), ('required', True)]
    carrier_defined_category: Optional[str] = [('default', None)]
    category: Optional[str] = [('default', None), ('required', True)]
    country_code: Optional[str] = [('default', None)]
    coupon_ref: Optional[str] = [('default', None)]
    destination_airport: Optional[str] = [('default', None), ('length', 3)]
    fare_info_ref: Optional[str] = [('default', None)]
    flight_details_ref: Optional[str] = [('default', None)]
    included_in_base: Optional[IncludedInBase] = [('default', None)]
    key: Optional[str] = [('default', None)]
    origin_airport: Optional[str] = [('default', None), ('length', 3)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    segment_ref: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    tax_detail: List[TaxDetail] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tax_exempted: Optional[bool] = [('default', None)]
    text: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0)]

samples.travelport.output.common_v48_0.common.TypeTicketStatus(str)
    N: xs:string = [('default', '"N"')]
    R: xs:string = [('default', '"R"')]
    S: xs:string = [('default', '"S"')]
    T: xs:string = [('default', '"T"')]
    U: xs:string = [('default', '"U"')]
    V: xs:string = [('default', '"V"')]
    X: xs:string = [('default', '"X"')]
    Z: xs:string = [('default', '"Z"')]

samples.travelport.output.common_v48_0.common.TypeTimeRange()
    earliest_time: Optional[str] = [('default', None), ('required', True)]
    latest_time: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeTimeSpec()
    preferred_time: Optional[str] = [('default', None)]
    specific_time: Optional[TypeSpecificTime] = [('default', None)]
    time_range: Optional[TypeTimeRange] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeTransactionsAllowed(TypeBookingTransactionsAllowed)
    pricing_enabled: Optional[bool] = [('default', None)]
    shopping_enabled: Optional[bool] = [('default', None)]

samples.travelport.output.common_v48_0.common.TypeTrinary(str)
    FALSE_VALUE: xs:string = [('default', '"false"')]
    TRUE_VALUE: xs:string = [('default', '"true"')]
    UNKNOWN: xs:string = [('default', '"unknown"')]

samples.travelport.output.common_v48_0.common.TypeVehicleCategory(str)
    ALL_TERRAIN: xs:string = [('default', '"AllTerrain"')]
    CAR: xs:string = [('default', '"Car"')]
    COMMERCIAL_VAN_OR_TRUCK: xs:string = [('default', '"CommercialVanOrTruck"')]
    CONVERTIBLE: xs:string = [('default', '"Convertible"')]
    COUPE: xs:string = [('default', '"Coupe"')]
    CROSSOVER: xs:string = [('default', '"Crossover"')]
    EXTENDED_CAB_PICKUP: xs:string = [('default', '"ExtendedCabPickup"')]
    LIMO: xs:string = [('default', '"Limo"')]
    MONOSPACE: xs:string = [('default', '"Monospace"')]
    MOTORCYCLE: xs:string = [('default', '"Motorcycle"')]
    MOTORHOME: xs:string = [('default', '"Motorhome"')]
    PICKUP: xs:string = [('default', '"Pickup"')]
    RECREATIONAL: xs:string = [('default', '"Recreational"')]
    REGULAR_CAB_PICKUP: xs:string = [('default', '"RegularCabPickup"')]
    ROADSTER: xs:string = [('default', '"Roadster"')]
    SPECIAL: xs:string = [('default', '"Special"')]
    SPECIAL_OFFER: xs:string = [('default', '"SpecialOffer"')]
    SPORT: xs:string = [('default', '"Sport"')]
    STATION_WAGON: xs:string = [('default', '"StationWagon"')]
    SUV: xs:string = [('default', '"SUV"')]
    TRUCK: xs:string = [('default', '"Truck"')]
    TWO_WHEEL_VEHICLE: xs:string = [('default', '"TwoWheelVehicle"')]
    VAN: xs:string = [('default', '"Van"')]

samples.travelport.output.common_v48_0.common.TypeVehicleClass(str)
    CARGO_VAN: xs:string = [('default', '"CargoVan"')]
    COMPACT: xs:string = [('default', '"Compact"')]
    COMPACT_ELITE: xs:string = [('default', '"CompactElite"')]
    ECONOMY: xs:string = [('default', '"Economy"')]
    ECONOMY_ELITE: xs:string = [('default', '"EconomyElite"')]
    EXOTIC: xs:string = [('default', '"Exotic"')]
    EXOTIC_SUV: xs:string = [('default', '"ExoticSUV"')]
    FIFTEEN_PASSENGER_VAN: xs:string = [('default', '"FifteenPassengerVan"')]
    FOUR_WHEEL_DRIVE: xs:string = [('default', '"FourWheelDrive"')]
    FULLSIZE: xs:string = [('default', '"Fullsize"')]
    FULLSIZE_ELITE: xs:string = [('default', '"FullsizeElite"')]
    INTERMEDIATE: xs:string = [('default', '"Intermediate"')]
    INTERMEDIATE_ELITE: xs:string = [('default', '"IntermediateElite"')]
    LARGE_SUV: xs:string = [('default', '"LargeSUV"')]
    LARGE_TRUCK: xs:string = [('default', '"LargeTruck"')]
    LUXURY: xs:string = [('default', '"Luxury"')]
    LUXURY_ELITE: xs:string = [('default', '"LuxuryElite"')]
    MEDIUM_SUV: xs:string = [('default', '"MediumSUV"')]
    MINI: xs:string = [('default', '"Mini"')]
    MINIVAN: xs:string = [('default', '"Minivan"')]
    MINI_ELITE: xs:string = [('default', '"MiniElite"')]
    MOPED: xs:string = [('default', '"Moped"')]
    MOVING_VAN: xs:string = [('default', '"MovingVan"')]
    OVERSIZE: xs:string = [('default', '"Oversize"')]
    PREMIUM: xs:string = [('default', '"Premium"')]
    PREMIUM_ELITE: xs:string = [('default', '"PremiumElite"')]
    REGULAR: xs:string = [('default', '"Regular"')]
    SMALL_OR_MEDIUM_TRUCK: xs:string = [('default', '"SmallOrMediumTruck"')]
    SMALL_SUV: xs:string = [('default', '"SmallSUV"')]
    SPECIAL: xs:string = [('default', '"Special"')]
    STANDARD: xs:string = [('default', '"Standard"')]
    STANDARD_ELITE: xs:string = [('default', '"StandardElite"')]
    STRETCH: xs:string = [('default', '"Stretch"')]
    SUBCOMPACT: xs:string = [('default', '"Subcompact"')]
    TWELVE_FOOT_TRUCK: xs:string = [('default', '"TwelveFootTruck"')]
    TWELVE_PASSENGER_VAN: xs:string = [('default', '"TwelvePassengerVan"')]
    TWENTYFOUR_FOOT_TRUCK: xs:string = [('default', '"TwentyfourFootTruck"')]
    TWENTYSIX_FOOT_TRUCK: xs:string = [('default', '"TwentysixFootTruck"')]
    TWENTY_FOOT_TRUCK: xs:string = [('default', '"TwentyFootTruck"')]
    UNIQUE: xs:string = [('default', '"Unique"')]

samples.travelport.output.common_v48_0.common.TypeVehicleLocation(str)
    AIRPORT: xs:string = [('default', '"Airport"')]
    CAR_DEALER: xs:string = [('default', '"CarDealer"')]
    CITY_CENTER_DOWNTOWN: xs:string = [('default', '"CityCenterDowntown"')]
    EAST_OF_CITY_CENTER: xs:string = [('default', '"EastOfCityCenter"')]
    HOTEL: xs:string = [('default', '"Hotel"')]
    NEAR_RESORT: xs:string = [('default', '"NearResort"')]
    NORTH_OF_CITY_CENTER: xs:string = [('default', '"NorthOfCityCenter"')]
    PORT_OR_FERRY: xs:string = [('default', '"PortOrFerry"')]
    RAILWAY_STATION: xs:string = [('default', '"RailwayStation"')]
    SHUTTLE_OFF_AIRPORT: xs:string = [('default', '"ShuttleOffAirport"')]
    SHUTTLE_ON_AIRPORT: xs:string = [('default', '"ShuttleOnAirport"')]
    SOUTH_OF_CITY_CENTER: xs:string = [('default', '"SouthOfCityCenter"')]
    TERMINAL: xs:string = [('default', '"Terminal"')]
    UNKNOWN: xs:string = [('default', '"Unknown"')]
    WEST_OF_CITY_CENTER: xs:string = [('default', '"WestOfCityCenter"')]

samples.travelport.output.common_v48_0.common.TypeVehicleTransmission(str)
    AUTOMATIC: xs:string = [('default', '"Automatic"')]
    AUTOMATIC4_WD: xs:string = [('default', '"Automatic4WD"')]
    AUTOMATIC_AWD: xs:string = [('default', '"AutomaticAWD"')]
    MANUAL: xs:string = [('default', '"Manual"')]
    MANUAL4_WD: xs:string = [('default', '"Manual4WD"')]
    MANUAL_AWD: xs:string = [('default', '"ManualAWD"')]

samples.travelport.output.common_v48_0.common.TypeVendorLocation()
    key: Optional[str] = [('default', None)]
    more_rates_token: Optional[str] = [('default', None), ('max_length', 30.0), ('min_length', 1.0)]
    preferred_option: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    vendor_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0), ('required', True)]
    vendor_location_id: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

samples.travelport.output.common_v48_0.common.TypeVoucherInformation()
    account_name: Optional[str] = [('default', None)]
    amount: Optional[str] = [('default', None)]
    confirmation_number: Optional[str] = [('default', None)]
    number: Optional[str] = [('default', None), ('max_length', 16.0), ('min_length', 1.0)]
    voucher_type: Optional[TypeVoucherType] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.TypeVoucherType(str)
    FULL_CREDIT: xs:string = [('default', '"FullCredit"')]
    GROUP_OR_DAY: xs:string = [('default', '"GroupOrDay"')]
    REGULAR_VOUCHER: xs:string = [('default', '"RegularVoucher"')]
    SPECIFIC_VALUE: xs:string = [('default', '"SpecificValue"')]

samples.travelport.output.common_v48_0.common.UnassociatedRemark(TypeRemarkWithTravelerRef)
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]

samples.travelport.output.common_v48_0.common.UnitedNations()
    number: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.common_v48_0.common.UrticketStatus(str)
    NOT_APPLICABLE: xs:string = [('default', '"Not Applicable"')]
    PARTIALLY_TICKETED: xs:string = [('default', '"Partially Ticketed"')]
    TICKETED: xs:string = [('default', '"Ticketed"')]
    UNTICKETED: xs:string = [('default', '"Unticketed"')]

samples.travelport.output.common_v48_0.common.VendorLocation(TypeVendorLocation)

samples.travelport.output.common_v48_0.common.Xmlremark()
    category: Optional[str] = [('default', None), ('max_length', 10.0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common_req_rsp.BaseCoreReq()
    agent_idoverride: List[AgentIdoverride] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    authorized_by: Optional[str] = [('default', None)]
    billing_point_of_sale_info: Optional[BillingPointOfSaleInfo] = [('default', None), ('required', True)]
    language_code: Optional[str] = [('default', None)]
    override_logging: Optional[TypeLoggingLevel] = [('default', None)]
    target_branch: Optional[str] = [('default', None), ('max_length', 25.0), ('min_length', 1.0)]
    terminal_session_info: Optional[TerminalSessionInfo] = [('default', None)]
    token_id: Optional[str] = [('default', None)]
    trace_id: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common_req_rsp.BaseCoreSearchReq(BaseCoreReq)
    next_result_reference: List[NextResultReference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common_req_rsp.BaseCreateReservationReq(BaseReq)
    accounting_remark: List[AccountingRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    agency_contact_info: Optional[AgencyContactInfo] = [('default', None)]
    booking_traveler: List[BookingTraveler] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    commission_remark: Optional[CommissionRemark] = [('default', None)]
    consolidator_remark: Optional[ConsolidatorRemark] = [('default', None)]
    continuity_check_override: Optional[ContinuityCheckOverride] = [('default', None)]
    customer_id: Optional[CustomerId] = [('default', None)]
    customer_number: Optional[str] = [('default', None)]
    email_notification: Optional[EmailNotification] = [('default', None)]
    file_finishing_info: Optional[FileFinishingInfo] = [('default', None)]
    general_remark: List[GeneralRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    invoice_remark: List[InvoiceRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    linked_universal_record: List[LinkedUniversalRecord] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    osi: List[Osi] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    passive_info: Optional[PassiveInfo] = [('default', None)]
    postscript: Optional[Postscript] = [('default', None)]
    provider_code: Optional[str] = [('default', None)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]
    queue_place: Optional[QueuePlace] = [('default', None)]
    rule_name: Optional[str] = [('default', None), ('max_length', 10.0)]
    ssr: List[Ssr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    unassociated_remark: List[UnassociatedRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    universal_record_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]
    version: Optional[int] = [('default', None)]
    xmlremark: List[Xmlremark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common_req_rsp.BaseCreateWithFormOfPaymentReq(BaseCreateReservationReq)
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common_req_rsp.BaseReq(BaseCoreReq)
    override_pcc: Optional[OverridePcc] = [('default', None)]
    retrieve_provider_reservation_details: bool = [('default', False)]

samples.travelport.output.common_v48_0.common_req_rsp.BaseRsp()
    command_history: Optional[str] = [('default', None)]
    response_message: List[ResponseMessage] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    response_time: Optional[int] = [('default', None)]
    trace_id: Optional[str] = [('default', None)]
    transaction_id: Optional[str] = [('default', None)]

samples.travelport.output.common_v48_0.common_req_rsp.BaseSearchReq(BaseReq)
    next_result_reference: List[NextResultReference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common_req_rsp.BaseSearchRsp(BaseRsp)
    next_result_reference: List[NextResultReference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.common_v48_0.common_req_rsp.ErrorInfo(TypeErrorInfo)

samples.travelport.output.common_v48_0.common_req_rsp.TypeLoggingLevel(str)
    DEBUG: xs:string = [('default', '"DEBUG"')]
    ERROR: xs:string = [('default', '"ERROR"')]
    FATAL: xs:string = [('default', '"FATAL"')]
    INFO: xs:string = [('default', '"INFO"')]
    TRACE: xs:string = [('default', '"TRACE"')]
    WARN: xs:string = [('default', '"WARN"')]

samples.travelport.output.rail_v48_0.rail.Characteristic()
    class_value: Optional[TypeCoachClassType] = [('default', None)]
    smoking: bool = [('default', False)]

samples.travelport.output.rail_v48_0.rail.Coach()
    characteristic: Optional[Characteristic] = [('default', None)]
    coach_number: Optional[str] = [('default', None)]
    remark: List[Remark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.rail_v48_0.rail.FareValidity()
    not_valid_after: Optional[str] = [('default', None)]
    not_valid_before: Optional[str] = [('default', None)]
    rail_journey_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.FulFillmentType()
    value: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0)]

samples.travelport.output.rail_v48_0.rail.JourneyRemark()
    category: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.OperatingCompany()
    code: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailAutoSeatAssignment()
    booking_traveler_ref: Optional[str] = [('default', None)]
    rail_segment_ref: Optional[str] = [('default', None)]
    seat_type: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0), ('required', True)]
    seat_value: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailAvailInfo()
    cabin_class: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0)]
    class_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 1.0)]
    quantity: Optional[int] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailBookingInfo()
    optional_service: bool = [('default', False)]
    rail_fare_ref: Optional[str] = [('default', None), ('required', True)]
    rail_journey_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailExchangeInfo()
    approximate_cancellation_fee: Optional[str] = [('default', None)]
    approximate_exchange_amount: Optional[str] = [('default', None)]
    approximate_refund_amount: Optional[str] = [('default', None)]
    cancellation_fee: Optional[str] = [('default', None)]
    exchange_amount: Optional[str] = [('default', None)]
    refund_amount: Optional[str] = [('default', None)]
    retain_amount: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailExchangeSolution()
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    equivalent_base_price: Optional[str] = [('default', None)]
    fees: Optional[str] = [('default', None)]
    host_token_ref: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    offer_id: Optional[int] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    rail_exchange_info: Optional[RailExchangeInfo] = [('default', None)]
    rail_journey: List[RailJourney] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_journey_ref: List[RailJourneyRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_pricing_info: List[RailPricingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    reference: Optional[str] = [('default', None)]
    services: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0), ('required', True)]
    taxes: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailFare()
    amount: Optional[str] = [('default', None)]
    cabin_class: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0), ('required', True)]
    cross_city_fare: bool = [('default', False)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    destination_station_name: Optional[str] = [('default', None)]
    effective_date: Optional[str] = [('default', None), ('required', True)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    fare_basis: Optional[str] = [('default', None)]
    fare_reference: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0)]
    fare_validity: List[FareValidity] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ful_fillment_type: List[FulFillmentType] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    host_token: Optional[HostToken] = [('default', None)]
    journey_direction: Optional[TypeJourneyDirection] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    origin_station_name: Optional[str] = [('default', None)]
    passenger_type_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]
    rail_fare_component: List[RailFareComponent] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    rail_fare_id: List[RailFareId] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_fare_idref: List[RailFareIdref] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_fare_note_ref: List[RailFareNoteRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_loc_destination: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('white_space', 'collapse')]
    rail_loc_origin: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('white_space', 'collapse')]
    reservation_required: Optional[bool] = [('default', None)]
    route_description: Optional[str] = [('default', None)]
    ticket_type_code: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailFareComponent()
    age: Optional[int] = [('default', None)]
    amount: Optional[str] = [('default', None)]
    discount: List["RailFareComponent.Discount"] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    key: Optional[str] = [('default', None), ('required', True)]
    passenger_type_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]
    quantity: Optional[int] = [('default', None)]
    supplier_passenger_type: Optional[str] = [('default', None)]

    samples.travelport.output.rail_v48_0.rail.RailFareComponent.Discount()
        discount_card: List[DiscountCard] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 1)]
        key: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailFareId()
    category: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailFareIdlist()
    rail_fare_id: List[RailFareId] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.rail_v48_0.rail.RailFareIdref()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailFareList()
    rail_fare: List[RailFare] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.rail_v48_0.rail.RailFareNote()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    note_name: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailFareNoteList()
    rail_fare_note: List[RailFareNote] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.rail_v48_0.rail.RailFareNoteRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailFareRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailInfo()
    arrival_time: Optional[str] = [('default', None)]
    departure_time: Optional[str] = [('default', None), ('required', True)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    rail_loc_destination: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('white_space', 'collapse')]
    rail_loc_origin: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('white_space', 'collapse')]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0), ('required', True)]
    train_number: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailJourney()
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    arrival_time: Optional[str] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    departure_time: Optional[str] = [('default', None), ('required', True)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    destination_station_name: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    equivalent_base_price: Optional[str] = [('default', None)]
    fees: Optional[str] = [('default', None)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    journey_direction: Optional[TypeJourneyDirection] = [('default', None)]
    journey_duration: Optional[int] = [('default', None)]
    journey_remark: List[JourneyRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    operation: Optional[str] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    origin_station_name: Optional[str] = [('default', None)]
    passive_provider_reservation_info_ref: Optional[str] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    rail_loc_destination: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('white_space', 'collapse')]
    rail_loc_origin: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('white_space', 'collapse')]
    rail_segment: List[RailSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_segment_ref: List[RailSegmentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    route_description: Optional[str] = [('default', None), ('max_length', 255.0)]
    route_reference: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0)]
    services: Optional[str] = [('default', None)]
    status: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    taxes: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]
    travel_order: Optional[int] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailJourneyList()
    rail_journey: List[RailJourney] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.rail_v48_0.rail.RailJourneyRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailLegModifiers()
    class_value: Optional[str] = [('default', None)]
    permitted_connection_points: Optional["RailLegModifiers.PermittedConnectionPoints"] = [('default', None)]
    prohibited_connection_points: Optional["RailLegModifiers.ProhibitedConnectionPoints"] = [('default', None)]

    samples.travelport.output.rail_v48_0.rail.RailLegModifiers.PermittedConnectionPoints()
        connection_point: List[ConnectionPoint] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.rail_v48_0.rail.RailLegModifiers.ProhibitedConnectionPoints()
        connection_point: List[ConnectionPoint] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.rail_v48_0.rail.RailPricingInfo()
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_exchange_amount: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    booking_traveler_ref: List[BookingTravelerRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    equivalent_base_price: Optional[str] = [('default', None)]
    exchange_amount: Optional[str] = [('default', None)]
    fees: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    passenger_type: List[TypePassengerType] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_booking_info: List[RailBookingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_fare: List[RailFare] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_fare_ref: List[RailFareRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    services: Optional[str] = [('default', None)]
    taxes: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailPricingModifiers()
    currency_type: Optional[str] = [('default', None), ('length', 3)]
    discount_card: List[DiscountCard] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]
    prohibit_non_exchangeable_fares: bool = [('default', False)]
    prohibit_non_refundable_fares: bool = [('default', False)]
    rail_search_type: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailPricingSolution()
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    equivalent_base_price: Optional[str] = [('default', None)]
    fees: Optional[str] = [('default', None)]
    host_token_ref: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    offer_id: Optional[int] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    rail_journey: List[RailJourney] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_journey_ref: List[RailJourneyRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_pricing_info: List[RailPricingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    reference: Optional[str] = [('default', None)]
    services: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0), ('required', True)]
    taxes: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailRefundInfo()
    cancellation_fee: Optional[str] = [('default', None)]
    net_amount: Optional[str] = [('default', None)]
    refund: Optional[bool] = [('default', None)]
    refund_amount: Optional[str] = [('default', None)]
    retain: Optional[bool] = [('default', None)]
    retain_amount: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailReservation(BaseReservation)
    booking_status: Optional[str] = [('default', None), ('required', True)]
    booking_traveler_ref: List[BookingTravelerRef] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 1)]
    payment: List[Payment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_fare_note_list: Optional[RailFareNoteList] = [('default', None)]
    rail_journey: List[RailJourney] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    rail_pricing_info: List[RailPricingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_ticket_info: List[RailTicketInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    supplier_locator: List[SupplierLocator] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.rail_v48_0.rail.RailSearchModifiers()
    class_value: Optional[str] = [('default', None)]
    direction: Optional[TypeRailDirection] = [('default', None)]
    max_changes: int = [('default', 2), ('max_inclusive', 3.0), ('min_inclusive', 0.0)]
    max_solutions: int = [('default', 300)]
    preferred_suppliers: Optional["RailSearchModifiers.PreferredSuppliers"] = [('default', None)]

    samples.travelport.output.rail_v48_0.rail.RailSearchModifiers.PreferredSuppliers()
        rail_supplier: List[RailSupplier] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.rail_v48_0.rail.RailSegment(Segment)
    arrival_time: Optional[str] = [('default', None)]
    cabin_class: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0)]
    class_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 1.0)]
    departure_time: Optional[str] = [('default', None), ('required', True)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    destination_station_name: Optional[str] = [('default', None)]
    ful_fillment_type: List[FulFillmentType] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    host_token_ref: Optional[str] = [('default', None)]
    operating_company: Optional[OperatingCompany] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    origin_station_name: Optional[str] = [('default', None)]
    rail_avail_info: List[RailAvailInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_loc_destination: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('white_space', 'collapse')]
    rail_loc_origin: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('white_space', 'collapse')]
    rail_segment_info: List[RailSegmentInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    reservation_required: Optional[bool] = [('default', None)]
    seat_assignable: Optional[bool] = [('default', None)]
    train_number: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 1.0)]
    train_type: Optional[str] = [('default', None)]
    train_type_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 1.0)]
    transport_code: Optional[str] = [('default', None)]
    transport_mode: Optional[TypeTransportMode] = [('default', None)]
    travel_time: Optional[int] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailSegmentInfo()
    category: Optional[str] = [('default', None)]
    type: Optional[TypeRailSegmentInfo] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.rail_v48_0.rail.RailSegmentList()
    rail_segment: List[RailSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.rail_v48_0.rail.RailSegmentRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailSolutionChangedInfo()
    rail_pricing_solution: Optional[RailPricingSolution] = [('default', None), ('required', True)]
    reason_code: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailSpecificSeatAssignment()
    assignment: Optional[str] = [('default', None), ('required', True)]
    booking_traveler_ref: Optional[str] = [('default', None), ('required', True)]
    coach_label: Optional[str] = [('default', None), ('required', True)]
    place_label: Optional[str] = [('default', None), ('required', True)]
    rail_segment_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailSupplier()
    code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.rail_v48_0.rail.RailTicketInfo()
    booking_traveler_ref: Optional[str] = [('default', None)]
    issue_location: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 0.0)]
    issued_date: Optional[str] = [('default', None)]
    number: Optional[str] = [('default', None), ('max_length', 19.0), ('min_length', 1.0), ('required', True)]
    rail_journey_ref: List[RailJourneyRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_advisory: List[TicketAdvisory] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]
    ticket_form_type: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 0.0)]
    ticket_status: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 1.0)]
    ticket_type: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 1.0)]
    traffic_type: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 1.0)]

samples.travelport.output.rail_v48_0.rail.SearchRailLeg()
    rail_leg_modifiers: Optional[RailLegModifiers] = [('default', None)]
    rail_segment_list: Optional[RailSegmentList] = [('default', None)]
    search_arv_time: List[TypeTimeSpec] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    search_dep_time: List[TypeFlexibleTimeSpec] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    search_destination: List[TypeSearchLocation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    search_origin: List[TypeSearchLocation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.rail_v48_0.rail.TicketAdvisory()
    key: Optional[str] = [('default', None)]
    language_code: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None), ('max_length', 500.0), ('min_length', 1.0)]

samples.travelport.output.rail_v48_0.rail.TypeCoachClassType(str)
    FIRST_AND_STANDARD_CLASS: xs:string = [('default', '"First and Standard Class"')]
    FIRST_CLASS: xs:string = [('default', '"First Class"')]
    OTHER: xs:string = [('default', '"Other"')]
    STANDARD_CLASS: xs:string = [('default', '"Standard Class"')]

samples.travelport.output.rail_v48_0.rail.TypeJourneyDirection(str)
    OUTWARD: xs:string = [('default', '"Outward"')]
    RETURN_VALUE: xs:string = [('default', '"Return"')]

samples.travelport.output.rail_v48_0.rail.TypeRailDirection(str)
    BOTH: xs:string = [('default', '"Both"')]
    INBOUND: xs:string = [('default', '"Inbound"')]
    OUTBOUND: xs:string = [('default', '"Outbound"')]

samples.travelport.output.rail_v48_0.rail.TypeRailSegmentInfo(str)
    EXTRA: xs:string = [('default', '"Extra"')]
    SERVICES: xs:string = [('default', '"Services"')]
    VENDOR: xs:string = [('default', '"Vendor"')]

samples.travelport.output.rail_v48_0.rail.TypeRailTicketStatus(str)
    CAN_BE_PRINTED: xs:string = [('default', '"Can Be Printed"')]
    NOT_PRINT_READY: xs:string = [('default', '"Not Print Ready"')]
    PRINTED: xs:string = [('default', '"Printed"')]
    QUEUED_SENT_TO_PRINT_MODULE: xs:string = [('default', '"Queued (sent to print module)"')]

samples.travelport.output.rail_v48_0.rail.TypeResponseType(str)
    AVAILABILITY: xs:string = [('default', '"Availability"')]
    FARES: xs:string = [('default', '"Fares"')]
    SCHEDULES: xs:string = [('default', '"Schedules"')]

samples.travelport.output.rail_v48_0.rail.TypeTransportMode(str)
    BICYCLE: xs:string = [('default', '"Bicycle"')]
    BOAT: xs:string = [('default', '"Boat"')]
    BUS: xs:string = [('default', '"Bus"')]
    CABLE_CAR: xs:string = [('default', '"Cable Car"')]
    CAR: xs:string = [('default', '"Car"')]
    CARRIAGE: xs:string = [('default', '"Carriage"')]
    CAR_RUSH_HOUR: xs:string = [('default', '"Car/Rush hour"')]
    COURTESY_CAR: xs:string = [('default', '"Courtesy car"')]
    EXPRESS_TRAIN: xs:string = [('default', '"Express Train"')]
    HELICOPTER: xs:string = [('default', '"Helicopter"')]
    LIMOUSINE: xs:string = [('default', '"Limousine"')]
    METRO: xs:string = [('default', '"Metro"')]
    MONORAIL: xs:string = [('default', '"Monorail"')]
    MOTORBIKE: xs:string = [('default', '"Motorbike"')]
    NO_TRANSPORTATION: xs:string = [('default', '"No Transportation"')]
    OTHER: xs:string = [('default', '"Other"')]
    PACK_ANIMAL: xs:string = [('default', '"Pack Animal"')]
    PLANE: xs:string = [('default', '"Plane"')]
    PUBLIC: xs:string = [('default', '"Public"')]
    RENTAL_CAR: xs:string = [('default', '"Rental Car"')]
    RICKSHAW: xs:string = [('default', '"Rickshaw"')]
    SEDAN_CHAIR: xs:string = [('default', '"Sedan Chair"')]
    SHARED_TAXI: xs:string = [('default', '"Shared Taxi"')]
    SHIP_FERRY: xs:string = [('default', '"Ship/Ferry"')]
    SHUTTLE: xs:string = [('default', '"Shuttle"')]
    SUBWAY: xs:string = [('default', '"Subway"')]
    TAXI: xs:string = [('default', '"Taxi"')]
    TAXI_RUSH_HOUR: xs:string = [('default', '"Taxi/Rush hour"')]
    TRAIN: xs:string = [('default', '"Train"')]
    TRAM_LIGHT_RAIL: xs:string = [('default', '"Tram/light rail"')]
    TROLLEY: xs:string = [('default', '"Trolley"')]
    TUBE: xs:string = [('default', '"Tube"')]
    UNDERGROUND: xs:string = [('default', '"Underground"')]
    WALK: xs:string = [('default', '"Walk"')]
    WATER_TAXI: xs:string = [('default', '"Water Taxi"')]

samples.travelport.output.air_v48_0.air.AccountRelatedRules()
    booking_rules: List[BookingRules] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    routing_rules: Optional[RoutingRules] = [('default', None)]

samples.travelport.output.air_v48_0.air.ActionDetails()
    agent_sine: Optional[str] = [('default', None)]
    event_date: Optional[str] = [('default', None)]
    event_time: Optional[str] = [('default', None)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    text: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.AdditionalInfo()
    category: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AddlBookingCodeInformation()
    value: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.Adjustment()
    adjusted_total_price: Optional[str] = [('default', None), ('required', True)]
    amount: Optional[str] = [('default', None)]
    approximate_adjusted_total_price: Optional[str] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None)]
    percent: Optional[float] = [('default', None)]

samples.travelport.output.air_v48_0.air.Advtype()
    adv_rsvn_any_tm: Optional[bool] = [('default', None)]
    adv_rsvn_data_exists: Optional[bool] = [('default', None)]
    adv_rsvn_days: Optional[bool] = [('default', None)]
    adv_rsvn_earliest_tm: Optional[bool] = [('default', None)]
    adv_rsvn_end_item: Optional[bool] = [('default', None)]
    adv_rsvn_hrs: Optional[bool] = [('default', None)]
    adv_rsvn_latest_tm: Optional[bool] = [('default', None)]
    adv_rsvn_months: Optional[bool] = [('default', None)]
    adv_rsvn_only_if_tk: Optional[bool] = [('default', None)]
    adv_rsvn_tm: Optional[int] = [('default', None)]
    adv_rsvn_waived: Optional[bool] = [('default', None)]
    adv_tk_any_tm: Optional[bool] = [('default', None)]
    adv_tk_earliest_tm: Optional[bool] = [('default', None)]
    adv_tk_end_item: Optional[bool] = [('default', None)]
    adv_tk_latest_tm: Optional[bool] = [('default', None)]
    adv_tk_rsvn_days: Optional[bool] = [('default', None)]
    adv_tk_rsvn_hrs: Optional[bool] = [('default', None)]
    adv_tk_rsvn_months: Optional[bool] = [('default', None)]
    adv_tk_rsvn_tm: Optional[int] = [('default', None)]
    adv_tk_start_days: Optional[bool] = [('default', None)]
    adv_tk_start_hrs: Optional[bool] = [('default', None)]
    adv_tk_start_months: Optional[bool] = [('default', None)]
    adv_tk_start_tm: Optional[int] = [('default', None)]
    adv_tk_waived: Optional[bool] = [('default', None)]
    earliest_rsvn_dt: Optional[str] = [('default', None)]
    earliest_rsvn_dt_present: Optional[bool] = [('default', None)]
    earliest_tk_dt: Optional[str] = [('default', None)]
    earliest_tk_dt_present: Optional[bool] = [('default', None)]
    latest_rsvn_dt: Optional[str] = [('default', None)]
    latest_rsvn_dt_present: Optional[bool] = [('default', None)]
    latest_tk_dt: Optional[str] = [('default', None)]
    latest_tk_dt_present: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.Affiliations()
    travel_arranger: List[TravelArranger] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirAvailInfo()
    booking_code_info: List[BookingCodeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_token_info: List["AirAvailInfo.FareTokenInfo"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    host_token_ref: Optional[str] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]

    samples.travelport.output.air_v48_0.air.AirAvailInfo.FareTokenInfo()
        fare_info_ref: Optional[str] = [('default', None), ('required', True)]
        host_token_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirExchangeBundle()
    air_exchange_info: Optional[AirExchangeInfo] = [('default', None), ('required', True)]
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    penalty: List[CommonPenalty] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirExchangeBundleList()
    air_exchange_bundle: List[AirExchangeBundle] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirExchangeBundleTotal()
    air_exchange_info: Optional[AirExchangeInfo] = [('default', None), ('required', True)]
    penalty: List[CommonPenalty] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirExchangeModifiers()
    account_code: Optional[str] = [('default', None)]
    allow_penalty_fares: bool = [('default', True)]
    booking_date: Optional[str] = [('default', None)]
    contract_codes: Optional["AirExchangeModifiers.ContractCodes"] = [('default', None)]
    private_fares_only: bool = [('default', False)]
    provider_code: Optional[str] = [('default', None)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]
    ticket_designator: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0)]
    ticketing_date: Optional[str] = [('default', None)]
    universal_record_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]

    samples.travelport.output.air_v48_0.air.AirExchangeModifiers.ContractCodes()
        contract_code: List[ContractCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirExchangeMulitQuoteList()
    air_exchange_multi_quote_option: List[AirExchangeMultiQuoteOption] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirExchangeMultiQuoteOption()
    air_exchange_bundle_list: List[AirExchangeBundleList] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_exchange_bundle_total: Optional[AirExchangeBundleTotal] = [('default', None)]
    air_segment_data: List[AirSegmentData] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirExchangeTicketBundle()
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]
    form_of_payment_ref: Optional[FormOfPaymentRef] = [('default', None)]
    ticket_number: Optional[TicketNumber] = [('default', None), ('required', True)]
    waiver_code: Optional[WaiverCode] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirFareDiscount()
    amount: Optional[str] = [('default', None)]
    discount_method: Optional[TypeFareDiscount] = [('default', None)]
    percentage: Optional[float] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirFareDisplayModifiers()
    base_fare_only: bool = [('default', False)]
    cabin_class: Optional[CabinClass] = [('default', None)]
    currency_type: Optional[str] = [('default', None), ('length', 3)]
    departure_date: Optional[str] = [('default', None)]
    fare_search_option: List[TypeFareSearchOption] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    fares_indicator: Optional[TypeFaresIndicator] = [('default', None)]
    filed_currency: Optional[str] = [('default', None), ('length', 3)]
    global_indicator: Optional[TypeAtpcoglobalIndicator] = [('default', None)]
    include_estimated_taxes: Optional[bool] = [('default', None)]
    include_surcharges: Optional[bool] = [('default', None)]
    include_taxes: Optional[bool] = [('default', None)]
    max_responses: int = [('default', 200)]
    penalty_fare_information: Optional[PenaltyFareInformation] = [('default', None)]
    prohibit_advance_purchase_fares: bool = [('default', False)]
    prohibit_max_stay_fares: bool = [('default', False)]
    prohibit_min_stay_fares: bool = [('default', False)]
    prohibit_non_refundable_fares: bool = [('default', False)]
    prohibit_travel_restricted_fares: bool = [('default', True)]
    return_date: Optional[str] = [('default', None)]
    ticketing_date: Optional[str] = [('default', None)]
    trip_type: List[TypeFareTripType] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    unrestricted_fares_only: bool = [('default', False)]
    validated_fares_only: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirFareDisplayRuleKey()
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    value: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.AirFareRuleCategory()
    category_code: List[TypeFareRuleCategoryCode] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 1)]
    fare_info_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirFareRulesModifier()
    air_fare_rule_category: List[AirFareRuleCategory] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirItinerary()
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    apisrequirements: List[Apisrequirements] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirItineraryDetails()
    air_segment_details: List[AirSegmentDetails] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 1)]
    key: Optional[str] = [('default', None), ('required', True)]
    passenger_details: List[PassengerDetails] = [('default', 'list'), ('max_occurs', 15), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirItinerarySolution()
    air_segment_ref: List[AirSegmentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    connection: List[Connection] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirItinerarySolutionRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirLegModifiers()
    allow_direct_access: bool = [('default', False)]
    anchor_flight_data: Optional[TypeAnchorFlightData] = [('default', None)]
    disfavored_alliances: Optional["AirLegModifiers.DisfavoredAlliances"] = [('default', None)]
    flight_type: Optional[FlightType] = [('default', None)]
    max_connection_time: Optional[int] = [('default', None)]
    max_journey_time: Optional[int] = [('default', None), ('max_inclusive', 99.0), ('min_inclusive', 0.0)]
    order_by: Optional[str] = [('default', None)]
    permitted_booking_codes: Optional["AirLegModifiers.PermittedBookingCodes"] = [('default', None)]
    permitted_cabins: Optional[PermittedCabins] = [('default', None)]
    permitted_carriers: Optional[PermittedCarriers] = [('default', None)]
    permitted_connection_points: Optional["AirLegModifiers.PermittedConnectionPoints"] = [('default', None)]
    prefer_non_stop: bool = [('default', False)]
    preferred_alliances: Optional["AirLegModifiers.PreferredAlliances"] = [('default', None)]
    preferred_booking_codes: Optional[PreferredBookingCodes] = [('default', None)]
    preferred_cabins: Optional[PreferredCabins] = [('default', None)]
    preferred_carriers: Optional[PreferredCarriers] = [('default', None)]
    preferred_connection_points: Optional["AirLegModifiers.PreferredConnectionPoints"] = [('default', None)]
    prohibit_multi_airport_connection: Optional[bool] = [('default', None)]
    prohibit_overnight_layovers: bool = [('default', False)]
    prohibited_booking_codes: Optional["AirLegModifiers.ProhibitedBookingCodes"] = [('default', None)]
    prohibited_carriers: Optional[ProhibitedCarriers] = [('default', None)]
    prohibited_connection_points: Optional["AirLegModifiers.ProhibitedConnectionPoints"] = [('default', None)]
    return_first_available_only: Optional[bool] = [('default', None)]

    samples.travelport.output.air_v48_0.air.AirLegModifiers.DisfavoredAlliances()
        alliance: List[Alliance] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirLegModifiers.PermittedBookingCodes()
        booking_code: List[BookingCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirLegModifiers.PermittedConnectionPoints()
        connection_point: List[ConnectionPoint] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirLegModifiers.PreferredAlliances()
        alliance: List[Alliance] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirLegModifiers.PreferredConnectionPoints()
        connection_point: List[ConnectionPoint] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirLegModifiers.ProhibitedBookingCodes()
        booking_code: List[BookingCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirLegModifiers.ProhibitedConnectionPoints()
        connection_point: List[ConnectionPoint] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirPricePoint()
    air_pricing_info: List[AirPricingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_pricing_result_message: List[TypeResultMessage] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    complete_itinerary: bool = [('default', True)]
    equivalent_base_price: Optional[str] = [('default', None)]
    fare_note: List[FareNote] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    fee_info: List[FeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fees: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    services: Optional[str] = [('default', None)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirPricePointList()
    air_price_point: List[AirPricePoint] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirPriceResult()
    air_price_error: Optional[TypeResultMessage] = [('default', None)]
    air_pricing_solution: List[AirPricingSolution] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    command_key: Optional[str] = [('default', None), ('max_length', 10.0)]
    fare_rule: List[FareRule] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirPricingAdjustment()
    adjustment: Optional[Adjustment] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirPricingCommand()
    air_pricing_modifiers: Optional[AirPricingModifiers] = [('default', None)]
    air_segment_pricing_modifiers: List[AirSegmentPricingModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    cabin_class: Optional[str] = [('default', None)]
    command_key: Optional[str] = [('default', None), ('max_length', 10.0)]

samples.travelport.output.air_v48_0.air.AirPricingInfo()
    action_details: Optional[ActionDetails] = [('default', None)]
    adjustment: List[Adjustment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_pricing_info_group: Optional[int] = [('default', None)]
    air_pricing_modifiers: Optional[AirPricingModifiers] = [('default', None)]
    air_segment_pricing_modifiers: List[AirSegmentPricingModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    amount_type: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0)]
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    baggage_allowances: Optional[BaggageAllowances] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    booking_info: List[BookingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    booking_traveler_ref: List[BookingTravelerRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    cancel_penalty: List[TypeFarePenalty] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    cat35_indicator: Optional[bool] = [('default', None)]
    change_penalty: List[TypeFarePenalty] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    checksum: Optional[str] = [('default', None)]
    command_key: Optional[str] = [('default', None), ('max_length', 10.0)]
    commission: List[Commission] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    equivalent_base_price: Optional[str] = [('default', None)]
    eticketability: Optional[TypeEticketability] = [('default', None)]
    exchange_amount: Optional[str] = [('default', None)]
    exchangeable: Optional[bool] = [('default', None)]
    fare_calc: Optional[FareCalc] = [('default', None)]
    fare_calculation_ind: Optional[str] = [('default', None), ('length', 1)]
    fare_info: List[FareInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_info_ref: List[FareInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_rules_filter: Optional[FareRulesFilter] = [('default', None)]
    fare_status: Optional[FareStatus] = [('default', None)]
    fee_info: List[FeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fees: Optional[str] = [('default', None)]
    flight_options_list: Optional[FlightOptionsList] = [('default', None)]
    forfeit_amount: Optional[str] = [('default', None)]
    in_policy: Optional[bool] = [('default', None)]
    includes_vat: Optional[bool] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    latest_ticketing_time: Optional[str] = [('default', None)]
    no_show_penalty: List[TypeFarePenalty] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    passenger_type: List[PassengerType] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    payment_ref: List[PaymentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    policy_codes_list: Optional[PolicyCodesList] = [('default', None)]
    preferred_option: Optional[bool] = [('default', None)]
    price_change: List[PriceChangeType] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    pricing_method: Optional[TypePricingMethod] = [('default', None), ('required', True)]
    pricing_type: Optional[str] = [('default', None), ('max_length', 25.0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    refundable: Optional[bool] = [('default', None)]
    services: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None)]
    ticketed: Optional[bool] = [('default', None)]
    ticketing_modifiers_ref: List[TicketingModifiersRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    total_net_price: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]
    true_last_date_to_ticket: Optional[str] = [('default', None)]
    waiver_code: Optional[WaiverCode] = [('default', None)]
    yield_value: List[Yield] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirPricingInfoList()
    air_pricing_info: List[AirPricingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirPricingInfoRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirPricingModifiers()
    account_code_fares_only: Optional[bool] = [('default', None)]
    account_codes: Optional["AirPricingModifiers.AccountCodes"] = [('default', None)]
    brand_modifiers: Optional[BrandModifiers] = [('default', None)]
    channel_id: Optional[str] = [('default', None), ('max_length', 4.0), ('min_length', 2.0)]
    contract_codes: Optional["AirPricingModifiers.ContractCodes"] = [('default', None)]
    currency_type: Optional[str] = [('default', None), ('length', 3)]
    discount_card: List[DiscountCard] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]
    eticketability: Optional[TypeEticketability] = [('default', None)]
    exempt_taxes: Optional[ExemptTaxes] = [('default', None)]
    fares_indicator: Optional[TypeFaresIndicator] = [('default', None)]
    filed_currency: Optional[str] = [('default', None), ('length', 3)]
    force_segment_select: bool = [('default', False)]
    inventory_request_type: Optional[TypeInventoryRequest] = [('default', None)]
    key: Optional[str] = [('default', None)]
    manual_fare_adjustment: List[ManualFareAdjustment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    multi_gdssearch_indicator: List[MultiGdssearchIndicator] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    one_way_shop: bool = [('default', False)]
    override_carrier: Optional[str] = [('default', None), ('length', 2)]
    penalty_fare_information: Optional[PenaltyFareInformation] = [('default', None)]
    permitted_cabins: Optional[PermittedCabins] = [('default', None)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    point_of_sale: Optional[PointOfSale] = [('default', None)]
    preferred_cabins: List[PreferredCabins] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    prohibit_advance_purchase_fares: bool = [('default', False)]
    prohibit_max_stay_fares: bool = [('default', False)]
    prohibit_min_stay_fares: bool = [('default', False)]
    prohibit_non_exchangeable_fares: bool = [('default', False)]
    prohibit_non_refundable_fares: bool = [('default', False)]
    prohibit_restricted_fares: bool = [('default', False)]
    prohibit_unbundled_fare_types: Optional[bool] = [('default', None)]
    prohibited_rule_categories: Optional["AirPricingModifiers.ProhibitedRuleCategories"] = [('default', None)]
    promo_codes: Optional["AirPricingModifiers.PromoCodes"] = [('default', None)]
    return_failed_segments: bool = [('default', False)]
    return_fare_attributes: bool = [('default', False)]
    return_services: bool = [('default', True)]
    sell_check: bool = [('default', False)]

    samples.travelport.output.air_v48_0.air.AirPricingModifiers.AccountCodes()
        account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirPricingModifiers.ContractCodes()
        contract_code: List[ContractCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirPricingModifiers.ProhibitedRuleCategories()
        fare_rule_category: List[FareRuleCategory] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirPricingModifiers.PromoCodes()
        promo_code: List[PromoCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirPricingPayment()
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    form_of_payment_ref: Optional[FormOfPaymentRef] = [('default', None)]
    payment: List[Payment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirPricingSolution()
    air_itinerary_solution_ref: List[AirItinerarySolutionRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_pricing_info: List[AirPricingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_pricing_result_message: List[TypeResultMessage] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_segment_ref: List[AirSegmentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    available_ssr: Optional[AvailableSsr] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    complete_itinerary: bool = [('default', True)]
    connection: List[Connection] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    equivalent_base_price: Optional[str] = [('default', None)]
    fare_note: List[FareNote] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_note_ref: List[FareNoteRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fee_info: List[FeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fees: Optional[str] = [('default', None)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    itinerary: Optional[str] = [('default', None)]
    journey: List[Journey] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    key: Optional[str] = [('default', None), ('required', True)]
    leg_ref: List[LegRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    meta_data: List[MetaData] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    pricing_details: Optional[PricingDetails] = [('default', None)]
    quote_date: Optional[str] = [('default', None)]
    services: Optional[str] = [('default', None)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirPricingTicketingModifiers()
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticketing_modifiers: Optional[TicketingModifiers] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirRefundBundle()
    air_refund_info: Optional[AirRefundInfo] = [('default', None), ('required', True)]
    name: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ptc: Optional[str] = [('default', None)]
    refund_type: Optional[str] = [('default', None)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    ticket_number: Optional[str] = [('default', None)]
    waiver_code: Optional[WaiverCode] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirRefundInfo()
    conversion_rate: Optional[float] = [('default', None)]
    filed_currency: Optional[str] = [('default', None), ('length', 3)]
    forfeit_amount: Optional[str] = [('default', None)]
    original_ticket_total: Optional[str] = [('default', None)]
    refund: bool = [('default', False)]
    refund_amount: Optional[str] = [('default', None)]
    refund_fee: Optional[str] = [('default', None)]
    refund_remark: List[RefundRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    refundable_taxes: Optional[str] = [('default', None)]
    retain: bool = [('default', False)]
    retain_amount: Optional[str] = [('default', None)]
    taxes: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirRefundModifiers()
    account_code: Optional[str] = [('default', None)]
    refund_date: Optional[str] = [('default', None)]
    ticket_designator: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0)]

samples.travelport.output.air_v48_0.air.AirReservation(TypeBaseAirReservation)

samples.travelport.output.air_v48_0.air.AirReservationLocatorCode()
    value: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]

samples.travelport.output.air_v48_0.air.AirScheduleChangedInfo()
    air_pricing_solution: Optional[AirPricingSolution] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirSearchAsynchModifiers()
    initial_asynch_result: Optional["AirSearchAsynchModifiers.InitialAsynchResult"] = [('default', None)]

    samples.travelport.output.air_v48_0.air.AirSearchAsynchModifiers.InitialAsynchResult()
        max_wait: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.AirSearchModifiers()
    allow_change_of_airport: bool = [('default', True)]
    disfavored_alliances: Optional["AirSearchModifiers.DisfavoredAlliances"] = [('default', None)]
    disfavored_carriers: Optional["AirSearchModifiers.DisfavoredCarriers"] = [('default', None)]
    disfavored_providers: Optional["AirSearchModifiers.DisfavoredProviders"] = [('default', None)]
    distance_type: TypeDistance = [('default', '"MI"')]
    exclude_ground_transportation: bool = [('default', False)]
    exclude_open_jaw_airport: bool = [('default', False)]
    flight_type: Optional[FlightType] = [('default', None)]
    include_extra_solutions: Optional[bool] = [('default', None)]
    include_flight_details: bool = [('default', True)]
    jet_service_only: Optional[bool] = [('default', None)]
    max_connection_time: Optional[int] = [('default', None)]
    max_journey_time: Optional[int] = [('default', None), ('max_inclusive', 99.0), ('min_inclusive', 0.0)]
    max_layover_duration: Optional[MaxLayoverDurationType] = [('default', None)]
    max_solutions: Optional[int] = [('default', None)]
    native_search_modifier: Optional[TypeNativeSearchModifier] = [('default', None)]
    order_by: Optional[str] = [('default', None)]
    permitted_booking_codes: Optional["AirSearchModifiers.PermittedBookingCodes"] = [('default', None)]
    permitted_cabins: Optional[PermittedCabins] = [('default', None)]
    permitted_carriers: Optional[PermittedCarriers] = [('default', None)]
    prefer_non_stop: bool = [('default', False)]
    preferred_alliances: Optional["AirSearchModifiers.PreferredAlliances"] = [('default', None)]
    preferred_booking_codes: Optional[PreferredBookingCodes] = [('default', None)]
    preferred_cabins: Optional[PreferredCabins] = [('default', None)]
    preferred_carriers: Optional[PreferredCarriers] = [('default', None)]
    preferred_providers: Optional["AirSearchModifiers.PreferredProviders"] = [('default', None)]
    prohibit_multi_airport_connection: Optional[bool] = [('default', None)]
    prohibit_overnight_layovers: bool = [('default', False)]
    prohibited_booking_codes: Optional["AirSearchModifiers.ProhibitedBookingCodes"] = [('default', None)]
    prohibited_carriers: Optional[ProhibitedCarriers] = [('default', None)]
    search_weekends: Optional[bool] = [('default', None)]

    samples.travelport.output.air_v48_0.air.AirSearchModifiers.DisfavoredAlliances()
        alliance: List[Alliance] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirSearchModifiers.DisfavoredCarriers()
        carrier: List[Carrier] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirSearchModifiers.DisfavoredProviders()
        provider: List[Provider] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirSearchModifiers.PermittedBookingCodes()
        booking_code: List[BookingCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirSearchModifiers.PreferredAlliances()
        alliance: List[Alliance] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirSearchModifiers.PreferredProviders()
        provider: List[Provider] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.AirSearchModifiers.ProhibitedBookingCodes()
        booking_code: List[BookingCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirSegment(TypeBaseAirSegment)

samples.travelport.output.air_v48_0.air.AirSegmentData()
    air_segment_ref: List[AirSegmentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    baggage_allowance: List[BaggageAllowance] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    brand: List[Brand] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    cabin_class: Optional[str] = [('default', None)]
    class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]

samples.travelport.output.air_v48_0.air.AirSegmentDetails()
    arrival_time: Optional[str] = [('default', None), ('required', True)]
    booking_code_list: Optional[str] = [('default', None)]
    brand_id: List[BrandId] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    cabin_class: Optional[str] = [('default', None)]
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    departure_time: Optional[str] = [('default', None), ('required', True)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    equipment: Optional[str] = [('default', None), ('length', 3)]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0), ('required', True)]
    key: Optional[str] = [('default', None), ('required', True)]
    operating_carrier: Optional[str] = [('default', None), ('length', 2)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    passenger_details_ref: List[PassengerDetailsRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]

samples.travelport.output.air_v48_0.air.AirSegmentError()
    air_segment: Optional[AirSegment] = [('default', None), ('required', True)]
    error_message: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirSegmentList()
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirSegmentPricingModifiers()
    account_code: Optional[str] = [('default', None)]
    air_segment_ref: Optional[str] = [('default', None)]
    brand_tier: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 1.0)]
    cabin_class: Optional[str] = [('default', None)]
    connection_indicator: Optional[TypeConnectionIndicator] = [('default', None)]
    fare_basis_code: Optional[str] = [('default', None)]
    fare_break: Optional[TypeFareBreak] = [('default', None)]
    permitted_booking_codes: Optional["AirSegmentPricingModifiers.PermittedBookingCodes"] = [('default', None)]
    prohibit_advance_purchase_fares: bool = [('default', False)]
    prohibit_non_refundable_fares: bool = [('default', False)]
    prohibit_penalty_fares: bool = [('default', False)]

    samples.travelport.output.air_v48_0.air.AirSegmentPricingModifiers.PermittedBookingCodes()
        booking_code: List[BookingCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirSegmentRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirSegmentSellFailureInfo()
    air_segment_error: List[AirSegmentError] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AirSegmentTicketingModifiers()
    air_segment_ref: Optional[str] = [('default', None)]
    brand_tier: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.air_v48_0.air.AirSolution()
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 1)]
    fare_basis: List[FareBasis] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 0)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 0)]
    search_traveler: List[SearchTraveler] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.AirSolutionChangedInfo()
    air_pricing_solution: Optional[AirPricingSolution] = [('default', None), ('required', True)]
    reason_code: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AirTicketingModifiers()
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    commission: Optional[Commission] = [('default', None)]
    credit_card_auth: List[CreditCardAuth] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    document_modifiers: Optional[DocumentModifiers] = [('default', None)]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    no_comparison_sfq: bool = [('default', False)]
    payment: List[Payment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    suppress_tax_and_fee: bool = [('default', False)]
    ticket_endorsement: List[TicketEndorsement] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    ticketed_fare_override: bool = [('default', False)]
    tour_code: Optional[TourCode] = [('default', None)]

samples.travelport.output.air_v48_0.air.Alliance()
    code: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AlternateLocationDistance()
    alternate_location: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    distance: Optional[Distance] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None), ('required', True)]
    search_location: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.AlternateLocationDistanceList()
    alternate_location_distance: List[AlternateLocationDistance] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AlternateLocationDistanceRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.AlternateRoute()
    key: Optional[str] = [('default', None), ('required', True)]
    leg: List[Leg] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AlternateRouteList()
    alternate_route: List[AlternateRoute] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.Apisrequirements()
    date_of_birth_required: Optional[bool] = [('default', None)]
    document: List[Document] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    gender_required: Optional[bool] = [('default', None)]
    key: Optional[str] = [('default', None)]
    level: Optional[str] = [('default', None)]
    nationality_required: Optional[bool] = [('default', None)]
    required_documents: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.ApisrequirementsList()
    apisrequirements: List[Apisrequirements] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.ApplicableSegment(TypeApplicableSegment)

samples.travelport.output.air_v48_0.air.AssociatedRemark(TypeAssociatedRemarkWithSegmentRef)

samples.travelport.output.air_v48_0.air.AsyncProviderSpecificResponse(BaseAsyncProviderSpecificResponse)

samples.travelport.output.air_v48_0.air.AuditData()
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    equivalent_base_price: Optional[str] = [('default', None)]
    fees: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    services: Optional[str] = [('default', None)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.AutoPricingInfo()
    air_pricing_modifiers: Optional[AirPricingModifiers] = [('default', None)]
    air_segment_pricing_modifiers: List[AirSegmentPricingModifiers] = [('default', 'list'), ('max_occurs', 100), ('min_occurs', 0)]
    air_segment_ref: List[AirSegmentRef] = [('default', 'list'), ('max_occurs', 100), ('min_occurs', 0)]
    booking_traveler_ref: List[BookingTravelerRef] = [('default', 'list'), ('max_occurs', 100), ('min_occurs', 0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    pricing_type: Optional[str] = [('default', None), ('max_length', 25.0)]

samples.travelport.output.air_v48_0.air.AutoSeatAssignment()
    booking_traveler_ref: Optional[str] = [('default', None)]
    group: bool = [('default', False)]
    seat_type: Optional[TypeReqSeat] = [('default', None), ('required', True)]
    segment_ref: Optional[str] = [('default', None)]
    smoking: bool = [('default', False)]

samples.travelport.output.air_v48_0.air.AvailabilityErrorInfo(TypeErrorInfo)
    air_segment_error: List[AirSegmentError] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.AvailableDiscount()
    amount: Optional[str] = [('default', None)]
    description: Optional[str] = [('default', None)]
    discount_qualifier: Optional[str] = [('default', None)]
    loyalty_program: List[LoyaltyProgram] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    percent: Optional[str] = [('default', None), ('pattern', '([0-9]{1,2}|100)\\.[0-9]{1,2}')]

samples.travelport.output.air_v48_0.air.AvailableSsr()
    industry_standard_ssr: List[IndustryStandardSsr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ssr: List[Ssr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ssrrules: List[ServiceRuleType] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.BackOfficeHandOff()
    location: Optional[str] = [('default', None)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    type: Optional[TypeBackOffice] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.BagDetails()
    applicable_bags: Optional[str] = [('default', None), ('required', True)]
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    available_discount: List[AvailableDiscount] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    baggage_restriction: List[BaggageRestriction] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    base_price: Optional[str] = [('default', None)]
    taxes: Optional[str] = [('default', None)]
    total_price: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.BaggageAllowance()
    max_weight: Optional[TypeWeight] = [('default', None)]
    number_of_pieces: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.BaggageAllowanceInfo(BaseBaggageAllowanceInfo)
    bag_details: List[BagDetails] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_info_ref: Optional[str] = [('default', None)]
    traveler_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]

samples.travelport.output.air_v48_0.air.BaggageAllowances()
    baggage_allowance_info: List[BaggageAllowanceInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    carry_on_allowance_info: List[CarryOnAllowanceInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    embargo_info: List[EmbargoInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.BaggageRestriction()
    dimension: List[Dimension] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    max_weight: List[TypeUnitOfMeasure] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    text_info: List[TextInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.BaseBaggageAllowanceInfo()
    carrier: Optional[str] = [('default', None), ('length', 2)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    text_info: List[TextInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    urlinfo: List[Urlinfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.BillingDetailItem()
    data_type: Optional[TypeBillingDetailsDataType] = [('default', None), ('required', True)]
    max_length: Optional[str] = [('default', None), ('required', True)]
    min_length: Optional[str] = [('default', None), ('required', True)]
    name: Optional[TypeBillingDetailsName] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.BookingCode()
    code: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.air_v48_0.air.BookingCodeInfo()
    booking_counts: Optional[str] = [('default', None)]
    cabin_class: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.BookingInfo()
    air_itinerary_solution_ref: Optional[str] = [('default', None)]
    booking_code: Optional[str] = [('default', None), ('required', True)]
    booking_count: Optional[str] = [('default', None)]
    cabin_class: Optional[str] = [('default', None)]
    coupon_ref: Optional[str] = [('default', None)]
    fare_info_ref: Optional[str] = [('default', None), ('required', True)]
    host_token_ref: Optional[str] = [('default', None)]
    segment_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.BookingRules()
    booking_rules_fare_reference: List[BookingRulesFareReference] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    document_required: List[DocumentRequired] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    gender_dob_required: Optional[bool] = [('default', None)]
    restriction: List[Restriction] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rule_info: List["BookingRules.RuleInfo"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air.BookingRules.RuleInfo()
        charges_rules: Optional[ChargesRules] = [('default', None)]

samples.travelport.output.air_v48_0.air.BookingRulesFareReference()
    account_code: Optional[str] = [('default', None)]
    class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    ticket_designator_code: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0)]
    upgrade_class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    upgrage_allowed: Optional[bool] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Brand()
    air_itinerary_details_ref: Optional[str] = [('default', None)]
    applicable_segment: List[TypeApplicableSegment] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    brand_found: Optional[bool] = [('default', None)]
    brand_id: Optional[str] = [('default', None), ('max_length', 19.0), ('min_length', 1.0)]
    brand_maintained: Optional[str] = [('default', None), ('max_length', 99.0), ('min_length', 1.0)]
    brand_tier: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 1.0)]
    branded_details_available: Optional[bool] = [('default', None)]
    carrier: Optional[str] = [('default', None), ('length', 2)]
    default_brand_detail: List[DefaultBrandDetail] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    image_location: List[ImageLocation] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    key: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    rules: List[Rules] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    service_associations: Optional[ServiceAssociations] = [('default', None)]
    text: List[Text] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    title: List[Title] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]
    up_sell_brand_found: Optional[bool] = [('default', None)]
    up_sell_brand_id: Optional[str] = [('default', None), ('max_length', 19.0), ('min_length', 1.0)]
    upsell_brand: Optional[UpsellBrand] = [('default', None)]

samples.travelport.output.air_v48_0.air.BrandId()
    id: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.BrandInfo()
    air_pricing_info_ref: Optional[str] = [('default', None)]
    brand_id: Optional[str] = [('default', None), ('max_length', 19.0), ('min_length', 1.0), ('required', True)]
    fare_info_ref: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.BrandModifiers()
    basic_details_only: Optional["BrandModifiers.BasicDetailsOnly"] = [('default', None), ('required', True)]
    fare_family_display: Optional["BrandModifiers.FareFamilyDisplay"] = [('default', None), ('required', True)]

    samples.travelport.output.air_v48_0.air.BrandModifiers.BasicDetailsOnly()
        return_basic_details: Optional[bool] = [('default', None), ('required', True)]

    samples.travelport.output.air_v48_0.air.BrandModifiers.FareFamilyDisplay()
        modifier_type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.BrandingInfo()
    air_segment_ref: List[CommonTypeSegmentRef] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 1)]
    chargeable: Optional[str] = [('default', None)]
    commercial_name: Optional[str] = [('default', None), ('required', True)]
    external_service_name: Optional[str] = [('default', None)]
    image_location: List[ImageLocation] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    key: Optional[str] = [('default', None)]
    price_range: List[PriceRange] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    service_group: Optional[ServiceGroup] = [('default', None)]
    service_sub_code: Optional[str] = [('default', None)]
    service_type: Optional[str] = [('default', None)]
    text: List[Text] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    title: List[Title] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.BundledService()
    booking: Optional[TypeBooking] = [('default', None)]
    carrier: Optional[str] = [('default', None), ('length', 2)]
    carrier_sub_code: Optional[bool] = [('default', None)]
    name: Optional[str] = [('default', None)]
    occurrence: Optional[int] = [('default', None)]
    service_sub_code: Optional[str] = [('default', None)]
    service_type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.BundledServices()
    bundled_service: List[BundledService] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.CarrierCode()
    value: Optional[str] = [('default', None), ('length', 2)]

samples.travelport.output.air_v48_0.air.CarrierList()
    carrier_code: List[CarrierCode] = [('default', 'list'), ('max_occurs', 6), ('min_occurs', 1)]
    include_carrier: Optional[bool] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.CarryOnAllowanceInfo(BaseBaggageAllowanceInfo)
    carry_on_details: List["CarryOnAllowanceInfo.CarryOnDetails"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air.CarryOnAllowanceInfo.CarryOnDetails()
        applicable_carry_on_bags: Optional[str] = [('default', None)]
        approximate_base_price: Optional[str] = [('default', None)]
        approximate_total_price: Optional[str] = [('default', None)]
        baggage_restriction: List[BaggageRestriction] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
        base_price: Optional[str] = [('default', None)]
        taxes: Optional[str] = [('default', None)]
        total_price: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.CategoryDetailsType()
    category_details: List[ValueDetails] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    value: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.Characteristic()
    padiscode: Optional[str] = [('default', None), ('max_length', 99.0), ('min_length', 1.0)]
    position: Optional[TypePosition] = [('default', None)]
    row_location: Optional[TypeRowLocation] = [('default', None)]
    value: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.ChargesRules()
    voluntary_changes: List["ChargesRules.VoluntaryChanges"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    voluntary_refunds: List["ChargesRules.VoluntaryRefunds"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air.ChargesRules.VoluntaryChanges()
        penalty: Optional[Penalty] = [('default', None)]
        vol_change_ind: Optional[bool] = [('default', None)]

    samples.travelport.output.air_v48_0.air.ChargesRules.VoluntaryRefunds()
        penalty: Optional[Penalty] = [('default', None)]
        vol_change_ind: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.Chgtype()
    pen_fee: List[PenFeeType] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.Co2Emission()
    air_segment_ref: Optional[str] = [('default', None)]
    value: Optional[float] = [('default', None)]

samples.travelport.output.air_v48_0.air.Co2Emissions()
    category: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0)]
    co2_emission: List[Co2Emission] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    source: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0)]
    total_value: Optional[float] = [('default', None)]
    unit: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0)]

samples.travelport.output.air_v48_0.air.CodeshareInfo()
    operating_carrier: Optional[str] = [('default', None), ('length', 2)]
    operating_flight_number: Optional[str] = [('default', None), ('max_length', 5.0)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.CompanyName()
    supplier_code: Optional[str] = [('default', None), ('length', 2), ('required', True)]

samples.travelport.output.air_v48_0.air.ConjunctedTicketInfo()
    country_code: Optional[str] = [('default', None), ('length', 2)]
    iatanumber: Optional[str] = [('default', None), ('max_length', 8.0)]
    number: Optional[str] = [('default', None), ('required', True)]
    status: Optional[TypeTicketStatus] = [('default', None), ('required', True)]
    ticket_issue_date: Optional[str] = [('default', None)]
    ticketing_agent_sign_on: Optional[str] = [('default', None), ('max_length', 8.0)]

samples.travelport.output.air_v48_0.air.Connection()
    change_of_airport: bool = [('default', False)]
    change_of_plane: bool = [('default', False)]
    change_of_terminal: bool = [('default', False)]
    duration: Optional[int] = [('default', None)]
    fare_note: Optional[FareNote] = [('default', None)]
    flight_details_index: Optional[int] = [('default', None)]
    include_stop_over_to_fare_quote: Optional[TypeIgnoreStopOver] = [('default', None)]
    min_connection_time: Optional[int] = [('default', None)]
    segment_index: Optional[int] = [('default', None)]
    stop_over: bool = [('default', False)]

samples.travelport.output.air_v48_0.air.ContractCode()
    code: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0), ('required', True)]
    company_name: Optional[str] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]

samples.travelport.output.air_v48_0.air.Coupon()
    arrival_time: Optional[str] = [('default', None)]
    booking_class: Optional[str] = [('default', None), ('max_length', 2.0), ('required', True)]
    coupon_number: Optional[int] = [('default', None)]
    departure_time: Optional[str] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    fare_basis: Optional[str] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    marketing_carrier: Optional[str] = [('default', None), ('length', 2)]
    marketing_flight_number: Optional[str] = [('default', None), ('max_length', 5.0)]
    marriage_group: Optional[int] = [('default', None)]
    not_valid_after: Optional[str] = [('default', None)]
    not_valid_before: Optional[str] = [('default', None)]
    operating_carrier: Optional[str] = [('default', None), ('length', 2)]
    operating_flight_number: Optional[str] = [('default', None), ('max_length', 5.0)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    segment_group: Optional[int] = [('default', None)]
    status: Optional[str] = [('default', None), ('max_length', 1.0), ('required', True)]
    stopover_code: Optional[bool] = [('default', None), ('required', True)]
    ticket_designator: List[TicketDesignator] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.CreditSummary()
    currency_code: Optional[str] = [('default', None), ('length', 3)]
    current_balance: Optional[float] = [('default', None), ('required', True)]
    initial_credit: Optional[float] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.CustomerReceiptInfo()
    booking_traveler_ref: Optional[str] = [('default', None), ('required', True)]
    email_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.CustomerSearch()
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.DefaultBrandDetail(TypeDefaultBrandDetail)

samples.travelport.output.air_v48_0.air.DestinationPurposeCode()
    destination: Optional[TypeDestinationCode] = [('default', None), ('required', True)]
    purpose: Optional[TypePurposeCode] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.DetailedBillingInformation()
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    billing_detail_item: List[BillingDetailItem] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    form_of_payment_ref: Optional[FormOfPaymentRef] = [('default', None)]

samples.travelport.output.air_v48_0.air.Dimension(TypeUnitOfMeasure)
    type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Document()
    level: Optional[str] = [('default', None)]
    sequence: Optional[int] = [('default', None)]
    type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.DocumentInfo()
    mcoinfo: List[Mcoinformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tcrinfo: List[Tcrinfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_info: List[TicketInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.DocumentModifiers()
    generate_accounting_interface: bool = [('default', False)]
    generate_itinerary_invoice: bool = [('default', False)]

samples.travelport.output.air_v48_0.air.DocumentOptions()
    generate_itin_numbers: Optional[bool] = [('default', None)]
    override_option: List[str] = [('default', 'list'), ('max_length', 50.0), ('max_occurs', 999), ('min_occurs', 0)]
    passenger_receipt_override: Optional[PassengerReceiptOverride] = [('default', None)]
    suppress_itinerary_remarks: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.DocumentRequired()
    allowed_ids: Optional[str] = [('default', None)]
    doc_id: Optional[str] = [('default', None)]
    doc_type: Optional[str] = [('default', None)]
    include_exclude_use_ind: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.DocumentSelect()
    back_office_hand_off: Optional[BackOfficeHandOff] = [('default', None)]
    fax_indicator: Optional[bool] = [('default', None)]
    issue_electronic_ticket: Optional[bool] = [('default', None)]
    issue_ticket_only: Optional[bool] = [('default', None)]
    itinerary: Optional[Itinerary] = [('default', None)]

samples.travelport.output.air_v48_0.air.ElectronicMiscDocument()
    associated_ticket_number: Optional[str] = [('default', None), ('length', 13)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    emdcoupon: List[Emdcoupon] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    in_conjunction_with: Optional[str] = [('default', None), ('length', 13)]
    issue_date: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    number: Optional[str] = [('default', None), ('length', 13), ('required', True)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    primary_document_indicator: Optional[bool] = [('default', None)]
    status: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Embargo()
    carrier: Optional[str] = [('default', None), ('length', 2)]
    key: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('max_length', 30.0)]
    secondary_type: Optional[str] = [('default', None)]
    segment_ref: Optional[str] = [('default', None)]
    service_sub_code: Optional[str] = [('default', None), ('max_length', 3.0)]
    text: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0)]
    url: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.EmbargoInfo(BaseBaggageAllowanceInfo)

samples.travelport.output.air_v48_0.air.EmbargoList()
    embargo: List[Embargo] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.Emd()
    associated_item: Optional[str] = [('default', None)]
    availability_charge_indicator: Optional[str] = [('default', None)]
    booking: Optional[TypeBooking] = [('default', None)]
    commissionable: Optional[bool] = [('default', None)]
    date: Optional[str] = [('default', None)]
    display_category: Optional[TypeDisplayCategory] = [('default', None)]
    fulfillment_type: Optional[int] = [('default', None), ('max_inclusive', 5.0), ('min_inclusive', 1.0)]
    fulfillment_type_description: Optional[str] = [('default', None)]
    location: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    mileage_indicator: Optional[bool] = [('default', None)]
    refund_reissue_indicator: Optional[str] = [('default', None)]
    reusable: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.Emdcommission()
    currency_code: Optional[str] = [('default', None), ('length', 3)]
    type: Optional[TypeAdjustmentType] = [('default', None), ('required', True)]
    value: Optional[float] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.Emdcoupon()
    consumed_at_issuance_ind: Optional[bool] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    marketing_carrier: Optional[str] = [('default', None), ('length', 2)]
    non_refundable_ind: Optional[bool] = [('default', None)]
    number: Optional[int] = [('default', None), ('required', True)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    present_at: Optional[str] = [('default', None), ('max_length', 71.0), ('min_length', 1.0)]
    present_to: Optional[str] = [('default', None), ('max_length', 71.0), ('min_length', 1.0)]
    rfic: Optional[str] = [('default', None), ('length', 1), ('required', True)]
    rfidescription: Optional[str] = [('default', None), ('max_length', 86.0), ('min_length', 1.0)]
    rfisc: Optional[str] = [('default', None)]
    status: Optional[str] = [('default', None), ('required', True)]
    svc_description: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Emdendorsement()
    value: Optional[str] = [('default', None), ('max_length', 255.0), ('min_length', 1.0)]

samples.travelport.output.air_v48_0.air.Emdinfo()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    electronic_misc_document: List[ElectronicMiscDocument] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    emdcommission: Optional[Emdcommission] = [('default', None)]
    emdendorsement: List[Emdendorsement] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    emdpricing_info: Optional[EmdpricingInfo] = [('default', None)]
    emdtraveler_info: Optional[EmdtravelerInfo] = [('default', None), ('required', True)]
    fare_calc: Optional[FareCalc] = [('default', None)]
    form_of_payment: Optional[FormOfPayment] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    payment: Optional[Payment] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]
    supplier_locator: List[SupplierLocator] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.EmdpricingInfo()
    base_fare: Optional[str] = [('default', None)]
    equiv_fare: Optional[str] = [('default', None)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    total_fare: Optional[str] = [('default', None)]
    total_tax: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Emdsummary()
    associated_ticket_number: Optional[str] = [('default', None), ('length', 13)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    emdcoupon: List[Emdcoupon] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    in_conjunction_with: Optional[str] = [('default', None), ('length', 13)]
    issue_date: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    number: Optional[str] = [('default', None), ('length', 13), ('required', True)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    primary_document_indicator: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.EmdsummaryInfo()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    emdsummary: List[Emdsummary] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    emdtraveler_info: Optional[EmdtravelerInfo] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    payment: Optional[Payment] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.EmdtravelerInfo()
    age: Optional[int] = [('default', None)]
    name_info: Optional["EmdtravelerInfo.NameInfo"] = [('default', None), ('required', True)]
    traveler_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]

    samples.travelport.output.air_v48_0.air.EmdtravelerInfo.NameInfo()
        first: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]
        last: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]
        middle: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0)]
        prefix: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 1.0)]
        suffix: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0)]

samples.travelport.output.air_v48_0.air.Enumeration()
    solution_group: List[SolutionGroup] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.Etr()
    agency_info: Optional[AgencyInfo] = [('default', None)]
    air_pricing_info: Optional[AirPricingInfo] = [('default', None)]
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None)]
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    audit_data: Optional[AuditData] = [('default', None)]
    baggage_allowances: Optional[BaggageAllowances] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    booking_traveler: Optional[BookingTraveler] = [('default', None), ('required', True)]
    bulk_ticket: Optional[bool] = [('default', None)]
    commission: List[Commission] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    country_code: Optional[str] = [('default', None), ('length', 2)]
    credit_card_auth: List[CreditCardAuth] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    equivalent_base_price: Optional[str] = [('default', None)]
    exchangeable: Optional[bool] = [('default', None)]
    fare_calc: Optional[FareCalc] = [('default', None), ('required', True)]
    fees: Optional[str] = [('default', None)]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    iatanumber: Optional[str] = [('default', None), ('max_length', 8.0)]
    issued_date: Optional[str] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    payment: List[Payment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    refundable: Optional[bool] = [('default', None)]
    restriction: List[CommonRestriction] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    services: Optional[str] = [('default', None)]
    supplier_locator: List[SupplierLocator] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None)]
    ticket: List[Ticket] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    total_price: Optional[str] = [('default', None)]
    tour_code: Optional[str] = [('default', None), ('max_length', 15.0)]
    waiver_code: Optional[WaiverCode] = [('default', None)]

samples.travelport.output.air_v48_0.air.ExchangeAirSegment()
    air_segment: Optional[AirSegment] = [('default', None), ('required', True)]
    cabin_class: Optional[CabinClass] = [('default', None), ('required', True)]
    fare_basis_code: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.ExchangeEligibilityInfo()
    eligible_fares: Optional[str] = [('default', None)]
    exchange_penalty_info: List[ExchangePenaltyInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    passed_automation_checks: Optional[bool] = [('default', None)]
    refundable_fares: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.ExchangePenaltyInfo()
    maximum_change_fee: Optional[str] = [('default', None)]
    minimum_change_fee: Optional[str] = [('default', None)]
    penalty_information: List[PenaltyInformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ptc: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]

samples.travelport.output.air_v48_0.air.ExchangedTicketInfo()
    number: Optional[str] = [('default', None), ('length', 13), ('required', True)]

samples.travelport.output.air_v48_0.air.ExcludeTicketing()
    booking_traveler_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.ExemptObfee()
    sub_code: List[str] = [('default', 'list'), ('max_occurs', 8), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.ExemptTaxes()
    all_taxes: Optional[bool] = [('default', None)]
    company_name: Optional[str] = [('default', None), ('max_length', 24.0), ('min_length', 1.0)]
    country_code: List[str] = [('default', 'list'), ('length', 2), ('max_occurs', 999), ('min_occurs', 0)]
    tax_category: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tax_territory: Optional[str] = [('default', None), ('length', 2)]

samples.travelport.output.air_v48_0.air.ExpertSolution()
    approximate_total_price: Optional[str] = [('default', None)]
    created_date: Optional[str] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None), ('required', True)]
    leg_price: List[LegPrice] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    total_price: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.ExpertSolutionList()
    expert_solution: List[ExpertSolution] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.Facility()
    availability: Optional[TypeSeatAvailability] = [('default', None)]
    base_seat_price: Optional[str] = [('default', None)]
    characteristic: List[Characteristic] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    emd: Optional[Emd] = [('default', None)]
    geography_specification: Optional[str] = [('default', None)]
    inclusive_of_tax: Optional[bool] = [('default', None)]
    interline_settlement_allowed: Optional[bool] = [('default', None)]
    issuance_reason: Optional[str] = [('default', None), ('max_length', 1.0), ('min_length', 1.0)]
    optional_service_ref: Optional[str] = [('default', None)]
    paid: Optional[bool] = [('default', None)]
    passenger_seat_price: List[PassengerSeatPrice] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    quantity: Optional[int] = [('default', None)]
    remark: List[Remark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    seat_code: Optional[str] = [('default', None)]
    seat_information_ref: Optional[str] = [('default', None)]
    seat_price: Optional[str] = [('default', None)]
    sequence_number: Optional[int] = [('default', None)]
    service_data: List[ServiceData] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    service_sub_code: Optional[str] = [('default', None), ('max_length', 3.0)]
    source: Optional[str] = [('default', None)]
    ssrcode: Optional[str] = [('default', None), ('max_length', 4.0), ('min_length', 4.0)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None)]
    tour_code: Optional[TourCode] = [('default', None)]
    type: Optional[TypeFacility] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareBasis()
    code: Optional[str] = [('default', None), ('required', True)]
    segment_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareCalc()
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareDetails()
    fare_basis: Optional[str] = [('default', None), ('max_length', 20.0), ('required', True)]
    fare_ticket_designator: Optional[FareTicketDesignator] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    passenger_detail_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareDetailsRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareDisplay()
    accompanied_travel: Optional[bool] = [('default', None)]
    account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    addl_booking_code_information: Optional[AddlBookingCodeInformation] = [('default', None)]
    air_fare_display_rule_key: Optional[AirFareDisplayRuleKey] = [('default', None)]
    amount: Optional[str] = [('default', None), ('required', True)]
    blackouts_exist: Optional[bool] = [('default', None)]
    booking_code: List[BookingCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    eligibility_restricted: Optional[bool] = [('default', None)]
    fare_basis: Optional[str] = [('default', None), ('required', True)]
    fare_display_rule: Optional[FareDisplayRule] = [('default', None), ('required', True)]
    fare_mileage_information: Optional[FareMileageInformation] = [('default', None)]
    fare_pricing: List[FarePricing] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    fare_restriction: List[FareRestriction] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    fare_routing_information: Optional[FareRoutingInformation] = [('default', None)]
    fare_rule_failure_info: Optional[FareRuleFailureInfo] = [('default', None)]
    fare_ticketing_code: Optional[str] = [('default', None)]
    fare_ticketing_designator: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0)]
    fare_type_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    flight_restricted: Optional[bool] = [('default', None)]
    global_indicator: Optional[TypeAtpcoglobalIndicator] = [('default', None)]
    instant_purchase: Optional[bool] = [('default', None)]
    mile_or_route_based_fare: Optional[TypeMileOrRouteBasedFare] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    price_change: List[PriceChangeType] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    special_fare: Optional[bool] = [('default', None)]
    stopovers_restricted: Optional[bool] = [('default', None)]
    transfers_restricted: Optional[bool] = [('default', None)]
    trip_type: Optional[TypeFareTripType] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareDisplayRule()
    rule_advanced_purchase: Optional[RuleAdvancedPurchase] = [('default', None)]
    rule_charges: Optional[RuleCharges] = [('default', None)]
    rule_length_of_stay: Optional[RuleLengthOfStay] = [('default', None)]
    rule_number: Optional[str] = [('default', None)]
    source: Optional[str] = [('default', None)]
    tariff_number: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareGuaranteeInfo()
    guarantee_date: Optional[str] = [('default', None)]
    guarantee_type: Optional[TypeFareGuarantee] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareInfo()
    account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    amount: Optional[str] = [('default', None)]
    baggage_allowance: Optional[BaggageAllowance] = [('default', None)]
    brand: Optional[Brand] = [('default', None)]
    bulk_ticket: Optional[bool] = [('default', None)]
    cancel_penalty: Optional[TypeFarePenalty] = [('default', None)]
    car_code: Optional[str] = [('default', None), ('max_length', 15.0)]
    change_penalty: Optional[TypeFarePenalty] = [('default', None)]
    commission: Optional[Commission] = [('default', None)]
    contract_code: List[ContractCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    departure_date: Optional[str] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    effective_date: Optional[str] = [('default', None), ('required', True)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    endorsement: List[Endorsement] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_attributes: Optional[str] = [('default', None)]
    fare_basis: Optional[str] = [('default', None), ('required', True)]
    fare_family: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 0.0)]
    fare_remark_ref: List[FareRemarkRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_rule_failure_info: Optional[FareRuleFailureInfo] = [('default', None)]
    fare_rule_key: Optional[FareRuleKey] = [('default', None)]
    fare_rules_filter: Optional[FareRulesFilter] = [('default', None)]
    fare_surcharge: List[FareSurcharge] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_ticket_designator: List[FareTicketDesignator] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    inclusive_tour: Optional[bool] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    negotiated_fare: Optional[bool] = [('default', None)]
    not_valid_after: Optional[str] = [('default', None)]
    not_valid_before: Optional[str] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    passenger_type_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0), ('required', True)]
    private_fare: Optional[TypePrivateFare] = [('default', None)]
    promotional_fare: Optional[bool] = [('default', None)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    tax_amount: Optional[str] = [('default', None)]
    tour_code: Optional[str] = [('default', None), ('max_length', 15.0)]
    travel_date: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]
    value_code: Optional[str] = [('default', None), ('max_length', 15.0)]
    waiver_code: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareInfoList()
    fare_info: List[FareInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.FareInfoMessage()
    key: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareInfoRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareMileageInformation()
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareNote()
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    fare_info_message_ref: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    note_name: Optional[str] = [('default', None)]
    precedence: Optional[int] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareNoteList()
    fare_note: List[FareNote] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.FareNoteRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FarePricing()
    auto_priceable: Optional[bool] = [('default', None)]
    base_fare: Optional[str] = [('default', None)]
    mmid: Optional[str] = [('default', None)]
    negotiated_fare: Optional[bool] = [('default', None)]
    passenger_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0)]
    private_fare: Optional[bool] = [('default', None)]
    taxes: Optional[str] = [('default', None)]
    total_fare_amount: Optional[str] = [('default', None)]
    total_net_fare_amount: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRemark()
    key: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None)]
    text: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    url: List[Url] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.FareRemarkList()
    fare_remark: List[FareRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.FareRemarkRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareRestriction()
    fare_restriction_date: List[FareRestrictionDate] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_restriction_days_of_week: List[FareRestrictionDaysOfWeek] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    fare_restriction_sale_date: Optional[FareRestrictionSaleDate] = [('default', None)]
    fare_restriction_seasonal: List[FareRestrictionSeasonal] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_restrictiontype: Optional[TypeFareRestrictionType] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRestrictionDate()
    direction: Optional[TypeFareDirectionality] = [('default', None)]
    end_date: Optional[str] = [('default', None)]
    end_date_indicator: Optional[str] = [('default', None)]
    start_date: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRestrictionDaysOfWeek()
    direction: Optional[TypeFareDirectionality] = [('default', None)]
    friday: Optional[bool] = [('default', None)]
    monday: Optional[bool] = [('default', None)]
    saturday: Optional[bool] = [('default', None)]
    sunday: Optional[bool] = [('default', None)]
    thursday: Optional[bool] = [('default', None)]
    trip_type: Optional[TypeFareTripType] = [('default', None)]
    tuesday: Optional[bool] = [('default', None)]
    wednesday: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRestrictionSaleDate()
    end_date: Optional[str] = [('default', None)]
    start_date: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRestrictionSeasonal()
    comment: Optional[str] = [('default', None)]
    seasonal_range1_end_date: Optional[str] = [('default', None)]
    seasonal_range1_ind: Optional[str] = [('default', None)]
    seasonal_range1_start_date: Optional[str] = [('default', None)]
    seasonal_range2_end_date: Optional[str] = [('default', None)]
    seasonal_range2_ind: Optional[str] = [('default', None)]
    seasonal_range2_start_date: Optional[str] = [('default', None)]
    variation_by_travel_dates: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRoutingInformation()
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRule()
    fare_info_ref: Optional[str] = [('default', None)]
    fare_rule_long: List[FareRuleLong] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_rule_result_message: List[TypeResultMessage] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_rule_short: List[FareRuleShort] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    rule_advanced_purchase: Optional[RuleAdvancedPurchase] = [('default', None)]
    rule_charges: Optional[RuleCharges] = [('default', None)]
    rule_length_of_stay: Optional[RuleLengthOfStay] = [('default', None)]
    rule_number: Optional[str] = [('default', None)]
    source: Optional[str] = [('default', None)]
    structured_fare_rules: Optional[StructuredFareRulesType] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    tariff_number: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRuleCategory()
    category: Optional[int] = [('default', None), ('max_inclusive', 50.0), ('min_inclusive', 1.0), ('required', True)]

samples.travelport.output.air_v48_0.air.FareRuleCategoryTypes()
    category_details: List[ValueDetails] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    value: Optional[str] = [('default', None), ('required', True)]
    variable_category_details: List[CategoryDetailsType] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.FareRuleFailureInfo()
    reason: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.FareRuleKey()
    fare_info_ref: Optional[str] = [('default', None), ('required', True)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    value: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.FareRuleLong()
    category: Optional[int] = [('default', None), ('required', True)]
    type: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRuleLongRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareRuleLookup()
    account_code: Optional[AccountCode] = [('default', None)]
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    departure_date: Optional[str] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    fare_basis: Optional[str] = [('default', None), ('required', True)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    point_of_sale: Optional[PointOfSale] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    ticketing_date: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRuleNameValue()
    name: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareRuleShort()
    category: Optional[int] = [('default', None), ('required', True)]
    fare_rule_name_value: List[FareRuleNameValue] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    table_number: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareRuleShortRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareRulesFilter()
    adv: Optional[Advtype] = [('default', None)]
    chg: Optional[Chgtype] = [('default', None)]
    latest_ticketing_time: Optional[str] = [('default', None)]
    max: Optional[Maxtype] = [('default', None)]
    min: Optional[Mintype] = [('default', None)]
    oth: Optional[Othtype] = [('default', None)]
    refundability: Optional["FareRulesFilter.Refundability"] = [('default', None)]

    samples.travelport.output.air_v48_0.air.FareRulesFilter.Refundability()
        value: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareRulesFilterCategory()
    category_code: List[str] = [('default', 'list'), ('max_occurs', 35), ('min_occurs', 1)]
    fare_info_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareStatus()
    code: Optional[TypeFareStatusCode] = [('default', None), ('required', True)]
    fare_status_failure_info: Optional[FareStatusFailureInfo] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareStatusFailureInfo()
    code: Optional[str] = [('default', None), ('required', True)]
    reason: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FareSurcharge()
    amount: Optional[str] = [('default', None), ('required', True)]
    coupon_ref: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    segment_ref: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FareTicketDesignator()
    value: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0)]

samples.travelport.output.air_v48_0.air.FareType()
    code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.air_v48_0.air.FaxDetails()
    dept_billing_code: Optional[str] = [('default', None)]
    from_value: Optional[str] = [('default', None)]
    include_cover_sheet: Optional[bool] = [('default', None)]
    invoice_number: Optional[str] = [('default', None)]
    phone_number: Optional[PhoneNumber] = [('default', None), ('required', True)]
    remark: List[Remark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    term_conditions: Optional[TermConditions] = [('default', None)]
    to: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FaxDetailsInformation()
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    fax_details: Optional[FaxDetails] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FeeApplication()
    code: Optional[str] = [('default', None), ('length', 1)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FeeInfo(TypeFeeInfo)

samples.travelport.output.air_v48_0.air.FlexExploreModifiers()
    destination: List[str] = [('default', 'list'), ('length', 3), ('max_occurs', 59), ('min_occurs', 0), ('white_space', 'collapse')]
    group_name: Optional[str] = [('default', None), ('max_length', 15.0)]
    radius: Optional[int] = [('default', None)]
    type: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FlightDetails()
    arrival_time: Optional[str] = [('default', None)]
    automated_checkin: bool = [('default', False)]
    connection: Optional[Connection] = [('default', None)]
    departure_time: Optional[str] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    destination_terminal: Optional[str] = [('default', None)]
    distance: Optional[int] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    equipment: Optional[str] = [('default', None), ('length', 3)]
    flight_time: Optional[int] = [('default', None)]
    ground_time: Optional[int] = [('default', None)]
    in_flight_services: List[InFlightServices] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    key: Optional[str] = [('default', None), ('required', True)]
    key_override: Optional[bool] = [('default', None)]
    meals: List[Meals] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    on_time_performance: Optional[int] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    origin_terminal: Optional[str] = [('default', None)]
    travel_time: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.FlightDetailsList()
    flight_details: List[FlightDetails] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.FlightDetailsRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.FlightInfo()
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    criteria_key: Optional[str] = [('default', None), ('required', True)]
    departure_date: Optional[str] = [('default', None), ('required', True)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    flight_info_detail: List[FlightInfoDetail] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    flight_info_error_message: List[TypeResultMessage] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0), ('required', True)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.FlightInfoCriteria()
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    departure_date: Optional[str] = [('default', None), ('required', True)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0), ('required', True)]
    key: Optional[str] = [('default', None), ('required', True)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.FlightInfoDetail()
    automated_checkin: bool = [('default', False)]
    codeshare_info: Optional[CodeshareInfo] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    destination_gate: Optional[str] = [('default', None), ('max_length', 6.0)]
    destination_terminal: Optional[str] = [('default', None)]
    equipment: Optional[str] = [('default', None), ('length', 3)]
    eticketability: Optional[TypeEticketability] = [('default', None)]
    in_flight_services: List[InFlightServices] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    meals: List[Meals] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    origin_gate: Optional[str] = [('default', None), ('max_length', 6.0)]
    origin_terminal: Optional[str] = [('default', None)]
    scheduled_arrival_time: Optional[str] = [('default', None)]
    scheduled_departure_time: Optional[str] = [('default', None)]
    travel_time: Optional[int] = [('default', None)]
    variance: List[Variance] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.FlightOption()
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    leg_ref: Optional[str] = [('default', None)]
    option: List[Option] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.FlightOptionsList()
    flight_option: List[FlightOption] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.FlightTimeDetail()
    arrival_time: Optional[str] = [('default', None)]
    availability_source: Optional[str] = [('default', None), ('max_length', 1.0)]
    connection: Optional[Connection] = [('default', None)]
    day_change: Optional[int] = [('default', None)]
    days_of_operation: Optional[TypeDaysOfOperation] = [('default', None)]
    departure_time: Optional[str] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3)]
    display_option: Optional[bool] = [('default', None)]
    end_terminal: Optional[str] = [('default', None)]
    equipment: Optional[str] = [('default', None), ('length', 3)]
    first_intermediate_stop: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0)]
    flight_time: Optional[int] = [('default', None)]
    inside_availability: Optional[str] = [('default', None), ('max_length', 1.0), ('min_length', 1.0)]
    journey_time: Optional[int] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    last_intermediate_stop: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    on_time_performance: Optional[int] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3)]
    schedule_end_date: Optional[str] = [('default', None)]
    schedule_start_date: Optional[str] = [('default', None)]
    secure_sell: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 0.0)]
    start_terminal: Optional[str] = [('default', None)]
    stop_count: Optional[int] = [('default', None)]
    vendor_code: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.FlightTimeTableCriteria()
    general_time_table: Optional[GeneralTimeTable] = [('default', None)]
    specific_time_table: Optional[SpecificTimeTable] = [('default', None)]

samples.travelport.output.air_v48_0.air.FlightType()
    double_interline_con: Optional[bool] = [('default', None)]
    double_online_con: Optional[bool] = [('default', None)]
    max_connections: int = [('default', -1), ('max_inclusive', 3.0), ('min_inclusive', -1.0)]
    max_stops: int = [('default', -1), ('max_inclusive', 3.0), ('min_inclusive', -1.0)]
    non_stop_directs: Optional[bool] = [('default', None)]
    require_single_carrier: bool = [('default', False)]
    single_interline_con: Optional[bool] = [('default', None)]
    single_online_con: Optional[bool] = [('default', None)]
    stop_directs: Optional[bool] = [('default', None)]
    triple_interline_con: Optional[bool] = [('default', None)]
    triple_online_con: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.GeneralTimeTable()
    carrier_list: Optional[CarrierList] = [('default', None)]
    days_of_operation: Optional[TypeDaysOfOperation] = [('default', None)]
    end_date: Optional[str] = [('default', None)]
    end_time: Optional[str] = [('default', None)]
    flight_destination: Optional[TypeLocation] = [('default', None), ('required', True)]
    flight_origin: Optional[TypeLocation] = [('default', None), ('required', True)]
    include_connection: Optional[bool] = [('default', None)]
    start_date: Optional[str] = [('default', None), ('required', True)]
    start_time: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.GroupedOption()
    optional_service_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.GroupedOptionInfo()
    grouped_option: List[GroupedOption] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.HostReservation()
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    carrier_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0), ('required', True)]
    eticket: bool = [('default', False)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]
    universal_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]

samples.travelport.output.air_v48_0.air.HostTokenList()
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.ImageLocation()
    image_height: Optional[int] = [('default', None), ('required', True)]
    image_width: Optional[int] = [('default', None), ('required', True)]
    type: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.InFlightServices()
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.IncludeAddlBookingCodeInfo()
    secondary_carrier: Optional[str] = [('default', None), ('length', 2)]
    type: Optional[TypeCarrierCode] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.InvoluntaryChange()
    ticket_endorsement: Optional[TicketEndorsement] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.IssuanceModifiers()
    customer_receipt_info: Optional[CustomerReceiptInfo] = [('default', None)]
    emdcommission: Optional[Emdcommission] = [('default', None)]
    emdendorsement: Optional[Emdendorsement] = [('default', None)]
    form_of_payment: Optional[FormOfPayment] = [('default', None)]
    form_of_payment_ref: Optional[FormOfPaymentRef] = [('default', None)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]

samples.travelport.output.air_v48_0.air.Itinerary()
    option: Optional[TypeItineraryOption] = [('default', None)]
    separate_indicator: Optional[bool] = [('default', None)]
    type: Optional[TypeItinerary] = [('default', None)]

samples.travelport.output.air_v48_0.air.Journey()
    air_segment_ref: List[AirSegmentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    travel_time: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.JourneyData()
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.LandCharges()
    base: Optional[str] = [('default', None)]
    deposit: Optional[str] = [('default', None)]
    miscellaneous: Optional[str] = [('default', None)]
    pre_paid: Optional[str] = [('default', None)]
    tax: List[Tax] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    total: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.LanguageOption()
    country: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    language: Optional[str] = [('default', None), ('length', 2), ('required', True)]

samples.travelport.output.air_v48_0.air.Leg()
    destination: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('required', True), ('white_space', 'collapse')]
    group: Optional[int] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None), ('required', True)]
    leg_detail: List[LegDetail] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    origin: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 3.0), ('required', True), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.LegDetail()
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    destination_airport: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0)]
    key: Optional[str] = [('default', None), ('required', True)]
    origin_airport: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    travel_date: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.LegPrice()
    approximate_total_price: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    leg_detail: List[LegDetail] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    total_price: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.LegRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.LoyaltyCardDetails()
    priority_code: Optional[str] = [('default', None), ('pattern', '[a-zA-Z0-9]{1,1}'), ('required', True)]
    supplier_code: Optional[str] = [('default', None), ('length', 2), ('required', True)]

samples.travelport.output.air_v48_0.air.ManualFareAdjustment()
    adjustment_type: Optional[TypeAdjustmentType] = [('default', None), ('required', True)]
    applied_on: Optional[TypeAdjustmentTarget] = [('default', None), ('required', True)]
    fare_type: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    passenger_ref: Optional[str] = [('default', None)]
    ticket_designator: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0)]
    value: Optional[float] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.MaxLayoverDurationType()
    domestic: Optional[int] = [('default', None), ('max_inclusive', 9999.0), ('min_inclusive', 0.0)]
    gateway: Optional[int] = [('default', None), ('max_inclusive', 9999.0), ('min_inclusive', 0.0)]
    international: Optional[int] = [('default', None), ('max_inclusive', 9999.0), ('min_inclusive', 0.0)]

samples.travelport.output.air_v48_0.air.Maxtype()
    completion_ind: Optional[bool] = [('default', None)]
    days_max: Optional[bool] = [('default', None)]
    hours_max: Optional[bool] = [('default', None)]
    months_max: Optional[bool] = [('default', None)]
    num_occur_max: Optional[int] = [('default', None)]
    occur_ind_max: Optional[bool] = [('default', None)]
    same_day_max: Optional[bool] = [('default', None)]
    start_ind_max: Optional[bool] = [('default', None)]
    tm_dowmax: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.Meals()
    ALCOHOLIC_BEVERAGES_FOR_PURCHASE: xs:string = [('default', '"AlcoholicBeveragesForPurchase"')]
    BREAKFAST: xs:string = [('default', '"Breakfast"')]
    COLD_MEAL: xs:string = [('default', '"ColdMeal"')]
    COMPLIMENTARY_ALCOHOLIC_BEVERAGES: xs:string = [('default', '"ComplimentaryAlcoholicBeverages"')]
    COMPLIMENTARY_REFRESHMENTS: xs:string = [('default', '"ComplimentaryRefreshments"')]
    CONTINENTAL_BREAKFAST: xs:string = [('default', '"ContinentalBreakfast"')]
    DINNER: xs:string = [('default', '"Dinner"')]
    FOOD_AND_BEVERAGES_FOR_PURCHASE: xs:string = [('default', '"FoodAndBeveragesForPurchase"')]
    FOOD_FOR_PURCHASE: xs:string = [('default', '"FoodForPurchase"')]
    HOT_MEAL: xs:string = [('default', '"HotMeal"')]
    LUNCH: xs:string = [('default', '"Lunch"')]
    MEAL: xs:string = [('default', '"Meal"')]
    NO_MEAL_SERVICE: xs:string = [('default', '"NoMealService"')]
    REFRESHMENTS_FOR_PURCHASE: xs:string = [('default', '"RefreshmentsForPurchase"')]
    SNACK_OR_BRUNCH: xs:string = [('default', '"SnackOrBrunch"')]

samples.travelport.output.air_v48_0.air.MerchandisingAvailabilityDetails()
    account_code: Optional[AccountCode] = [('default', None)]
    air_itinerary_details: Optional[AirItineraryDetails] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.MerchandisingDetails()
    account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]
    air_itinerary_details: List[AirItineraryDetails] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.MerchandisingPricingModifiers()
    account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.Mintype()
    days_min: Optional[bool] = [('default', None)]
    fare_component: Optional[int] = [('default', None)]
    hours_min: Optional[bool] = [('default', None)]
    months_min: Optional[bool] = [('default', None)]
    num_occur_min: Optional[int] = [('default', None)]
    occur_ind_min: Optional[bool] = [('default', None)]
    same_day_min: Optional[bool] = [('default', None)]
    tm_dowmin: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.MultiGdssearchIndicator()
    default_provider: Optional[bool] = [('default', None)]
    private_fare_code: Optional[str] = [('default', None)]
    private_fare_code_only: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.OfferAvailabilityModifiers()
    carrier: List[str] = [('default', 'list'), ('length', 2), ('max_occurs', 999), ('min_occurs', 0)]
    currency_type: Optional[str] = [('default', None), ('length', 3)]
    service_type: List[str] = [('default', 'list'), ('max_length', 128.0), ('max_occurs', 999), ('min_length', 1.0), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.Option()
    booking_info: List[BookingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    connection: List[Connection] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    key: Optional[str] = [('default', None), ('required', True)]
    travel_time: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.OptionalService()
    additional_info: List[AdditionalInfo] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 0)]
    applicable_fflevel: Optional[int] = [('default', None), ('max_inclusive', 9.0), ('min_inclusive', 0.0)]
    approximate_base_price: Optional[str] = [('default', None)]
    approximate_fees: Optional[str] = [('default', None)]
    approximate_taxes: Optional[str] = [('default', None)]
    approximate_total_price: Optional[str] = [('default', None)]
    assess_indicator: Optional[TypeAssessIndicator] = [('default', None)]
    available: Optional[bool] = [('default', None)]
    baggage_unit_price: Optional[str] = [('default', None)]
    base_price: Optional[str] = [('default', None)]
    booked_quantity: Optional[str] = [('default', None)]
    branding_info: Optional[BrandingInfo] = [('default', None)]
    bundled_services: Optional[BundledServices] = [('default', None)]
    chargeable: Optional[str] = [('default', None)]
    confirmation: Optional[str] = [('default', None)]
    create_date: Optional[str] = [('default', None)]
    display_order: Optional[int] = [('default', None), ('max_inclusive', 999.0), ('min_inclusive', 0.0)]
    display_text: Optional[str] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    emd: Optional[Emd] = [('default', None)]
    entitled: Optional[bool] = [('default', None)]
    equivalent_base_price: Optional[str] = [('default', None)]
    excess_weight_rate: Optional[str] = [('default', None)]
    fee_application: Optional[FeeApplication] = [('default', None)]
    fee_info: List[FeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fees: Optional[str] = [('default', None)]
    first_piece: Optional[int] = [('default', None)]
    geography_specification: Optional[str] = [('default', None)]
    group: Optional[str] = [('default', None)]
    inclusive_of_tax: Optional[bool] = [('default', None)]
    interline_settlement_allowed: Optional[bool] = [('default', None)]
    is_pricing_approximate: Optional[bool] = [('default', None)]
    is_reprice_required: bool = [('default', False)]
    issuance_reason: Optional[str] = [('default', None), ('max_length', 1.0), ('min_length', 1.0)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    last_piece: Optional[int] = [('default', None)]
    mileage: Optional[int] = [('default', None)]
    optional_services_rule_ref: Optional[str] = [('default', None)]
    payment_ref: Optional[str] = [('default', None)]
    per_traveler: bool = [('default', True)]
    price_range: List[PriceRange] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    priority: Optional[int] = [('default', None)]
    private: Optional[bool] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_defined_type: Optional[str] = [('default', None), ('max_length', 16.0), ('min_length', 1.0)]
    pseudo_city_code: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    purchase_window: Optional[TypePurchaseWindow] = [('default', None)]
    quantity: Optional[int] = [('default', None)]
    remark: List[Remark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    restricted: bool = [('default', False)]
    secondary_type: Optional[str] = [('default', None)]
    sequence_number: Optional[int] = [('default', None)]
    service_data: List[ServiceData] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    service_info: Optional[ServiceInfo] = [('default', None)]
    service_status: Optional[str] = [('default', None)]
    service_sub_code: Optional[str] = [('default', None), ('max_length', 3.0)]
    services: Optional[str] = [('default', None)]
    source: Optional[str] = [('default', None)]
    ssrcode: Optional[str] = [('default', None), ('max_length', 4.0), ('min_length', 4.0)]
    ssrfree_text: Optional[str] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    tag: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None)]
    text: List[Text] = [('default', 'list'), ('max_occurs', 4), ('min_occurs', 0)]
    title: List[Title] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]
    total_price: Optional[str] = [('default', None)]
    total_weight: Optional[str] = [('default', None)]
    tour_code: Optional[TourCode] = [('default', None)]
    type: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0), ('required', True)]
    viewable_only: Optional[bool] = [('default', None)]
    weight_in_excess: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.OptionalServiceModifier()
    description: Optional[str] = [('default', None), ('required', True)]
    secondary_type: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0)]
    service_sub_code: Optional[str] = [('default', None), ('required', True)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0), ('required', True)]
    travel_date: Optional[str] = [('default', None), ('required', True)]
    type: Optional[str] = [('default', None), ('max_length', 128.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.air_v48_0.air.OptionalServiceModifiers()
    optional_service_modifier: List[OptionalServiceModifier] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.OptionalServiceRef()
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.OptionalServices()
    grouped_option_info: List[GroupedOptionInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    optional_service: List[OptionalService] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    optional_service_rules: List[ServiceRuleType] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    optional_services_total: Optional["OptionalServices.OptionalServicesTotal"] = [('default', None)]

    samples.travelport.output.air_v48_0.air.OptionalServices.OptionalServicesTotal()
        approximate_base_price: Optional[str] = [('default', None)]
        approximate_fees: Optional[str] = [('default', None)]
        approximate_taxes: Optional[str] = [('default', None)]
        approximate_total_price: Optional[str] = [('default', None)]
        base_price: Optional[str] = [('default', None)]
        equivalent_base_price: Optional[str] = [('default', None)]
        fee_info: List[FeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
        fees: Optional[str] = [('default', None)]
        services: Optional[str] = [('default', None)]
        tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
        taxes: Optional[str] = [('default', None)]
        total_price: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.OptionalServicesInfo()
    air_pricing_solution: Optional[AirPricingSolution] = [('default', None), ('required', True)]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    form_of_payment_ref: List[FormOfPaymentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.OriginalItineraryDetails()
    bulk_ticket: bool = [('default', False)]
    itinerary_type: Optional[TypeItineraryCode] = [('default', None)]
    ticketing_country: Optional[str] = [('default', None), ('length', 2)]
    ticketing_date: Optional[str] = [('default', None)]
    ticketing_iata: Optional[str] = [('default', None), ('max_length', 8.0)]
    ticketing_pcc: Optional[str] = [('default', None), ('max_length', 10.0), ('min_length', 2.0)]
    tour_code: Optional[str] = [('default', None), ('max_length', 15.0)]

samples.travelport.output.air_v48_0.air.Othtype()
    cat0: Optional[bool] = [('default', None)]
    cat1: Optional[bool] = [('default', None)]
    cat10: Optional[bool] = [('default', None)]
    cat11: Optional[bool] = [('default', None)]
    cat12: Optional[bool] = [('default', None)]
    cat13: Optional[bool] = [('default', None)]
    cat14: Optional[bool] = [('default', None)]
    cat15: Optional[bool] = [('default', None)]
    cat16: Optional[bool] = [('default', None)]
    cat17: Optional[bool] = [('default', None)]
    cat18: Optional[bool] = [('default', None)]
    cat19: Optional[bool] = [('default', None)]
    cat2: Optional[bool] = [('default', None)]
    cat20: Optional[bool] = [('default', None)]
    cat21: Optional[bool] = [('default', None)]
    cat22: Optional[bool] = [('default', None)]
    cat23: Optional[bool] = [('default', None)]
    cat24: Optional[bool] = [('default', None)]
    cat25: Optional[bool] = [('default', None)]
    cat26: Optional[bool] = [('default', None)]
    cat27: Optional[bool] = [('default', None)]
    cat28: Optional[bool] = [('default', None)]
    cat29: Optional[bool] = [('default', None)]
    cat3: Optional[bool] = [('default', None)]
    cat30: Optional[bool] = [('default', None)]
    cat31: Optional[bool] = [('default', None)]
    cat4: Optional[bool] = [('default', None)]
    cat5: Optional[bool] = [('default', None)]
    cat6: Optional[bool] = [('default', None)]
    cat7: Optional[bool] = [('default', None)]
    cat8: Optional[bool] = [('default', None)]
    cat9: Optional[bool] = [('default', None)]
    missing_rules: Optional[bool] = [('default', None)]
    not_usacity: Optional[bool] = [('default', None)]
    restrictive_dt: Optional[str] = [('default', None)]
    surcharge_amt: Optional[float] = [('default', None)]

samples.travelport.output.air_v48_0.air.OverrideCode()
    value: Optional[str] = [('default', None), ('length', 4)]

samples.travelport.output.air_v48_0.air.PassengerDetails()
    age: Optional[int] = [('default', None)]
    code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 3.0), ('required', True)]
    key: Optional[str] = [('default', None), ('required', True)]
    loyalty_card_details: List[LoyaltyCardDetails] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.PassengerDetailsRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.PassengerReceiptOverride()
    value: Optional[str] = [('default', None), ('min_length', 1.0), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.PassengerSeatPrice()
    amount: Optional[str] = [('default', None), ('required', True)]
    booking_traveler_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.PassengerTicketNumber()
    booking_traveler_ref: Optional[str] = [('default', None)]
    ticket_number: Optional[str] = [('default', None), ('max_length', 13.0), ('min_length', 1.0)]

samples.travelport.output.air_v48_0.air.PassengerType(TypePassengerType)
    fare_guarantee_info: Optional[FareGuaranteeInfo] = [('default', None)]

samples.travelport.output.air_v48_0.air.PaymentRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.Pcc()
    override_pcc: Optional[OverridePcc] = [('default', None)]
    point_of_sale: List[PointOfSale] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    ticket_agency: Optional[TicketAgency] = [('default', None)]

samples.travelport.output.air_v48_0.air.PenFeeType()
    air_vfee: Optional[bool] = [('default', None)]
    amt: Optional[float] = [('default', None)]
    applicable: Optional[bool] = [('default', None)]
    applicable_to: Optional[bool] = [('default', None)]
    cancellation: Optional[bool] = [('default', None)]
    currency: Optional[str] = [('default', None)]
    dep_non_ref: Optional[bool] = [('default', None)]
    dep_required: Optional[bool] = [('default', None)]
    fail_confirm_space: Optional[bool] = [('default', None)]
    itin_chg: Optional[bool] = [('default', None)]
    replace_tk: Optional[bool] = [('default', None)]
    tk_non_ref: Optional[bool] = [('default', None)]
    type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Penalty()
    amount: Optional[str] = [('default', None)]
    penalty_type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PenaltyFareInformation()
    penalty_info: Optional[TypeFarePenalty] = [('default', None)]
    prohibit_penalty_fares: Optional[bool] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.PenaltyInformation()
    board_point: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    carrier: Optional[str] = [('default', None), ('length', 2)]
    change_fee_application_code: Optional[str] = [('default', None), ('length', 2)]
    conversion_rate: Optional[float] = [('default', None)]
    fare_basis: Optional[str] = [('default', None)]
    fare_component: Optional[int] = [('default', None)]
    filed_currency: Optional[str] = [('default', None), ('length', 3)]
    maximum_change_fee: Optional[str] = [('default', None)]
    minimum_change_fee: Optional[str] = [('default', None)]
    off_point: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    priceable_unit: Optional[int] = [('default', None)]
    refundable: Optional[bool] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PermittedCabins()
    cabin_class: List[CabinClass] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.PermittedCarriers()
    carrier: List[Carrier] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.PersonName()
    first: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0)]
    last: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0), ('required', True)]
    prefix: Optional[str] = [('default', None), ('max_length', 16.0), ('min_length', 1.0)]

samples.travelport.output.air_v48_0.air.PersonNameSearch()
    last: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.air_v48_0.air.PocketItineraryRemark(TypeAssociatedRemarkWithSegmentRef)

samples.travelport.output.air_v48_0.air.PolicyCodesList()
    policy_code: List[int] = [('default', 'list'), ('max_inclusive', 9999.0), ('max_occurs', 10), ('min_inclusive', 1.0), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.PrePayAccount()
    certificate_number: Optional[str] = [('default', None)]
    credit_summary: Optional[CreditSummary] = [('default', None)]
    effective_date: Optional[str] = [('default', None)]
    expire_date: Optional[str] = [('default', None)]
    pre_pay_price_info: Optional[PrePayPriceInfo] = [('default', None)]
    program_name: Optional[str] = [('default', None)]
    program_title: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PrePayCustomer()
    address: List[TypeStructuredAddress] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    email: List[Email] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    loyalty_card: List[LoyaltyCard] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    person_name: Optional[PersonName] = [('default', None)]
    related_traveler: List[RelatedTraveler] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.PrePayId()
    company_name: Optional[CompanyName] = [('default', None)]
    id: Optional[str] = [('default', None), ('max_length', 36.0), ('min_length', 1.0), ('required', True)]
    type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PrePayPriceInfo()
    base_fare: Optional[str] = [('default', None)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    total_fare: Optional[str] = [('default', None)]
    total_tax: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PrePayProfileInfo()
    account_related_rules: Optional[AccountRelatedRules] = [('default', None)]
    affiliations: Optional[Affiliations] = [('default', None)]
    creator_id: Optional[str] = [('default', None), ('max_length', 36.0), ('min_length', 1.0)]
    pre_pay_account: Optional[PrePayAccount] = [('default', None)]
    pre_pay_customer: Optional[PrePayCustomer] = [('default', None)]
    pre_pay_id: Optional[PrePayId] = [('default', None), ('required', True)]
    status_code: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PreferredBookingCodes()
    booking_code: List[BookingCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.PreferredCabins()
    cabin_class: Optional[CabinClass] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.PreferredCarriers()
    carrier: List[Carrier] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.PriceChangeType()
    amount: Optional[str] = [('default', None), ('required', True)]
    carrier: Optional[str] = [('default', None)]
    segment_ref: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PriceRange()
    default_currency: Optional[bool] = [('default', None)]
    end_price: Optional[str] = [('default', None)]
    start_price: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PricingDetails()
    account_code: Optional[str] = [('default', None)]
    advisory_message: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    bankers_selling_rate: Optional[float] = [('default', None)]
    conversion_rate: Optional[float] = [('default', None)]
    discount_applies: bool = [('default', False)]
    endorsement_text: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    for_ticketing_on_date: Optional[str] = [('default', None)]
    form_of_refund: Optional[TypeFormOfRefund] = [('default', None)]
    itinerary_type: Optional[TypeItineraryCode] = [('default', None)]
    last_date_to_ticket: Optional[str] = [('default', None)]
    low_fare_found: bool = [('default', False)]
    low_fare_pricing: bool = [('default', False)]
    original_ticket_currency: Optional[str] = [('default', None), ('length', 3)]
    penalty_applies: bool = [('default', False)]
    pricing_type: Optional[TypePricingType] = [('default', None)]
    rate_of_exchange: Optional[float] = [('default', None)]
    validating_vendor_code: Optional[str] = [('default', None), ('length', 2)]
    waiver_text: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.PrintBlankFormItinerary()
    include_description: Optional[bool] = [('default', None), ('required', True)]
    include_header: Optional[bool] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.ProhibitedCabins()
    cabin_class: List[CabinClass] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.ProhibitedCarriers()
    carrier: List[Carrier] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.PromoCode()
    code: Optional[str] = [('default', None), ('max_length', 64.0), ('min_length', 1.0), ('required', True)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.air_v48_0.air.RailCoachDetails()
    available_rail_seats: Optional[str] = [('default', None)]
    rail_coach_number: Optional[str] = [('default', None)]
    rail_seat_map_availability: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.RefundFailureInfo()
    booking_traveler_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    code: Optional[int] = [('default', None), ('required', True)]
    message: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('required', True)]
    tcrnumber: Optional[str] = [('default', None)]
    ticket_number: Optional[TicketNumber] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.RelatedTraveler()
    credits_used: Optional["RelatedTraveler.CreditsUsed"] = [('default', None)]
    loyalty_card: List[LoyaltyCard] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    person_name: Optional[PersonName] = [('default', None)]
    relation: Optional[str] = [('default', None)]
    status_code: Optional[str] = [('default', None)]

    samples.travelport.output.air_v48_0.air.RelatedTraveler.CreditsUsed()
        currency_code: Optional[str] = [('default', None), ('length', 3)]
        used_credit: Optional[float] = [('default', None)]

samples.travelport.output.air_v48_0.air.RepricingModifiers()
    account_code: Optional[str] = [('default', None)]
    air_pricing_solution_ref: Optional[str] = [('default', None)]
    air_segment_pricing_modifiers: List[AirSegmentPricingModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    brand_details: bool = [('default', False)]
    brand_modifier: Optional[str] = [('default', None)]
    bulk_ticket: bool = [('default', False)]
    connection_point: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    create_date: Optional[str] = [('default', None)]
    fare_ticket_designator: Optional[FareTicketDesignator] = [('default', None)]
    fare_type: List[FareType] = [('default', 'list'), ('max_occurs', 100), ('min_occurs', 0)]
    flight_type: str = [('default', '"Direct"')]
    jet_service_only: bool = [('default', False)]
    multi_airport_search: bool = [('default', True)]
    override_currency: Optional["RepricingModifiers.OverrideCurrency"] = [('default', None)]
    penalty_as_tax_code: Optional[str] = [('default', None), ('length', 2)]
    penalty_to_fare: Optional[bool] = [('default', None)]
    price_class_of_service: Optional[TypePriceClassOfService] = [('default', None)]
    price_ptconly: bool = [('default', False)]
    private_fare_options: Optional[str] = [('default', None), ('max_length', 50.0)]
    reissue_loc_city_code: Optional[str] = [('default', None), ('length', 3)]
    reissue_loc_country_code: Optional[str] = [('default', None), ('length', 2)]
    time_window: Optional[int] = [('default', None), ('max_inclusive', 12.0), ('min_inclusive', 1.0)]
    withhold_tax_code: List[str] = [('default', 'list'), ('length', 2), ('max_occurs', 4), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air.RepricingModifiers.OverrideCurrency()
        country_code: Optional[str] = [('default', None), ('length', 2)]
        currency_code: Optional[str] = [('default', None), ('length', 3)]

samples.travelport.output.air_v48_0.air.Restriction()
    days_of_week_restriction: List["Restriction.DaysOfWeekRestriction"] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    restriction_passenger_types: List["Restriction.RestrictionPassengerTypes"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air.Restriction.DaysOfWeekRestriction()
        application: Optional[str] = [('default', None)]
        fri: Optional[bool] = [('default', None)]
        include_exclude_use_ind: Optional[bool] = [('default', None)]
        mon: Optional[bool] = [('default', None)]
        restriction_exists_ind: Optional[bool] = [('default', None)]
        sat: Optional[bool] = [('default', None)]
        sun: Optional[bool] = [('default', None)]
        thu: Optional[bool] = [('default', None)]
        tue: Optional[bool] = [('default', None)]
        wed: Optional[bool] = [('default', None)]

    samples.travelport.output.air_v48_0.air.Restriction.RestrictionPassengerTypes()
        max_nbr_travelers: Optional[str] = [('default', None)]
        total_nbr_ptc: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Route()
    key: Optional[str] = [('default', None), ('required', True)]
    leg: List[Leg] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.RouteList()
    route: List[Route] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.RoutingRules()
    routing: List["RoutingRules.Routing"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air.RoutingRules.Routing()
        direction_info: List["RoutingRules.Routing.DirectionInfo"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
        number: Optional[str] = [('default', None)]
        routing_constructed_ind: Optional[bool] = [('default', None)]
        routing_restriction: Optional[str] = [('default', None)]

        samples.travelport.output.air_v48_0.air.RoutingRules.Routing.DirectionInfo()
            direction: Optional[str] = [('default', None)]
            location_code: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]

samples.travelport.output.air_v48_0.air.Row()
    characteristic: List[Characteristic] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    facility: List[Facility] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    number: Optional[int] = [('default', None), ('required', True)]
    search_traveler_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Rows()
    row: List[Row] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    segment_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.RuleAdvancedPurchase()
    more_rules_present: Optional[bool] = [('default', None)]
    reservation_latest_period: Optional[str] = [('default', None)]
    reservation_latest_unit: Optional[TypeStayUnit] = [('default', None)]
    ticketing_earliest_date: Optional[str] = [('default', None)]
    ticketing_latest_date: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.RuleCharges()
    amount: Optional[str] = [('default', None)]
    departure_status: Optional[str] = [('default', None)]
    more_rules_present: Optional[bool] = [('default', None)]
    penalty_type: Optional[str] = [('default', None)]
    percent: Optional[float] = [('default', None)]

samples.travelport.output.air_v48_0.air.RuleLengthOfStay()
    maximum_stay: Optional[TypeRestrictionLengthOfStay] = [('default', None)]
    minimum_stay: Optional[TypeRestrictionLengthOfStay] = [('default', None)]

samples.travelport.output.air_v48_0.air.Rules()
    rules_text: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.SearchAirLeg()
    air_leg_modifiers: Optional[AirLegModifiers] = [('default', None)]
    search_arv_time: List[TypeTimeSpec] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    search_dep_time: List[TypeFlexibleTimeSpec] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    search_destination: List[TypeSearchLocation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    search_origin: List[TypeSearchLocation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.SearchTraveler(TypePassengerType)
    air_seat_assignment: List[AirSeatAssignment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    key: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.SeatInformation()
    description: Optional[str] = [('default', None), ('required', True)]
    key: Optional[str] = [('default', None), ('required', True)]
    power: Optional[str] = [('default', None), ('required', True)]
    rating: Optional["SeatInformation.Rating"] = [('default', None), ('required', True)]
    type: Optional[str] = [('default', None), ('required', True)]
    video: Optional[str] = [('default', None), ('required', True)]

    samples.travelport.output.air_v48_0.air.SeatInformation.Rating()
        number: Optional[int] = [('default', None), ('required', True)]
        value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.SegmentIndex()
    value: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.SegmentModifiers()
    air_segment_ref: Optional[AirSegmentRef] = [('default', None), ('required', True)]
    baggage_allowance: Optional[BaggageAllowance] = [('default', None)]
    ticket_designator: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0)]
    ticket_validity: Optional[TicketValidity] = [('default', None)]

samples.travelport.output.air_v48_0.air.SegmentSelect()
    air_segment_ref: List[TypeSegmentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    all_confirmed_air: Optional[bool] = [('default', None)]
    all_hotel: Optional[bool] = [('default', None)]
    all_passive: Optional[bool] = [('default', None)]
    all_vehicle: Optional[bool] = [('default', None)]
    all_waitlisted_air: Optional[bool] = [('default', None)]
    hotel_reservation_ref: List[TypeNonAirReservationRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    passive_segment_ref: List[TypeSegmentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    vehicle_reservation_ref: List[TypeNonAirReservationRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.SelectionModifiers()
    air_segment_ref: List[AirSegmentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rfic: Optional[str] = [('default', None), ('length', 1)]
    supplier_code: Optional[str] = [('default', None), ('length', 2)]
    svc_segment_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.ServiceAssociations()
    applicable_segment: List["ServiceAssociations.ApplicableSegment"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.ServiceAssociations.ApplicableSegment()
        key: Optional[str] = [('default', None)]
        optional_service_ref: Optional[OptionalServiceRef] = [('default', None)]
        response_message: Optional[ResponseMessage] = [('default', None)]

samples.travelport.output.air_v48_0.air.ServiceGroup()
    code: Optional[str] = [('default', None), ('required', True)]
    service_sub_group: List[ServiceSubGroup] = [('default', 'list'), ('max_occurs', 15), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.ServiceSubGroup()
    code: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.SolutionGroup()
    count: Optional[int] = [('default', None)]
    diversification: Optional[TypeDiversity] = [('default', None)]
    permitted_account_codes: Optional["SolutionGroup.PermittedAccountCodes"] = [('default', None)]
    permitted_point_of_sales: Optional["SolutionGroup.PermittedPointOfSales"] = [('default', None)]
    preferred_account_codes: Optional["SolutionGroup.PreferredAccountCodes"] = [('default', None)]
    primary: bool = [('default', False)]
    prohibited_account_codes: Optional["SolutionGroup.ProhibitedAccountCodes"] = [('default', None)]
    prohibited_point_of_sales: Optional["SolutionGroup.ProhibitedPointOfSales"] = [('default', None)]
    tag: Optional[str] = [('default', None), ('max_length', 20.0)]
    trip_type: Optional[TypeTripType] = [('default', None), ('required', True)]

    samples.travelport.output.air_v48_0.air.SolutionGroup.PermittedAccountCodes()
        account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.SolutionGroup.PermittedPointOfSales()
        point_of_sale: List[PointOfSale] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.SolutionGroup.PreferredAccountCodes()
        account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.SolutionGroup.ProhibitedAccountCodes()
        account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

    samples.travelport.output.air_v48_0.air.SolutionGroup.ProhibitedPointOfSales()
        point_of_sale: List[PointOfSale] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air.SpecificSeatAssignment()
    booking_traveler_ref: Optional[str] = [('default', None), ('required', True)]
    flight_detail_ref: Optional[str] = [('default', None)]
    rail_coach_number: Optional[str] = [('default', None), ('max_length', 4.0)]
    seat_id: Optional[str] = [('default', None), ('required', True)]
    segment_ref: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.SpecificTimeTable()
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    flight_destination: Optional["SpecificTimeTable.FlightDestination"] = [('default', None)]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0), ('required', True)]
    flight_origin: Optional["SpecificTimeTable.FlightOrigin"] = [('default', None)]
    start_date: Optional[str] = [('default', None), ('required', True)]

    samples.travelport.output.air_v48_0.air.SpecificTimeTable.FlightDestination()
        airport: Optional[Airport] = [('default', None), ('required', True)]

    samples.travelport.output.air_v48_0.air.SpecificTimeTable.FlightOrigin()
        airport: Optional[Airport] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.SplitTicketingSearch()
    round_trip: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.SponsoredFltInfo()
    flt_key: Optional[str] = [('default', None), ('max_length', 5.0), ('required', True)]
    neutral_lnb: Optional[int] = [('default', None), ('required', True)]
    sponsored_lnb: Optional[int] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.StructuredFareRulesType()
    fare_rule_category_type: List[FareRuleCategoryTypes] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.SvcSegment()
    booking_traveler_ref: Optional[str] = [('default', None)]
    carrier: Optional[str] = [('default', None), ('length', 2)]
    destination: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    emdnumber: Optional[str] = [('default', None), ('length', 13)]
    fee: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]
    number_of_items: Optional[int] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3), ('white_space', 'collapse')]
    rfic: Optional[str] = [('default', None)]
    rfisc: Optional[str] = [('default', None)]
    start_date: Optional[str] = [('default', None)]
    status: Optional[str] = [('default', None)]
    svc_description: Optional[str] = [('default', None)]
    travel_order: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.Tax()
    amount: Optional[str] = [('default', None), ('required', True)]
    category: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.TaxInfo(TypeTaxInfo)

samples.travelport.output.air_v48_0.air.Tcr()
    agency_info: Optional[AgencyInfo] = [('default', None)]
    air_pricing_info: List[AirPricingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None)]
    base_price: Optional[str] = [('default', None), ('required', True)]
    booking_traveler: List[BookingTraveler] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    confirmed_date: Optional[str] = [('default', None)]
    exchangeable: Optional[bool] = [('default', None), ('required', True)]
    fees: Optional[str] = [('default', None), ('required', True)]
    forfeit_amount: Optional[str] = [('default', None)]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    modifiable: Optional[bool] = [('default', None), ('required', True)]
    modified_date: Optional[str] = [('default', None), ('required', True)]
    passenger_ticket_number: List[PassengerTicketNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    payment: List[Payment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]
    refund_access_code: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0)]
    refund_amount: Optional[str] = [('default', None)]
    refund_fee: Optional[str] = [('default', None)]
    refund_remark: List[RefundRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    refundable: Optional[bool] = [('default', None), ('required', True)]
    status: Optional[TypeTcrstatus] = [('default', None), ('required', True)]
    supplier_locator: List[SupplierLocator] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    taxes: Optional[str] = [('default', None), ('required', True)]
    tcrnumber: Optional[str] = [('default', None), ('required', True)]
    voidable: Optional[bool] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TcrexchangeBundle()
    air_exchange_info: Optional[AirExchangeInfo] = [('default', None), ('required', True)]
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    fee_info: List[FeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    penalty: List[CommonPenalty] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tcrnumber: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.Tcrinfo()
    date: Optional[str] = [('default', None)]
    provider_reservation_info_ref: Optional[str] = [('default', None), ('required', True)]
    status: Optional[TypeTcrstatus] = [('default', None), ('required', True)]
    tcrnumber: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TcrrefundBundle()
    air_refund_info: Optional[AirRefundInfo] = [('default', None), ('required', True)]
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fee_info: List[FeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    refund_access_code: Optional[str] = [('default', None), ('max_length', 32.0), ('min_length', 1.0)]
    refund_type: Optional[str] = [('default', None), ('required', True)]
    tax_info: List[TaxInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tcrnumber: Optional[str] = [('default', None), ('required', True)]
    waiver_code: Optional[WaiverCode] = [('default', None)]

samples.travelport.output.air_v48_0.air.TermConditions()
    include_term_conditions: Optional[bool] = [('default', None), ('required', True)]
    language_option: List[LanguageOption] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.Text(TypeTextElement)

samples.travelport.output.air_v48_0.air.TextInfo()
    text: List[str] = [('default', 'list'), ('max_length', 250.0), ('max_occurs', 999), ('min_occurs', 0)]
    title: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Ticket()
    coupon: List[Coupon] = [('default', 'list'), ('max_occurs', 4), ('min_occurs', 1)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    exchanged_ticket_info: List[ExchangedTicketInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    ticket_endorsement: List[TicketEndorsement] = [('default', 'list'), ('max_occurs', 6), ('min_occurs', 0)]
    ticket_number: Optional[str] = [('default', None), ('length', 13), ('required', True)]
    ticket_status: Optional[TypeTicketStatus] = [('default', None)]
    tour_code: List[TourCode] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.TicketAgency()
    provider_code: Optional[str] = [('default', None), ('required', True)]
    pseudo_city_code: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TicketDesignator()
    value: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0), ('required', True)]

samples.travelport.output.air_v48_0.air.TicketEndorsement()
    value: Optional[str] = [('default', None), ('max_length', 256.0), ('min_length', 1.0), ('required', True)]

samples.travelport.output.air_v48_0.air.TicketFailureInfo()
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    booking_traveler_ref: Optional[str] = [('default', None), ('required', True)]
    code: Optional[int] = [('default', None), ('required', True)]
    message: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TicketInfo()
    air_pricing_info_ref: Optional[str] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None), ('required', True)]
    bulk_ticket: Optional[bool] = [('default', None)]
    conjuncted_ticket_info: List[ConjunctedTicketInfo] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    country_code: Optional[str] = [('default', None), ('length', 2)]
    exchanged_ticket_info: List[ExchangedTicketInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    iatanumber: Optional[str] = [('default', None), ('max_length', 8.0)]
    name: Optional[str] = [('default', None), ('required', True)]
    number: Optional[str] = [('default', None), ('required', True)]
    status: Optional[TypeTicketStatus] = [('default', None), ('required', True)]
    ticket_issue_date: Optional[str] = [('default', None)]
    ticketing_agent_sign_on: Optional[str] = [('default', None), ('max_length', 8.0)]

samples.travelport.output.air_v48_0.air.TicketValidity()
    not_valid_after: Optional[str] = [('default', None)]
    not_valid_before: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.TicketingModifiers()
    accounting_info: Optional[TypeTicketModifierAccountingType] = [('default', None)]
    actual_selling_fare: Optional[TypeTicketModifierAmountType] = [('default', None)]
    booking_traveler_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    bulk_ticket: Optional["TicketingModifiers.BulkTicket"] = [('default', None)]
    commission: Optional[Commission] = [('default', None)]
    corporate_discount: Optional[TypeTicketModifierAccountingType] = [('default', None)]
    currency_override_code: Optional[str] = [('default', None), ('length', 1)]
    destination_purpose_code: Optional[DestinationPurposeCode] = [('default', None)]
    document_instruction_number: Optional[str] = [('default', None)]
    document_options: Optional[DocumentOptions] = [('default', None)]
    document_select: Optional[DocumentSelect] = [('default', None)]
    el_stat: Optional[TypeElementStatus] = [('default', None)]
    exclude_ticketing: Optional[ExcludeTicketing] = [('default', None)]
    exempt_obfee: Optional[ExemptObfee] = [('default', None)]
    exempt_vat: Optional[bool] = [('default', None)]
    free_text: Optional[str] = [('default', None), ('max_length', 756.0)]
    free_ticket: Optional[bool] = [('default', None)]
    group_tour: Optional[TypeBulkTicketModifierType] = [('default', None)]
    invoice_fare: Optional[TypeTicketModifierAccountingType] = [('default', None)]
    is_primary_di: bool = [('default', False)]
    key: Optional[str] = [('default', None)]
    key_override: Optional[bool] = [('default', None)]
    land_charges: Optional[LandCharges] = [('default', None)]
    language_option: List[LanguageOption] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]
    name_number: Optional[str] = [('default', None)]
    net_fare: Optional[TypeTicketModifierAmountType] = [('default', None)]
    net_remit: Optional[TypeTicketModifierAmountType] = [('default', None)]
    net_remit_applied: Optional[bool] = [('default', None)]
    plating_carrier: Optional[str] = [('default', None), ('length', 2)]
    print_blank_form_itinerary: Optional[PrintBlankFormItinerary] = [('default', None)]
    reference: Optional[str] = [('default', None), ('max_length', 30.0), ('min_length', 1.0)]
    segment_modifiers: List[SegmentModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    segment_select: Optional[SegmentSelect] = [('default', None)]
    status: Optional[str] = [('default', None), ('max_length', 30.0)]
    supplier_locator: Optional[SupplierLocator] = [('default', None)]
    ticket_endorsement: List[TicketEndorsement] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    ticket_record: Optional[str] = [('default', None)]
    tour_code: Optional[TourCode] = [('default', None)]
    value_modifier: Optional[TypeTicketModifierValueType] = [('default', None)]

    samples.travelport.output.air_v48_0.air.TicketingModifiers.BulkTicket(TypeBulkTicketModifierType)
        non_refundable: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.TicketingModifiersRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.Title(TypeTextElement)

samples.travelport.output.air_v48_0.air.TourCode()
    value: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]

samples.travelport.output.air_v48_0.air.TravelArranger()
    code: Optional[str] = [('default', None)]
    company_short_name: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.TypeAirReservationWithFop(TypeBaseAirReservation)
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.TypeAlliance(str)
    KLMNORTHWEST_ALLIANCE: xs:string = [('default', '"KLMNorthwestAlliance"')]
    ONE_WORLD: xs:string = [('default', '"OneWorld"')]
    OWCODE: xs:string = [('default', '"OWCode"')]
    SKY_TEAM: xs:string = [('default', '"SkyTeam"')]
    STAR_ALLIANCE: xs:string = [('default', '"StarAlliance"')]

samples.travelport.output.air_v48_0.air.TypeAnchorFlightData()
    airline_code: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    connection_indicator: Optional[bool] = [('default', None)]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeApplicableSegment()
    air_itinerary_details_ref: Optional[str] = [('default', None)]
    booking_counts: Optional[str] = [('default', None)]
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeAssessIndicator(str)
    MILEAGE_AND_CURRENCY: xs:string = [('default', '"MileageAndCurrency"')]
    MILEAGE_OR_CURRENCY: xs:string = [('default', '"MileageOrCurrency"')]

samples.travelport.output.air_v48_0.air.TypeAtpcoglobalIndicator(str)
    AL: xs:string = [('default', '"AL"')]
    AP: xs:string = [('default', '"AP"')]
    AT: xs:string = [('default', '"AT"')]
    CA: xs:string = [('default', '"CA"')]
    CT: xs:string = [('default', '"CT"')]
    EH: xs:string = [('default', '"EH"')]
    FE: xs:string = [('default', '"FE"')]
    IN_VALUE: xs:string = [('default', '"IN"')]
    NA: xs:string = [('default', '"NA"')]
    PA: xs:string = [('default', '"PA"')]
    PN: xs:string = [('default', '"PN"')]
    PO: xs:string = [('default', '"PO"')]
    RU: xs:string = [('default', '"RU"')]
    RW: xs:string = [('default', '"RW"')]
    SA: xs:string = [('default', '"SA"')]
    SP: xs:string = [('default', '"SP"')]
    TB: xs:string = [('default', '"TB"')]
    TS: xs:string = [('default', '"TS"')]
    US: xs:string = [('default', '"US"')]
    WH: xs:string = [('default', '"WH"')]
    ZZ: xs:string = [('default', '"ZZ"')]

samples.travelport.output.air_v48_0.air.TypeBackOffice(str)
    ACCOUNTING: xs:string = [('default', '"Accounting"')]
    DUAL: xs:string = [('default', '"Dual"')]
    GLOBAL_VALUE: xs:string = [('default', '"Global"')]
    NON_ACCOUNTING: xs:string = [('default', '"NonAccounting"')]
    NON_ACCOUNTING_REMOTE: xs:string = [('default', '"NonAccountingRemote"')]

samples.travelport.output.air_v48_0.air.TypeBaseAirReservation(BaseReservation)
    air_exchange_bundle: List[AirExchangeBundle] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_exchange_bundle_total: Optional[AirExchangeBundleTotal] = [('default', None)]
    air_pricing_info: List[AirPricingInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    associated_remark: List[AssociatedRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    booking_traveler_ref: List[BookingTravelerRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    credit_card_auth: List[CreditCardAuth] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    document_info: Optional[DocumentInfo] = [('default', None)]
    fare_note: List[FareNote] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fee_info: List[FeeInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    payment: List[Payment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    pocket_itinerary_remark: List[PocketItineraryRemark] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    provider_reservation_info_ref: List[ProviderReservationInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    supplier_locator: List[SupplierLocator] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    svc_segment: List[SvcSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tax_info: List[TypeTaxInfoWithPaymentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    third_party_information: List[ThirdPartyInformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticketing_modifiers: List[TicketingModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.TypeBaseAirSegment(Segment)
    air_avail_info: List[AirAvailInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    alternate_location_distance_ref: List[AlternateLocationDistanceRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    apisrequirements_ref: Optional[str] = [('default', None)]
    arrival_time: Optional[str] = [('default', None)]
    availability_display_type: Optional[str] = [('default', None)]
    availability_source: Optional[str] = [('default', None), ('max_length', 1.0)]
    black_listed: Optional[bool] = [('default', None)]
    booking_date: Optional[str] = [('default', None)]
    brand_indicator: Optional[str] = [('default', None)]
    cabin_class: Optional[str] = [('default', None)]
    carrier: Optional[str] = [('default', None), ('length', 2)]
    change_of_plane: bool = [('default', False)]
    class_of_service: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    codeshare_info: Optional[CodeshareInfo] = [('default', None)]
    connection: Optional[Connection] = [('default', None)]
    departure_time: Optional[str] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    distance: Optional[int] = [('default', None)]
    equipment: Optional[str] = [('default', None), ('length', 3)]
    eticketability: Optional[TypeEticketability] = [('default', None)]
    flight_details: List[FlightDetails] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    flight_details_ref: List[FlightDetailsRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0)]
    flight_time: Optional[int] = [('default', None)]
    flown_segment: bool = [('default', False)]
    group: Optional[int] = [('default', None), ('required', True)]
    guaranteed_payment_carrier: Optional[str] = [('default', None)]
    host_token_ref: Optional[str] = [('default', None)]
    link_availability: Optional[bool] = [('default', None)]
    marriage_group: Optional[int] = [('default', None)]
    number_in_party: Optional[int] = [('default', None), ('max_inclusive', 99.0), ('min_inclusive', 1.0)]
    number_of_stops: Optional[int] = [('default', None)]
    open_segment: Optional[bool] = [('default', None)]
    operational_status: Optional[str] = [('default', None)]
    optional_services_indicator: Optional[bool] = [('default', None)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    participant_level: Optional[str] = [('default', None)]
    passive_provider_reservation_info_ref: Optional[str] = [('default', None)]
    polled_availability_option: Optional[str] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_reservation_info_ref: Optional[str] = [('default', None)]
    rail_coach_details: List[RailCoachDetails] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_coach_number: Optional[str] = [('default', None), ('max_length', 4.0)]
    schedule_change: bool = [('default', False)]
    seamless: Optional[bool] = [('default', None)]
    sell_message: List[SellMessage] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    sponsored_flt_info: Optional[SponsoredFltInfo] = [('default', None)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    travel_time: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.TypeBillingDetailsDataType(str)
    ALPHA: xs:string = [('default', '"Alpha"')]
    ALPHA_NUMERIC: xs:string = [('default', '"AlphaNumeric"')]
    DATE: xs:string = [('default', '"Date"')]
    NUMERIC: xs:string = [('default', '"Numeric"')]

samples.travelport.output.air_v48_0.air.TypeBillingDetailsName(str)
    ACCOUNTING_UNIT: xs:string = [('default', '"AccountingUnit"')]
    ACCOUNT_NUMBER: xs:string = [('default', '"AccountNumber"')]
    ACTION_CODE: xs:string = [('default', '"ActionCode"')]
    COST_ACCOUNT_NUMBER: xs:string = [('default', '"CostAccountNumber"')]
    DEPARTMENT_CODE: xs:string = [('default', '"DepartmentCode"')]
    DESTINATION: xs:string = [('default', '"Destination"')]
    FILE_DATE: xs:string = [('default', '"FileDate"')]
    ORDER_NUMBER: xs:string = [('default', '"OrderNumber"')]
    PERSONAL_ID: xs:string = [('default', '"PersonalId"')]
    PROJECT_NUMBER: xs:string = [('default', '"ProjectNumber"')]

samples.travelport.output.air_v48_0.air.TypeBooking(str)
    APPLY_BOOKING_PER_SERVICE: xs:string = [('default', '"Apply booking per service"')]
    AUXILLARY_SEGMENT: xs:string = [('default', '"Auxillary Segment"')]
    AVAILABLE_FOR_DISPLAY_PRICING: xs:string = [('default', '"Available for Display/Pricing"')]
    CONTACT_CARRIER_FOR_BOOKING: xs:string = [('default', '"Contact Carrier for Booking"')]
    NO_BOOKING_REQUIRED: xs:string = [('default', '"No Booking Required"')]
    SSR: xs:string = [('default', '"SSR"')]

samples.travelport.output.air_v48_0.air.TypeBulkTicketModifierType()
    suppress_on_fare_calc: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.TypeCarrierCode(str)
    PRIMARY: xs:string = [('default', '"Primary"')]
    SECONDARY: xs:string = [('default', '"Secondary"')]

samples.travelport.output.air_v48_0.air.TypeConnectionIndicator(str)
    AVAILABILITY_AND_PRICING: xs:string = [('default', '"AvailabilityAndPricing"')]
    STOPOVER: xs:string = [('default', '"Stopover"')]
    TURN_AROUND: xs:string = [('default', '"TurnAround"')]

samples.travelport.output.air_v48_0.air.TypeCouponStatus(str)
    A: xs:string = [('default', '"A"')]
    C: xs:string = [('default', '"C"')]
    D: xs:string = [('default', '"D"')]
    E: xs:string = [('default', '"E"')]
    F: xs:string = [('default', '"F"')]
    I: xs:string = [('default', '"I"')]
    L: xs:string = [('default', '"L"')]
    O: xs:string = [('default', '"O"')]
    P: xs:string = [('default', '"P"')]
    R: xs:string = [('default', '"R"')]
    S: xs:string = [('default', '"S"')]
    U: xs:string = [('default', '"U"')]
    V: xs:string = [('default', '"V"')]
    Z: xs:string = [('default', '"Z"')]

samples.travelport.output.air_v48_0.air.TypeDaysOfOperation()
    fri: Optional[bool] = [('default', None)]
    mon: Optional[bool] = [('default', None)]
    sat: Optional[bool] = [('default', None)]
    sun: Optional[bool] = [('default', None)]
    thu: Optional[bool] = [('default', None)]
    tue: Optional[bool] = [('default', None)]
    wed: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air.TypeDefaultBrandDetail()
    applicable_segment: List[ApplicableSegment] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    brand_id: Optional[str] = [('default', None), ('max_length', 19.0), ('min_length', 1.0)]
    image_location: List[ImageLocation] = [('default', 'list'), ('max_occurs', 3), ('min_occurs', 0)]
    text: List[Text] = [('default', 'list'), ('max_occurs', 4), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.TypeDestinationCode(str)
    AFRICA: xs:string = [('default', '"Africa"')]
    ASIA: xs:string = [('default', '"Asia"')]
    AUSTRALIA_NEW_ZEALAND_PACIFIC_ISLANDS: xs:string = [('default', '"AustraliaNewZealandPacificIslands"')]
    CANADA_GREENLAND: xs:string = [('default', '"CanadaGreenland"')]
    CARIBBEAN: xs:string = [('default', '"Caribbean"')]
    EUROPE: xs:string = [('default', '"Europe"')]
    MEXICO_COST_RICA_CENTRAL_AMERICA: xs:string = [('default', '"MexicoCostRicaCentralAmerica"')]
    MIDDLE_EAST_WESTERN_ASIA: xs:string = [('default', '"MiddleEastWesternAsia"')]
    SOUTH_AMERICA: xs:string = [('default', '"SouthAmerica"')]
    USA: xs:string = [('default', '"USA"')]

samples.travelport.output.air_v48_0.air.TypeDisplayCategory(str)
    SPECIAL_SERVICE: xs:string = [('default', '"SpecialService"')]
    STORE: xs:string = [('default', '"Store"')]
    WITH_ITINERARY_PRICING: xs:string = [('default', '"With Itinerary Pricing"')]

samples.travelport.output.air_v48_0.air.TypeDiversity(str)
    AIRPORTS: xs:string = [('default', '"Airports"')]
    BLEND: xs:string = [('default', '"Blend"')]
    CARRIER: xs:string = [('default', '"Carrier"')]
    DATE_COMBINATION: xs:string = [('default', '"DateCombination"')]
    DESTINATION: xs:string = [('default', '"Destination"')]
    FIRST_OD: xs:string = [('default', '"FirstOD"')]
    FIRST_ODDATE: xs:string = [('default', '"FirstODDate"')]
    ORIGIN: xs:string = [('default', '"Origin"')]
    SECOND_OD: xs:string = [('default', '"SecondOD"')]
    SECOND_ODDATE: xs:string = [('default', '"SecondODDate"')]

samples.travelport.output.air_v48_0.air.TypeEticketability(str)
    NO: xs:string = [('default', '"No"')]
    REQUIRED: xs:string = [('default', '"Required"')]
    TICKETLESS: xs:string = [('default', '"Ticketless"')]
    YES: xs:string = [('default', '"Yes"')]

samples.travelport.output.air_v48_0.air.TypeFacility(str)
    AISLE: xs:string = [('default', '"Aisle"')]
    OPEN: xs:string = [('default', '"Open"')]
    SEAT: xs:string = [('default', '"Seat"')]
    UNKNOWN: xs:string = [('default', '"Unknown"')]

samples.travelport.output.air_v48_0.air.TypeFailureInfo()
    code: Optional[int] = [('default', None), ('required', True)]
    message: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeFareBreak(str)
    MUST_BREAK: xs:string = [('default', '"MustBreak"')]
    MUST_NOT_BREAK: xs:string = [('default', '"MustNotBreak"')]
    MUST_ONLY_BREAK: xs:string = [('default', '"MustOnlyBreak"')]

samples.travelport.output.air_v48_0.air.TypeFareDirectionality(str)
    ALL: xs:string = [('default', '"All"')]
    OUTBOUND: xs:string = [('default', '"Outbound"')]
    RETURN_VALUE: xs:string = [('default', '"Return"')]

samples.travelport.output.air_v48_0.air.TypeFareDiscount(str)
    BASE_NO_RE_CALC_USTAXES: xs:string = [('default', '"BaseNoReCalcUSTaxes"')]
    BASE_RE_CALC_USTAXES: xs:string = [('default', '"BaseReCalcUSTaxes"')]
    BASE_TAX: xs:string = [('default', '"BaseTax"')]

samples.travelport.output.air_v48_0.air.TypeFareGuarantee(str)
    AGENCY_PRIVATE_FARE_NO_OVERRIDE: xs:string = [('default', '"AgencyPrivateFareNoOverride"')]
    AIRLINE: xs:string = [('default', '"Airline"')]
    AUTO: xs:string = [('default', '"Auto"')]
    AUTO_USING_PRIVATE_FARE: xs:string = [('default', '"AutoUsingPrivateFare"')]
    EXPIRED: xs:string = [('default', '"Expired"')]
    GUARANTEED: xs:string = [('default', '"Guaranteed"')]
    GUARANTEED_USING_AIRLINE_PRIVATE_FARE: xs:string = [('default', '"GuaranteedUsingAirlinePrivateFare"')]
    GUARANTEE_EXPIRED: xs:string = [('default', '"GuaranteeExpired"')]
    INVALID: xs:string = [('default', '"Invalid"')]
    MANUAL: xs:string = [('default', '"Manual"')]
    MANUAL_FARE: xs:string = [('default', '"ManualFare"')]
    REPRICE: xs:string = [('default', '"Reprice"')]
    RESTORED: xs:string = [('default', '"Restored"')]
    TICKETED: xs:string = [('default', '"Ticketed"')]
    UNKNOWN: xs:string = [('default', '"Unknown"')]
    UNTICKETABLE: xs:string = [('default', '"Unticketable"')]

samples.travelport.output.air_v48_0.air.TypeFarePenalty()
    amount: Optional[str] = [('default', None)]
    no_show: Optional[bool] = [('default', None)]
    penalty_applies: Optional[str] = [('default', None)]
    percentage: Optional[str] = [('default', None), ('pattern', '([0-9]{1,2}|100)\\.[0-9]{1,2}')]

samples.travelport.output.air_v48_0.air.TypeFareRestrictionType(str)
    BOTH: xs:string = [('default', '"Both"')]
    DAY_OF_WEEK: xs:string = [('default', '"DayOfWeek"')]
    FLIGHT_TIME_OF_DAY: xs:string = [('default', '"FlightTimeOfDay"')]

samples.travelport.output.air_v48_0.air.TypeFareRuleCategoryCode(str)
    ACC: xs:string = [('default', '"ACC"')]
    ADV: xs:string = [('default', '"ADV"')]
    AGT: xs:string = [('default', '"AGT"')]
    APP: xs:string = [('default', '"APP"')]
    BLA: xs:string = [('default', '"BLA"')]
    CHD: xs:string = [('default', '"CHD"')]
    CHG: xs:string = [('default', '"CHG"')]
    CMB: xs:string = [('default', '"CMB"')]
    DAY: xs:string = [('default', '"DAY"')]
    DEP: xs:string = [('default', '"DEP"')]
    DSC: xs:string = [('default', '"DSC"')]
    END: xs:string = [('default', '"END"')]
    FBR: xs:string = [('default', '"FBR"')]
    FLT: xs:string = [('default', '"FLT"')]
    GRP: xs:string = [('default', '"GRP"')]
    HIP: xs:string = [('default', '"HIP"')]
    IVE: xs:string = [('default', '"IVE"')]
    IVR: xs:string = [('default', '"IVR"')]
    MAX: xs:string = [('default', '"MAX"')]
    MIN: xs:string = [('default', '"MIN"')]
    MIS: xs:string = [('default', '"MIS"')]
    NET: xs:string = [('default', '"NET"')]
    OTH: xs:string = [('default', '"OTH"')]
    SEA: xs:string = [('default', '"SEA"')]
    STP: xs:string = [('default', '"STP"')]
    SUR: xs:string = [('default', '"SUR"')]
    TKT: xs:string = [('default', '"TKT"')]
    TRF: xs:string = [('default', '"TRF"')]
    TUC: xs:string = [('default', '"TUC"')]
    TUR: xs:string = [('default', '"TUR"')]
    TVL: xs:string = [('default', '"TVL"')]
    VAC: xs:string = [('default', '"VAC"')]
    VOL: xs:string = [('default', '"VOL"')]
    VOR: xs:string = [('default', '"VOR"')]
    WHO: xs:string = [('default', '"WHO"')]

samples.travelport.output.air_v48_0.air.TypeFareRuleType(str)
    LONG: xs:string = [('default', '"long"')]
    NONE_VALUE: xs:string = [('default', '"none"')]
    SHORT: xs:string = [('default', '"short"')]

samples.travelport.output.air_v48_0.air.TypeFareSearchOption(str)
    ADVANCE_PURCHASE: xs:string = [('default', '"Advance Purchase"')]
    BLACKOUT: xs:string = [('default', '"Blackout"')]
    DAY_OF_WEEK: xs:string = [('default', '"Day-of-week"')]
    EFFECTIVE_DATE: xs:string = [('default', '"Effective Date"')]
    LEAVE: xs:string = [('default', '"Leave"')]
    RETURN_VALUE: xs:string = [('default', '"Return"')]
    SEASONAL: xs:string = [('default', '"Seasonal"')]

samples.travelport.output.air_v48_0.air.TypeFareStatusCode(str)
    READY_TO_TICKET: xs:string = [('default', '"ReadyToTicket"')]
    REPRICE: xs:string = [('default', '"Reprice"')]
    TICKETED: xs:string = [('default', '"Ticketed"')]
    UNABLE: xs:string = [('default', '"Unable"')]
    UNABLE_TO_TICKET: xs:string = [('default', '"UnableToTicket"')]
    UNKNOWN: xs:string = [('default', '"Unknown"')]

samples.travelport.output.air_v48_0.air.TypeFareTripType(str)
    CIRCLE_TRIP: xs:string = [('default', '"CircleTrip"')]
    HALF_RETURN: xs:string = [('default', '"HalfReturn"')]
    ONE_WAY: xs:string = [('default', '"OneWay"')]
    ONE_WAY_ONLY: xs:string = [('default', '"OneWayOnly"')]
    RETURN_ONLY: xs:string = [('default', '"ReturnOnly"')]
    RETURN_VALUE: xs:string = [('default', '"Return"')]
    ROUND_THE_WORLD: xs:string = [('default', '"RoundTheWorld"')]

samples.travelport.output.air_v48_0.air.TypeFaresIndicator(str)
    AGENCY_PRIVATE_FARES_ONLY: xs:string = [('default', '"AgencyPrivateFaresOnly"')]
    AIRLINE_PRIVATE_FARES_ONLY: xs:string = [('default', '"AirlinePrivateFaresOnly"')]
    ALL_FARES: xs:string = [('default', '"AllFares"')]
    NET_FARES_ONLY: xs:string = [('default', '"NetFaresOnly"')]
    PRIVATE_FARES_ONLY: xs:string = [('default', '"PrivateFaresOnly"')]
    PUBLIC_AND_PRIVATE_FARES: xs:string = [('default', '"PublicAndPrivateFares"')]
    PUBLIC_FARES_ONLY: xs:string = [('default', '"PublicFaresOnly"')]

samples.travelport.output.air_v48_0.air.TypeIgnoreStopOver(str)
    IGNORE_SEGMENT: xs:string = [('default', '"IgnoreSegment"')]
    NO_STOP_OVER: xs:string = [('default', '"NoStopOver"')]
    STOP_OVER: xs:string = [('default', '"StopOver"')]

samples.travelport.output.air_v48_0.air.TypeInventoryRequest(str)
    BASIC: xs:string = [('default', '"Basic"')]
    DIRECT_ACCESS: xs:string = [('default', '"DirectAccess"')]
    SEAMLESS: xs:string = [('default', '"Seamless"')]

samples.travelport.output.air_v48_0.air.TypeItinerary(str)
    INVOICE: xs:string = [('default', '"Invoice"')]
    POCKET: xs:string = [('default', '"Pocket"')]

samples.travelport.output.air_v48_0.air.TypeItineraryOption(str)
    NO_AMOUNT: xs:string = [('default', '"NoAmount"')]
    NO_FARE: xs:string = [('default', '"NoFare"')]
    SEQUENCE_NUMBER: xs:string = [('default', '"SequenceNumber"')]

samples.travelport.output.air_v48_0.air.TypeMealService(str)
    ALCOHOLIC_BEVERAGES_FOR_PURCHASE: xs:string = [('default', '"AlcoholicBeveragesForPurchase"')]
    BREAKFAST: xs:string = [('default', '"Breakfast"')]
    COLD_MEAL: xs:string = [('default', '"ColdMeal"')]
    COMPLIMENTARY_ALCOHOLIC_BEVERAGES: xs:string = [('default', '"ComplimentaryAlcoholicBeverages"')]
    COMPLIMENTARY_REFRESHMENTS: xs:string = [('default', '"ComplimentaryRefreshments"')]
    CONTINENTAL_BREAKFAST: xs:string = [('default', '"ContinentalBreakfast"')]
    DINNER: xs:string = [('default', '"Dinner"')]
    FOOD_AND_BEVERAGES_FOR_PURCHASE: xs:string = [('default', '"FoodAndBeveragesForPurchase"')]
    FOOD_FOR_PURCHASE: xs:string = [('default', '"FoodForPurchase"')]
    HOT_MEAL: xs:string = [('default', '"HotMeal"')]
    LUNCH: xs:string = [('default', '"Lunch"')]
    MEAL: xs:string = [('default', '"Meal"')]
    NO_MEAL_SERVICE: xs:string = [('default', '"NoMealService"')]
    REFRESHMENTS_FOR_PURCHASE: xs:string = [('default', '"RefreshmentsForPurchase"')]
    SNACK_OR_BRUNCH: xs:string = [('default', '"SnackOrBrunch"')]

samples.travelport.output.air_v48_0.air.TypeMileOrRouteBasedFare(str)
    BOTH: xs:string = [('default', '"Both"')]
    MILE: xs:string = [('default', '"Mile"')]
    ROUTE: xs:string = [('default', '"Route"')]

samples.travelport.output.air_v48_0.air.TypeNativeSearchModifier()
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.TypeNonAirReservationRef()
    locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0), ('required', True)]

samples.travelport.output.air_v48_0.air.TypePosition(str)
    CENTER: xs:string = [('default', '"Center"')]
    LEFT: xs:string = [('default', '"Left"')]
    LEFT_CENTER: xs:string = [('default', '"LeftCenter"')]
    RIGHT: xs:string = [('default', '"Right"')]
    RIGHT_CENTER: xs:string = [('default', '"RightCenter"')]

samples.travelport.output.air_v48_0.air.TypePricingMethod(str)
    AGENT_ASSISTED: xs:string = [('default', '"AgentAssisted"')]
    AIRLINE: xs:string = [('default', '"Airline"')]
    ALT_SEGMENT_REMOVED_REPRICE: xs:string = [('default', '"AltSegmentRemovedReprice"')]
    AUTO: xs:string = [('default', '"Auto"')]
    AUTO_RAPID_REPRICE: xs:string = [('default', '"AutoRapidReprice"')]
    AUTO_USING_PRIVATE_FARE: xs:string = [('default', '"AutoUsingPrivateFare"')]
    AUXILIARY_SEGMENT_REMOVED_REPRICE: xs:string = [('default', '"AuxiliarySegmentRemovedReprice"')]
    DUPLICATE_SEGMENT_REMOVED_REPRICE: xs:string = [('default', '"DuplicateSegmentRemovedReprice"')]
    EXPIRED: xs:string = [('default', '"Expired"')]
    GUARANTEED: xs:string = [('default', '"Guaranteed"')]
    GUARANTEED_USING_AGENCY_PRIVATE_FARE: xs:string = [('default', '"GuaranteedUsingAgencyPrivateFare"')]
    GUARANTEED_USING_AIRLINE_PRIVATE_FARE: xs:string = [('default', '"GuaranteedUsingAirlinePrivateFare"')]
    INVALID: xs:string = [('default', '"Invalid"')]
    MANUAL: xs:string = [('default', '"Manual"')]
    MANUAL_FARE: xs:string = [('default', '"ManualFare"')]
    REPRICE: xs:string = [('default', '"Reprice"')]
    RESTORED: xs:string = [('default', '"Restored"')]
    TICKETED: xs:string = [('default', '"Ticketed"')]
    UNKNOWN: xs:string = [('default', '"Unknown"')]
    UNTICKETABLE: xs:string = [('default', '"Unticketable"')]
    VERIFY_PRICE: xs:string = [('default', '"VerifyPrice"')]

samples.travelport.output.air_v48_0.air.TypePrivateFare(str)
    AGENCY_PRIVATE_FARE: xs:string = [('default', '"AgencyPrivateFare"')]
    AIRLINE_PRIVATE_FARE: xs:string = [('default', '"AirlinePrivateFare"')]
    PRIVATE_FARE: xs:string = [('default', '"PrivateFare"')]
    UNKNOWN_TYPE: xs:string = [('default', '"UnknownType"')]

samples.travelport.output.air_v48_0.air.TypePurposeCode(str)
    BUSINESS: xs:string = [('default', '"Business"')]
    CHARTER_SERVICE: xs:string = [('default', '"CharterService"')]
    PLEASURE: xs:string = [('default', '"Pleasure"')]

samples.travelport.output.air_v48_0.air.TypeReportingType(str)
    AVAILABILITY_FAILURE: xs:string = [('default', '"AvailabilityFailure"')]
    MARRIAGE_DISCREPANCIES: xs:string = [('default', '"MarriageDiscrepancies"')]
    PRICE_DISCREPANCIES: xs:string = [('default', '"PriceDiscrepancies"')]
    SCHEDULE_DISCREPANCIES: xs:string = [('default', '"ScheduleDiscrepancies"')]
    SUCCESS: xs:string = [('default', '"Success"')]

samples.travelport.output.air_v48_0.air.TypeRestrictionLengthOfStay()
    length: Optional[int] = [('default', None)]
    more_rules_present: Optional[bool] = [('default', None)]
    stay_date: Optional[str] = [('default', None)]
    stay_unit: Optional[TypeStayUnit] = [('default', None)]

samples.travelport.output.air_v48_0.air.TypeRowLocation(str)
    FRONT: xs:string = [('default', '"Front"')]
    REAR: xs:string = [('default', '"Rear"')]

samples.travelport.output.air_v48_0.air.TypeSeatAvailability(str)
    ADVANCED_BOARDING_PASS: xs:string = [('default', '"AdvancedBoardingPass"')]
    ADV_SEAT_SELECTION: xs:string = [('default', '"AdvSeatSelection"')]
    AVAILABLE: xs:string = [('default', '"Available"')]
    BLOCKED: xs:string = [('default', '"Blocked"')]
    CODESHARE: xs:string = [('default', '"Codeshare"')]
    EXTRA: xs:string = [('default', '"Extra"')]
    GROUP: xs:string = [('default', '"Group"')]
    INTERLINE_CHECKIN: xs:string = [('default', '"InterlineCheckin"')]
    NO_SEAT: xs:string = [('default', '"NoSeat"')]
    OCCUPIED: xs:string = [('default', '"Occupied"')]
    PARTNER_AIRLINE: xs:string = [('default', '"PartnerAirline"')]
    PROTECTED: xs:string = [('default', '"Protected"')]
    RBDRESTRICTION: xs:string = [('default', '"RBDRestriction"')]
    RESERVED: xs:string = [('default', '"Reserved"')]
    UNOCCUPIED_BUT_NOT_ELIGIBLE: xs:string = [('default', '"UnoccupiedButNotEligible"')]

samples.travelport.output.air_v48_0.air.TypeSegmentRef()
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeStayUnit(str)
    DAYS: xs:string = [('default', '"Days"')]
    FRIDAY: xs:string = [('default', '"Friday"')]
    HOURS: xs:string = [('default', '"Hours"')]
    MINUTES: xs:string = [('default', '"Minutes"')]
    MONDAY: xs:string = [('default', '"Monday"')]
    MONTHS: xs:string = [('default', '"Months"')]
    SATURDAY: xs:string = [('default', '"Saturday"')]
    SUNDAY: xs:string = [('default', '"Sunday"')]
    THURSDAY: xs:string = [('default', '"Thursday"')]
    TUESDAY: xs:string = [('default', '"Tuesday"')]
    WEDNESDAY: xs:string = [('default', '"Wednesday"')]

samples.travelport.output.air_v48_0.air.TypeTaxInfoWithPaymentRef(TypeTaxInfo)
    payment_ref: List[PaymentRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.TypeTcrstatus(str)
    CANCELLED: xs:string = [('default', '"Cancelled"')]
    CONFIRMED: xs:string = [('default', '"Confirmed"')]
    EXCHANGED: xs:string = [('default', '"Exchanged"')]
    PENDING: xs:string = [('default', '"Pending"')]
    REFUNDED: xs:string = [('default', '"Refunded"')]
    UNKNOWN: xs:string = [('default', '"Unknown"')]

samples.travelport.output.air_v48_0.air.TypeTextElement()
    language_code: Optional[str] = [('default', None)]
    type: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.TypeTicketFailureInfo()
    booking_traveler_ref: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    code: Optional[int] = [('default', None), ('required', True)]
    message: Optional[str] = [('default', None)]
    name: Optional[str] = [('default', None), ('required', True)]
    tcrnumber: Optional[str] = [('default', None)]
    ticket_number: Optional[TicketNumber] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeTicketModifierAccountingType()
    value: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeTicketModifierAmountType()
    amount: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeTicketModifierPercentType()
    percent: Optional[str] = [('default', None), ('pattern', '([0-9]{1,2}|100)\\.[0-9]{1,2}'), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeTicketModifierValueType()
    net_fare_value: Optional[bool] = [('default', None)]
    value: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeTicketingModifiersRef()
    air_pricing_info_ref: List[AirPricingInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.TypeTripType(str)
    BUSINESS: xs:string = [('default', '"Business"')]
    BUSINESS_OR_FIRST: xs:string = [('default', '"BusinessOrFirst"')]
    CHEAPEST: xs:string = [('default', '"Cheapest"')]
    LEISURE: xs:string = [('default', '"Leisure"')]
    LUXURY: xs:string = [('default', '"Luxury"')]
    MOST_CONVENIENT: xs:string = [('default', '"MostConvenient"')]
    NO_PENALTY: xs:string = [('default', '"NoPenalty"')]
    PREFER_FIRST: xs:string = [('default', '"PreferFirst"')]
    QUICKEST: xs:string = [('default', '"Quickest"')]

samples.travelport.output.air_v48_0.air.TypeUnitOfMeasure()
    unit: Optional[str] = [('default', None)]
    value: Optional[float] = [('default', None)]

samples.travelport.output.air_v48_0.air.TypeUnitWeight(str)
    KILOGRAMS: xs:string = [('default', '"Kilograms"')]
    POUNDS: xs:string = [('default', '"Pounds"')]

samples.travelport.output.air_v48_0.air.TypeVarianceIndicator(str)
    EARLY: xs:string = [('default', '"Early"')]
    LATE: xs:string = [('default', '"Late"')]

samples.travelport.output.air_v48_0.air.TypeVarianceType(str)
    ACTUAL: xs:string = [('default', '"Actual"')]
    CANCELED: xs:string = [('default', '"Canceled"')]
    DIVERSION: xs:string = [('default', '"Diversion"')]
    ESTIMATED: xs:string = [('default', '"Estimated"')]

samples.travelport.output.air_v48_0.air.TypeWeight()
    unit: Optional[TypeUnitWeight] = [('default', None)]
    value: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air.UpsellBrand()
    fare_basis: Optional[str] = [('default', None)]
    fare_info_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Url()
    type: Optional[str] = [('default', None)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.Urlinfo()
    text: List[str] = [('default', 'list'), ('max_length', 250.0), ('max_occurs', 999), ('min_occurs', 0)]
    url: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air.ValueDetails()
    name: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.Variance()
    indicator: Optional[TypeVarianceIndicator] = [('default', None)]
    reason: Optional[str] = [('default', None)]
    time: Optional[str] = [('default', None)]
    type: Optional[TypeVarianceType] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air.VoidDocumentInfo()
    document_number: Optional[str] = [('default', None), ('max_length', 13.0), ('min_length', 1.0)]
    document_type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.VoidFailureInfo()
    code: Optional[int] = [('default', None)]
    ticket_number: Optional[str] = [('default', None), ('required', True)]
    value: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.VoidResultInfo()
    document_number: Optional[str] = [('default', None), ('max_length', 13.0), ('min_length', 1.0)]
    document_type: Optional[str] = [('default', None)]
    failure_remark: Optional[str] = [('default', None)]
    result_type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air.WaiverCode()
    endorsement: Optional[str] = [('default', None), ('max_length', 100.0), ('min_length', 0.0)]
    ticket_designator: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 0.0)]
    tour_code: Optional[str] = [('default', None), ('max_length', 15.0)]

samples.travelport.output.air_v48_0.air.Yield()
    amount: Optional[str] = [('default', None)]
    booking_traveler_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirBaseReq(BaseReq)

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeEligibilityReq(BaseReq)
    provider_reservation_info: Optional["AirExchangeEligibilityReq.ProviderReservationInfo"] = [('default', None), ('required', True)]
    type: Optional[str] = [('default', None)]

    samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeEligibilityReq.ProviderReservationInfo()
        provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
        provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeEligibilityRsp(BaseRsp)
    exchange_eligibility_info: Optional[ExchangeEligibilityInfo] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeMultiQuoteReq(BaseAirExchangeMultiQuoteReq)
    type: str = [('default', '"Summary"')]

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeMultiQuoteRsp(BaseRsp)
    air_exchange_mulit_quote_list: List[AirExchangeMulitQuoteList] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_segment_list: List[AirSegmentList] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    brand_list: List[BrandList] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeQuoteReq(BaseAirExchangeQuoteReq)

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeQuoteRsp(BaseRsp)
    air_exchange_bundle: List[AirExchangeBundle] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_exchange_bundle_total: Optional[AirExchangeBundleTotal] = [('default', None)]
    air_pricing_solution: List[AirPricingSolution] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    fare_rule: List[FareRule] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    ticket_number: List[TicketNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeReq(BaseReq)
    add_svc: Optional[AddSvc] = [('default', None)]
    air_exchange_bundle: List[AirExchangeBundle] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_exchange_bundle_total: Optional[AirExchangeBundleTotal] = [('default', None)]
    air_exchange_modifiers: Optional[AirExchangeModifiers] = [('default', None)]
    air_pricing_solution: List[AirPricingSolution] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None), ('required', True)]
    form_of_payment: Optional[FormOfPayment] = [('default', None)]
    form_of_payment_ref: Optional[FormOfPaymentRef] = [('default', None)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    return_reservation: bool = [('default', False)]
    specific_seat_assignment: List[SpecificSeatAssignment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ssrinfo: List[Ssrinfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_number: List[TicketNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeRsp(BaseRsp)
    air_reservation: Optional[TypeAirReservationWithFop] = [('default', None)]
    booking_traveler: List[BookingTraveler] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    exchange_failure_info: List[TypeTicketFailureInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_number: List[TicketNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeTicketingReq(BaseReq)
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None), ('required', True)]
    air_ticketing_modifiers: List[AirTicketingModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    bulk_ticket: bool = [('default', False)]
    change_fee_on_ticket: bool = [('default', True)]
    detailed_billing_information: List[DetailedBillingInformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_number: Optional[TicketNumber] = [('default', None), ('required', True)]
    ticketing_modifiers_ref: List[TypeTicketingModifiersRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    waiver_code: Optional[WaiverCode] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirExchangeTicketingRsp(BaseRsp)
    air_solution_changed_info: Optional[AirSolutionChangedInfo] = [('default', None)]
    detailed_billing_information: Optional[DetailedBillingInformation] = [('default', None)]
    etr: Optional[Etr] = [('default', None)]
    ticket_failure_info: Optional[TicketFailureInfo] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirFareDisplayReq(BaseReq)
    account_code: List[AccountCode] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    air_fare_display_modifiers: Optional[AirFareDisplayModifiers] = [('default', None)]
    air_fare_display_rule_key: Optional[AirFareDisplayRuleKey] = [('default', None)]
    booking_code: List[BookingCode] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    carrier: List[Carrier] = [('default', 'list'), ('max_occurs', 10), ('min_occurs', 0)]
    channel_id: Optional[str] = [('default', None), ('max_length', 4.0), ('min_length', 2.0)]
    contract_code: Optional[ContractCode] = [('default', None)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    fare_basis: Optional[FareBasis] = [('default', None)]
    fare_type: List[FareType] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    include_addl_booking_code_info: Optional[IncludeAddlBookingCodeInfo] = [('default', None)]
    include_mile_route_information: Optional[TypeMileOrRouteBasedFare] = [('default', None)]
    nscc: Optional[str] = [('default', None), ('max_length', 3.0), ('min_length', 1.0)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    passenger_type: List[TypePassengerType] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    point_of_sale: List[PointOfSale] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    return_mm: bool = [('default', False)]
    un_saleable_fares_only: Optional[bool] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirFareDisplayRsp(BaseRsp)
    fare_display: List[FareDisplay] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirFareRulesReq(BaseReq)
    air_fare_display_rule_key: Optional[AirFareDisplayRuleKey] = [('default', None)]
    air_fare_rules_modifier: Optional[AirFareRulesModifier] = [('default', None)]
    air_reservation_selector: Optional["AirFareRulesReq.AirReservationSelector"] = [('default', None)]
    fare_rule_key: List[FareRuleKey] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fare_rule_lookup: Optional[FareRuleLookup] = [('default', None)]
    fare_rule_type: TypeFareRuleType = [('default', '"long"')]
    fare_rules_filter_category: List["AirFareRulesReq.FareRulesFilterCategory"] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air_req_rsp.AirFareRulesReq.AirReservationSelector()
        air_reservation_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0), ('required', True)]
        fare_info_ref: List[FareInfoRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air_req_rsp.AirFareRulesReq.FareRulesFilterCategory()
        category_code: List[str] = [('default', 'list'), ('max_occurs', 35), ('min_occurs', 1)]
        fare_info_ref: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirFareRulesRsp(BaseRsp)
    fare_rule: List[FareRule] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirMerchandisingDetailsReq(BaseReq)
    merchandising_availability_details: Optional[MerchandisingAvailabilityDetails] = [('default', None)]
    merchandising_details: Optional[MerchandisingDetails] = [('default', None)]
    optional_service_modifiers: Optional[OptionalServiceModifiers] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirMerchandisingDetailsRsp(BaseRsp)
    brand: List[Brand] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    unassociated_booking_code_list: Optional["AirMerchandisingDetailsRsp.UnassociatedBookingCodeList"] = [('default', None)]

    samples.travelport.output.air_v48_0.air_req_rsp.AirMerchandisingDetailsRsp.UnassociatedBookingCodeList()
        applicable_segment: List[TypeApplicableSegment] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirMerchandisingOfferAvailabilityReq(BaseReq)
    agency_sell_info: Optional[AgencySellInfo] = [('default', None)]
    air_solution: Optional[AirSolution] = [('default', None)]
    host_reservation: List[HostReservation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    merchandising_pricing_modifiers: Optional[MerchandisingPricingModifiers] = [('default', None)]
    offer_availability_modifiers: List[OfferAvailabilityModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirMerchandisingOfferAvailabilityRsp(BaseRsp)
    air_solution: Optional[AirSolution] = [('default', None), ('required', True)]
    embargo_list: Optional[EmbargoList] = [('default', None)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    remark: Optional[Remark] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirPrePayReq(BaseReq)
    list_search: Optional["AirPrePayReq.ListSearch"] = [('default', None)]
    pre_pay_retrieve: Optional["AirPrePayReq.PrePayRetrieve"] = [('default', None)]

    samples.travelport.output.air_v48_0.air_req_rsp.AirPrePayReq.ListSearch()
        loyalty_card: List[LoyaltyCard] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
        max_results: Optional[int] = [('default', None), ('max_inclusive', 200.0), ('min_inclusive', 1.0), ('required', True)]
        person_name_search: Optional[PersonNameSearch] = [('default', None)]
        start_from_result: Optional[int] = [('default', None), ('min_inclusive', 1.0), ('required', True)]

    samples.travelport.output.air_v48_0.air_req_rsp.AirPrePayReq.PrePayRetrieve()
        id: Optional[str] = [('default', None), ('max_length', 36.0), ('min_length', 1.0), ('required', True)]
        type: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirPrePayRsp(BaseRsp)
    max_results: Optional[int] = [('default', None), ('max_inclusive', 200.0), ('min_inclusive', 1.0)]
    more_data_start_index: Optional[str] = [('default', None)]
    more_indicator: Optional[bool] = [('default', None)]
    pre_pay_profile_info: List[PrePayProfileInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air_req_rsp.AirPriceReq(BaseAirPriceReq)

samples.travelport.output.air_v48_0.air_req_rsp.AirPriceRsp(BaseAirPriceRsp)

samples.travelport.output.air_v48_0.air_req_rsp.AirRefundQuoteReq(BaseReq)
    air_refund_modifiers: Optional[AirRefundModifiers] = [('default', None)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ignore: bool = [('default', False)]
    provider_reservation_info: List["AirRefundQuoteReq.ProviderReservationInfo"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tcrnumber: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_number: List[TicketNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air_req_rsp.AirRefundQuoteReq.ProviderReservationInfo()
        provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
        provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.AirRefundQuoteRsp(BaseRsp)
    air_refund_bundle: List[AirRefundBundle] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tcrrefund_bundle: List[TcrrefundBundle] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirRefundReq(BaseReq)
    air_refund_bundle: List[AirRefundBundle] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_refund_modifiers: Optional[AirRefundModifiers] = [('default', None)]
    commission: List[Commission] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]
    form_of_payment: Optional[FormOfPayment] = [('default', None)]
    tcrrefund_bundle: List[TcrrefundBundle] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirRefundRsp(BaseRsp)
    etr: List[Etr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    refund_failure_info: List[TypeTicketFailureInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    tcr: List[Tcr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirRepriceReq(AirBaseReq)
    air_pricing_solution: Optional[AirPricingSolution] = [('default', None), ('required', True)]
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None)]
    fare_rule_type: TypeFareRuleType = [('default', '"none"')]
    ignore_availability: bool = [('default', False)]

samples.travelport.output.air_v48_0.air_req_rsp.AirRepriceRsp(BaseRsp)
    air_pricing_solution: Optional[AirPricingSolution] = [('default', None), ('required', True)]
    fare_rule: List[FareRule] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirRetrieveDocumentReq(BaseReq)
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0)]
    retrieve_mco: Optional[bool] = [('default', None)]
    return_pricing: Optional[bool] = [('default', None)]
    return_restrictions: Optional[bool] = [('default', None)]
    tcrnumber: List[str] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_number: List[TicketNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    universal_record_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirRetrieveDocumentRsp(BaseRsp)
    document_failure_info: List[TypeFailureInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    etr: List[Etr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    mco: List[Mco] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    service_fee_info: List[ServiceFeeInfo] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    tcr: List[Tcr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    universal_record_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirSearchReq(BaseSearchReq)
    air_search_modifiers: Optional[AirSearchModifiers] = [('default', None)]
    journey_data: Optional[JourneyData] = [('default', None)]
    point_of_commencement: Optional[PointOfCommencement] = [('default', None)]
    search_air_leg: List[SearchAirLeg] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 0)]
    search_specific_air_segment: List[SearchSpecificAirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirSearchRsp(BaseAvailabilitySearchRsp)
    air_price_point_list: Optional[AirPricePointList] = [('default', None)]
    air_pricing_solution: List[AirPricingSolution] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    alternate_location_distance_list: Optional[AlternateLocationDistanceList] = [('default', None)]
    alternate_route_list: Optional[AlternateRouteList] = [('default', None)]
    expert_solution_list: Optional[ExpertSolutionList] = [('default', None)]
    fare_info_message: List[FareInfoMessage] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    fare_note_list: Optional[FareNoteList] = [('default', None)]
    rail_fare_idlist: Optional[RailFareIdlist] = [('default', None)]
    rail_fare_list: Optional[RailFareList] = [('default', None)]
    rail_fare_note_list: Optional[RailFareNoteList] = [('default', None)]
    rail_journey_list: Optional[RailJourneyList] = [('default', None)]
    rail_pricing_solution: List[RailPricingSolution] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    rail_segment_list: Optional[RailSegmentList] = [('default', None)]
    route_list: Optional[RouteList] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.AirTicketingReq(AirBaseReq)
    air_pricing_info_ref: List["AirTicketingReq.AirPricingInfoRef"] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None), ('required', True)]
    air_segment_ticketing_modifiers: List[AirSegmentTicketingModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_ticketing_modifiers: List[AirTicketingModifiers] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    bulk_ticket: bool = [('default', False)]
    commission: List[Commission] = [('default', 'list'), ('max_occurs', 18), ('min_occurs', 0)]
    detailed_billing_information: List[DetailedBillingInformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    fax_details_information: Optional[FaxDetailsInformation] = [('default', None)]
    return_info_on_fail: bool = [('default', True)]
    ticketing_modifiers_ref: List[TypeTicketingModifiersRef] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    validate_spanish_residency: bool = [('default', False)]
    waiver_code: Optional[WaiverCode] = [('default', None)]

    samples.travelport.output.air_v48_0.air_req_rsp.AirTicketingReq.AirPricingInfoRef()
        booking_traveler_ref: List[BookingTravelerRef] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]
        key: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.AirTicketingRsp(BaseRsp)
    air_solution_changed_info: Optional[AirSolutionChangedInfo] = [('default', None)]
    detailed_billing_information: List[DetailedBillingInformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    etr: List[Etr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ticket_failure_info: List[TicketFailureInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirUpsellSearchReq(AirBaseReq)
    air_itinerary: Optional[AirItinerary] = [('default', None), ('required', True)]
    air_price_result: List[AirPriceResult] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air_req_rsp.AirUpsellSearchRsp(BaseAirPriceRsp)

samples.travelport.output.air_v48_0.air_req_rsp.AirVoidDocumentReq(BaseReq)
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None)]
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0)]
    provider_locator_code: Optional[str] = [('default', None)]
    show_etr: bool = [('default', False)]
    validate_spanish_residency: bool = [('default', False)]
    void_document_info: List[VoidDocumentInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AirVoidDocumentRsp(BaseRsp)
    etr: List[Etr] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    void_result_info: List[VoidResultInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air_req_rsp.AvailabilitySearchReq(AirSearchReq)
    channel_id: Optional[str] = [('default', None), ('max_length', 4.0), ('min_length', 2.0)]
    nscc: Optional[str] = [('default', None), ('max_length', 3.0), ('min_length', 1.0)]
    point_of_sale: List[PointOfSale] = [('default', 'list'), ('max_occurs', 5), ('min_occurs', 0)]
    return_brand_indicator: bool = [('default', False)]
    search_passenger: List[SearchPassenger] = [('default', 'list'), ('max_occurs', 18), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.AvailabilitySearchRsp(BaseAvailabilitySearchRsp)

samples.travelport.output.air_v48_0.air_req_rsp.BaseAirExchangeMultiQuoteReq(BaseCoreReq)
    air_pricing_solution: List[AirPricingSolution] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]
    original_itinerary_details: Optional[OriginalItineraryDetails] = [('default', None)]
    override_pcc: Optional[OverridePcc] = [('default', None)]
    provider_reservation_info: Optional["BaseAirExchangeMultiQuoteReq.ProviderReservationInfo"] = [('default', None)]
    repricing_modifiers: Optional[RepricingModifiers] = [('default', None)]
    ticket_number: List[TicketNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air_req_rsp.BaseAirExchangeMultiQuoteReq.ProviderReservationInfo()
        provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
        provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.BaseAirExchangeQuoteReq(BaseCoreReq)
    air_exchange_modifiers: Optional[AirExchangeModifiers] = [('default', None)]
    air_pricing_solution: List[AirPricingSolution] = [('default', 'list'), ('max_occurs', 2), ('min_occurs', 0)]
    fare_rule_type: TypeFareRuleType = [('default', '"none"')]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    original_itinerary_details: Optional[OriginalItineraryDetails] = [('default', None)]
    pcc: Optional[Pcc] = [('default', None)]
    provider_reservation_info: Optional["BaseAirExchangeQuoteReq.ProviderReservationInfo"] = [('default', None)]
    repricing_modifiers: Optional[RepricingModifiers] = [('default', None)]
    ticket_number: List[TicketNumber] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

    samples.travelport.output.air_v48_0.air_req_rsp.BaseAirExchangeQuoteReq.ProviderReservationInfo()
        provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
        provider_locator_code: Optional[str] = [('default', None), ('max_length', 15.0), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.BaseAirPriceReq(BaseCoreReq)
    air_itinerary: Optional[AirItinerary] = [('default', None), ('required', True)]
    air_pricing_command: List[AirPricingCommand] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 1)]
    air_pricing_modifiers: Optional[AirPricingModifiers] = [('default', None)]
    air_reservation_locator_code: Optional[AirReservationLocatorCode] = [('default', None)]
    check_flight_details: bool = [('default', False)]
    check_obfees: Optional[str] = [('default', None)]
    fare_rule_type: TypeFareRuleType = [('default', '"none"')]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    ignore_availability: bool = [('default', False)]
    nscc: Optional[str] = [('default', None), ('max_length', 3.0), ('min_length', 1.0)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    pcc: Optional[Pcc] = [('default', None)]
    return_mm: bool = [('default', False)]
    search_passenger: List[SearchPassenger] = [('default', 'list'), ('max_occurs', 18), ('min_occurs', 1)]
    split_pricing: bool = [('default', False)]
    ssr: List[Ssr] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    supplier_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 1.0)]
    ticket_date: Optional[str] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.BaseAirPriceRsp(BaseRsp)
    air_itinerary: Optional[AirItinerary] = [('default', None), ('required', True)]
    air_price_result: List[AirPriceResult] = [('default', 'list'), ('max_occurs', 16), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air_req_rsp.BaseAirSearchReq(BaseCoreSearchReq)
    air_search_modifiers: Optional[AirSearchModifiers] = [('default', None)]
    journey_data: Optional[JourneyData] = [('default', None)]
    search_air_leg: List[SearchAirLeg] = [('default', 'list'), ('max_occurs', 9), ('min_occurs', 0)]
    search_specific_air_segment: List[SearchSpecificAirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    split_ticketing_search: Optional[SplitTicketingSearch] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.BaseAvailabilitySearchRsp(BaseSearchRsp)
    air_itinerary_solution: List[AirItinerarySolution] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    air_segment_list: Optional[AirSegmentList] = [('default', None)]
    apisrequirements_list: Optional[ApisrequirementsList] = [('default', None)]
    distance_units: Optional[TypeDistance] = [('default', None)]
    fare_info_list: Optional[FareInfoList] = [('default', None)]
    fare_remark_list: Optional[FareRemarkList] = [('default', None)]
    flight_details_list: Optional[FlightDetailsList] = [('default', None)]
    host_token_list: Optional[HostTokenList] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.BaseLowFareSearchReq(BaseAirSearchReq)
    air_exchange_modifiers: Optional[AirExchangeModifiers] = [('default', None)]
    air_pricing_modifiers: Optional[AirPricingModifiers] = [('default', None)]
    check_obfees: Optional[str] = [('default', None)]
    enable_point_to_point_alternates: bool = [('default', False)]
    enable_point_to_point_search: bool = [('default', False)]
    enumeration: Optional[Enumeration] = [('default', None)]
    fare_info_rules: bool = [('default', False)]
    fare_rules_filter_category: Optional[FareRulesFilterCategory] = [('default', None)]
    flex_explore_modifiers: Optional[FlexExploreModifiers] = [('default', None)]
    form_of_payment: List[FormOfPayment] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    include_fare_info_messages: bool = [('default', False)]
    max_number_of_expert_solutions: int = [('default', 0)]
    meta_option_identifier: Optional[str] = [('default', None), ('max_length', 2.0), ('min_length', 1.0)]
    multi_gdssearch: bool = [('default', False)]
    nscc: Optional[str] = [('default', None), ('max_length', 3.0), ('min_length', 1.0)]
    pcc: Optional[Pcc] = [('default', None)]
    prefer_complete_itinerary: bool = [('default', True)]
    return_branded_fares: bool = [('default', True)]
    return_mm: bool = [('default', False)]
    return_upsell_fare: bool = [('default', False)]
    search_passenger: List[SearchPassenger] = [('default', 'list'), ('max_occurs', 18), ('min_occurs', 1)]
    solution_result: bool = [('default', False)]

samples.travelport.output.air_v48_0.air_req_rsp.BrandList()
    brand: List[Brand] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.EmdissuanceReq(BaseReq)
    issuance_modifiers: Optional[IssuanceModifiers] = [('default', None)]
    issue_all_open_svc: bool = [('default', False)]
    provider_reservation_detail: Optional[ProviderReservationDetail] = [('default', None), ('required', True)]
    selection_modifiers: Optional[SelectionModifiers] = [('default', None)]
    show_details: bool = [('default', False)]
    ticket_number: Optional[TicketNumber] = [('default', None)]
    universal_record_locator_code: Optional[str] = [('default', None), ('max_length', 8.0), ('min_length', 5.0), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.EmdissuanceRsp(BaseRsp)
    emdinfo: List[Emdinfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    emdsummary_info: List[EmdsummaryInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.EmdretrieveReq(BaseReq)
    detail_retrieve: Optional["EmdretrieveReq.DetailRetrieve"] = [('default', None)]
    list_retrieve: Optional["EmdretrieveReq.ListRetrieve"] = [('default', None)]

    samples.travelport.output.air_v48_0.air_req_rsp.EmdretrieveReq.DetailRetrieve()
        emdnumber: Optional[str] = [('default', None), ('length', 13), ('required', True)]
        provider_reservation_detail: Optional[ProviderReservationDetail] = [('default', None)]

    samples.travelport.output.air_v48_0.air_req_rsp.EmdretrieveReq.ListRetrieve()
        provider_reservation_detail: Optional[ProviderReservationDetail] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.EmdretrieveRsp(BaseRsp)
    emdinfo: Optional[Emdinfo] = [('default', None)]
    emdsummary_info: List[EmdsummaryInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.FlightDetailsReq(BaseReq)
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air_req_rsp.FlightDetailsRsp(BaseRsp)
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]
    co2_emissions: List[Co2Emissions] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.FlightInformationReq(BaseReq)
    flight_info_criteria: List[FlightInfoCriteria] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air_req_rsp.FlightInformationRsp(BaseRsp)
    flight_info: List[FlightInfo] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air_req_rsp.FlightTimeTableReq(BaseSearchReq)
    flight_time_table_criteria: Optional[FlightTimeTableCriteria] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.FlightTimeTableRsp(BaseSearchRsp)
    flight_time_table_list: Optional["FlightTimeTableRsp.FlightTimeTableList"] = [('default', None)]

    samples.travelport.output.air_v48_0.air_req_rsp.FlightTimeTableRsp.FlightTimeTableList()
        flight_time_detail: List[FlightTimeDetail] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 1)]

samples.travelport.output.air_v48_0.air_req_rsp.LowFareSearchAsynchReq(BaseLowFareSearchReq)
    air_search_asynch_modifiers: Optional[AirSearchAsynchModifiers] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.LowFareSearchAsynchRsp(AirSearchRsp)
    async_provider_specific_response: List[AsyncProviderSpecificResponse] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    brand_list: Optional[BrandList] = [('default', None)]
    currency_type: Optional[str] = [('default', None), ('length', 3)]
    search_id: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.LowFareSearchReq(BaseLowFareSearchReq)
    policy_reference: Optional[str] = [('default', None), ('max_length', 20.0), ('min_length', 1.0)]

samples.travelport.output.air_v48_0.air_req_rsp.LowFareSearchRsp(AirSearchRsp)
    brand_list: Optional[BrandList] = [('default', None)]
    currency_type: Optional[str] = [('default', None), ('length', 3), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.RetrieveLowFareSearchReq(BaseReq)
    provider_code: Optional[str] = [('default', None), ('max_length', 5.0), ('min_length', 2.0), ('required', True)]
    search_id: Optional[str] = [('default', None), ('required', True)]

samples.travelport.output.air_v48_0.air_req_rsp.RetrieveLowFareSearchRsp(AirSearchRsp)
    async_provider_specific_response: List[AsyncProviderSpecificResponse] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    brand_list: Optional[BrandList] = [('default', None)]
    currency_type: Optional[str] = [('default', None), ('length', 3)]

samples.travelport.output.air_v48_0.air_req_rsp.ScheduleSearchReq(AirSearchReq)

samples.travelport.output.air_v48_0.air_req_rsp.ScheduleSearchRsp(AirSearchRsp)

samples.travelport.output.air_v48_0.air_req_rsp.SearchSpecificAirSegment()
    carrier: Optional[str] = [('default', None), ('length', 2), ('required', True)]
    departure_time: Optional[str] = [('default', None), ('required', True)]
    destination: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    flight_number: Optional[str] = [('default', None), ('max_length', 5.0), ('required', True)]
    origin: Optional[str] = [('default', None), ('length', 3), ('required', True), ('white_space', 'collapse')]
    segment_index: Optional[int] = [('default', None)]

samples.travelport.output.air_v48_0.air_req_rsp.SeatMapReq(BaseReq)
    agency_sell_info: Optional[AgencySellInfo] = [('default', None)]
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    host_reservation: Optional[HostReservation] = [('default', None)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    merchandising_pricing_modifiers: Optional[MerchandisingPricingModifiers] = [('default', None)]
    return_branding_info: bool = [('default', False)]
    return_seat_pricing: Optional[bool] = [('default', None), ('required', True)]
    search_traveler: List[SearchTraveler] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]

samples.travelport.output.air_v48_0.air_req_rsp.SeatMapRsp(BaseRsp)
    air_segment: List[AirSegment] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    cabin_class: Optional[CabinClass] = [('default', None)]
    copyright: Optional[str] = [('default', None)]
    group_seat_price: Optional[str] = [('default', None)]
    host_token: List[HostToken] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    optional_services: Optional[OptionalServices] = [('default', None)]
    payment_restriction: List[PaymentRestriction] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    remark: Optional[Remark] = [('default', None)]
    rows: List[Rows] = [('default', 'list'), ('max_occurs', 99), ('min_occurs', 0)]
    search_traveler: List[SearchTraveler] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
    seat_information: List[SeatInformation] = [('default', 'list'), ('max_occurs', 999), ('min_occurs', 0)]
